
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
	return pm_state;
}


enum power_states pm_system_suspend(int32_t ticks)
{
   0:	20001ae0 	.word	0x20001ae0
	pm_state = (forced_pm_state == POWER_STATE_AUTO) ?
   4:	000023c5 	.word	0x000023c5
		   pm_policy_next_state(ticks) : forced_pm_state;
   8:	00005b5f 	.word	0x00005b5f
   c:	000023f5 	.word	0x000023f5
  10:	000023f5 	.word	0x000023f5
	if (pm_state == POWER_STATE_ACTIVE) {
  14:	000023f5 	.word	0x000023f5
  18:	000023f5 	.word	0x000023f5
	...
	pm_power_state_set(pm_state);
  2c:	00002161 	.word	0x00002161
	if (!post_ops_done) {
  30:	000023f5 	.word	0x000023f5
		post_ops_done = 1;
  34:	00000000 	.word	0x00000000
		forced_pm_state = POWER_STATE_AUTO;
  38:	0000210d 	.word	0x0000210d
		pm_state_notify(false);
  3c:	00005b43 	.word	0x00005b43

00000040 <_irq_vector_table>:
		pm_power_state_exit_post_ops(pm_state);
  40:	00002385 00002385 00002385 00002385     .#...#...#...#..
	return pm_policy_mgr(ticks);
}
  50:	00002385 00002385 00002385 00002385     .#...#...#...#..
  60:	00002385 00002385 00002385 00002385     .#...#...#...#..
  70:	00002385 00002385 00002385 00002385     .#...#...#...#..
  80:	00002385 00002385 00002385 00002385     .#...#...#...#..
  90:	00002385 00002385 00002385 00002385     .#...#...#...#..
  a0:	00002385 00002385 00002385 00002385     .#...#...#...#..
  b0:	00002385 00002385 00002385 00002385     .#...#...#...#..
  c0:	00002385 00002385 00002385 00002385     .#...#...#...#..
  d0:	00002385 00002385 00002385 00002385     .#...#...#...#..
  e0:	00002385 00002385 00002385 00002385     .#...#...#...#..
  f0:	00002385 00002385 00002385 00002385     .#...#...#...#..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <CONFIG_LOG_STRDUP_MAX_STRING+0x46>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295
     184:	f080 8116 	bcs.w	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295
     1b2:	f080 8101 	bcs.w	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <CONFIG_LOG_STRDUP_MAX_STRING+0x82>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <CONFIG_LOG_STRDUP_MAX_STRING+0x14>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295
     20a:	d202      	bcs.n	212 <CONFIG_LOG_STRDUP_MAX_STRING+0x12>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe0>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <CONFIG_LOG_STRDUP_MAX_STRING+0x3c>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295
     232:	d202      	bcs.n	23a <CONFIG_LOG_STRDUP_MAX_STRING+0x3a>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <CONFIG_IDLE_STACK_SIZE+0x88>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <CONFIG_LOG_STRDUP_MAX_STRING+0x5c>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xae>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <CONFIG_LOG_STRDUP_MAX_STRING+0xfc>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <CONFIG_LOG_STRDUP_MAX_STRING+0x6e>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xdc>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <CONFIG_LOG_STRDUP_MAX_STRING+0xcc>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295
     2be:	f080 808b 	bcs.w	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <CONFIG_LOG_STRDUP_MAX_STRING+0xf4>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ea:	d271      	bcs.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <CONFIG_IDLE_STACK_SIZE+0xae>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4e>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295
     342:	d247      	bcs.n	3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295
     36e:	d22d      	bcs.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc0>
     38c:	d016      	beq.n	3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     38e:	b15e      	cbz	r6, 3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <CONFIG_LOG_STRDUP_MAX_STRING+0xf4>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4e>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <CONFIG_LOG_STRDUP_MAX_STRING+0xcc>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <CONFIG_LOG_STRDUP_MAX_STRING+0x78>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <CONFIG_LOG_STRDUP_MAX_STRING+0x14>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <CONFIG_LOG_STRDUP_MAX_STRING+0x3c>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <main>:
/* scheduling priority used by each thread */
#define TASK_DEFAULT_PRIORITY 7


void main(void)
{
     3f4:	b508      	push	{r3, lr}
	printk("Hello World! %s\n", CONFIG_BOARD);
     3f6:	490a      	ldr	r1, [pc, #40]	; (420 <CONFIG_FLASH_SIZE+0x20>)
     3f8:	480a      	ldr	r0, [pc, #40]	; (424 <CONFIG_FLASH_SIZE+0x24>)
     3fa:	f004 fdd7 	bl	4fac <printk>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
     3fe:	490a      	ldr	r1, [pc, #40]	; (428 <CONFIG_FLASH_SIZE+0x28>)
     400:	4b0a      	ldr	r3, [pc, #40]	; (42c <CONFIG_FLASH_SIZE+0x2c>)
	LOG_INF("Test");
     402:	480b      	ldr	r0, [pc, #44]	; (430 <CONFIG_FLASH_SIZE+0x30>)
     404:	1ac9      	subs	r1, r1, r3
     406:	08c9      	lsrs	r1, r1, #3
     408:	0189      	lsls	r1, r1, #6
     40a:	f041 0103 	orr.w	r1, r1, #3
     40e:	f005 f81d 	bl	544c <log_0>
		parm0.val = timeout;
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     412:	f04f 31ff 	mov.w	r1, #4294967295
     416:	f04f 30ff 	mov.w	r0, #4294967295
     41a:	f004 f865 	bl	44e8 <z_impl_k_sleep>
	int ret = 0;
	while(1)
     41e:	e7f8      	b.n	412 <CONFIG_FLASH_SIZE+0x12>
     420:	00006934 	.word	0x00006934
     424:	00006947 	.word	0x00006947
     428:	000065b8 	.word	0x000065b8
     42c:	00006580 	.word	0x00006580
     430:	00006958 	.word	0x00006958

00000434 <uart_fw_init>:
fifo_gen_buffer_t tx_buf;
fifo_gen_buffer_t rx_buf;

uint8_t to_send;

int uart_fw_init( uart_irq_callback_user_data_t uart_cb) {
     434:	b570      	push	{r4, r5, r6, lr}
     436:	4606      	mov	r6, r0
	fifo_gen_init(&tx_buf);
     438:	481d      	ldr	r0, [pc, #116]	; (4b0 <uart_fw_init+0x7c>)
     43a:	4c1e      	ldr	r4, [pc, #120]	; (4b4 <uart_fw_init+0x80>)
     43c:	f004 fd7b 	bl	4f36 <fifo_gen_init>
	fifo_gen_init(&rx_buf);
     440:	481d      	ldr	r0, [pc, #116]	; (4b8 <uart_fw_init+0x84>)
     442:	f004 fd78 	bl	4f36 <fifo_gen_init>
     446:	4b1d      	ldr	r3, [pc, #116]	; (4bc <uart_fw_init+0x88>)

    LOG_INF("wlr init");
     448:	481d      	ldr	r0, [pc, #116]	; (4c0 <uart_fw_init+0x8c>)
     44a:	1ae4      	subs	r4, r4, r3
     44c:	08e4      	lsrs	r4, r4, #3
     44e:	01a4      	lsls	r4, r4, #6
     450:	f044 0103 	orr.w	r1, r4, #3
     454:	f004 fffa 	bl	544c <log_0>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     458:	481a      	ldr	r0, [pc, #104]	; (4c4 <uart_fw_init+0x90>)


    if (ENABLE_UART_FW_FLAG) {
        uint8_t err;
        //Enable UART
        uart_uart_fw = device_get_binding(WLR_UART_DEVICE_NAME);        
     45a:	4d1b      	ldr	r5, [pc, #108]	; (4c8 <uart_fw_init+0x94>)
     45c:	f003 fa34 	bl	38c8 <z_impl_device_get_binding>
     460:	6028      	str	r0, [r5, #0]
        if(uart_uart_fw == NULL)
     462:	b920      	cbnz	r0, 46e <uart_fw_init+0x3a>
        {
            LOG_ERR("Uart UART_FW not configured");
     464:	4819      	ldr	r0, [pc, #100]	; (4cc <uart_fw_init+0x98>)
     466:	f044 0101 	orr.w	r1, r4, #1
     46a:	f004 ffef 	bl	544c <log_0>


        //uart_irq_update(uart_uart_fw);
        //uart_rx_enable(uart_uart_fw, rx_buf.buffer, FIFO_GEN_MAX_SIZE, 1);
        
        uart_irq_callback_user_data_set(uart_uart_fw, uart_cb, NULL); 
     46e:	6828      	ldr	r0, [r5, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
     470:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
     472:	b123      	cbz	r3, 47e <uart_fw_init+0x4a>
     474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     476:	b113      	cbz	r3, 47e <uart_fw_init+0x4a>
		api->irq_callback_set(dev, cb, user_data);
     478:	2200      	movs	r2, #0
     47a:	4631      	mov	r1, r6
     47c:	4798      	blx	r3
        uart_irq_rx_enable(uart_uart_fw);
     47e:	6828      	ldr	r0, [r5, #0]
	if (api->irq_rx_enable) {
     480:	6883      	ldr	r3, [r0, #8]
     482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     484:	b103      	cbz	r3, 488 <uart_fw_init+0x54>
		api->irq_rx_enable(dev);
     486:	4798      	blx	r3
        err = uart_irq_tx_complete(uart_uart_fw);
     488:	6828      	ldr	r0, [r5, #0]
	if (api->irq_tx_complete) {
     48a:	6883      	ldr	r3, [r0, #8]
     48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     48e:	b94b      	cbnz	r3, 4a4 <uart_fw_init+0x70>
        if(err)
        {
            LOG_ERR("Error init 1");
     490:	480f      	ldr	r0, [pc, #60]	; (4d0 <uart_fw_init+0x9c>)
     492:	f044 0101 	orr.w	r1, r4, #1
     496:	f004 ffd9 	bl	544c <log_0>
        }
        uart_irq_tx_enable(uart_uart_fw);
     49a:	6828      	ldr	r0, [r5, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_TX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_enable(dev);
     49c:	f004 fd46 	bl	4f2c <z_impl_uart_irq_tx_enable>

    }
    else uart_fw_shutdown();
    return 0;
}
     4a0:	2000      	movs	r0, #0
     4a2:	bd70      	pop	{r4, r5, r6, pc}
		return api->irq_tx_complete(dev);
     4a4:	4798      	blx	r3
        if(err)
     4a6:	f010 0fff 	tst.w	r0, #255	; 0xff
     4aa:	d0f6      	beq.n	49a <uart_fw_init+0x66>
     4ac:	e7f0      	b.n	490 <uart_fw_init+0x5c>
     4ae:	bf00      	nop
     4b0:	20000d53 	.word	0x20000d53
     4b4:	00006598 	.word	0x00006598
     4b8:	20000b50 	.word	0x20000b50
     4bc:	00006580 	.word	0x00006580
     4c0:	00006972 	.word	0x00006972
     4c4:	0000697b 	.word	0x0000697b
     4c8:	20000438 	.word	0x20000438
     4cc:	00006982 	.word	0x00006982
     4d0:	0000699e 	.word	0x0000699e

000004d4 <WLR089U0_ISR>:

/*
 * INT handlers
 */

static void WLR089U0_ISR(const struct device *dev, void* data) {
     4d4:	b513      	push	{r0, r1, r4, lr}
     4d6:	4604      	mov	r4, r0
	if (api->irq_update) {
     4d8:	6883      	ldr	r3, [r0, #8]
     4da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     4dc:	b103      	cbz	r3, 4e0 <WLR089U0_ISR+0xc>
		return api->irq_update(dev);
     4de:	4798      	blx	r3
	if (api->irq_tx_ready) {
     4e0:	68a3      	ldr	r3, [r4, #8]
     4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     4e4:	b13b      	cbz	r3, 4f6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe>
		return api->irq_tx_ready(dev);
     4e6:	4620      	mov	r0, r4
     4e8:	4798      	blx	r3
	uart_irq_update(dev);
	//LOG_INF("ISR");

	if (uart_irq_tx_ready(dev)){    
     4ea:	b120      	cbz	r0, 4f6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe>
	if (api->irq_tx_complete) {
     4ec:	68a3      	ldr	r3, [r4, #8]
     4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     4f0:	b10b      	cbz	r3, 4f6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe>
		return api->irq_tx_complete(dev);
     4f2:	4620      	mov	r0, r4
     4f4:	4798      	blx	r3
	if (api->irq_rx_ready) {
     4f6:	68a3      	ldr	r3, [r4, #8]
     4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     4fa:	b17b      	cbz	r3, 51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>
		return api->irq_rx_ready(dev);
     4fc:	4620      	mov	r0, r4
     4fe:	4798      	blx	r3
        uart_irq_tx_complete(dev);
	}
	if (uart_irq_rx_ready(dev)){
     500:	b160      	cbz	r0, 51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>
	if (api->fifo_read) {
     502:	68a3      	ldr	r3, [r4, #8]
     504:	699b      	ldr	r3, [r3, #24]
     506:	b123      	cbz	r3, 512 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a>
		return api->fifo_read(dev, rx_data, size);
     508:	2201      	movs	r2, #1
     50a:	f10d 0107 	add.w	r1, sp, #7
     50e:	4620      	mov	r0, r4
     510:	4798      	blx	r3
       // LOG_INF("ISR RX Ready");
       
			uint8_t receive_char;
            uart_fifo_read(dev, &receive_char, 1);
			printk("%c", receive_char);      //Forward character to console
     512:	f89d 1007 	ldrb.w	r1, [sp, #7]
     516:	4802      	ldr	r0, [pc, #8]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     518:	f004 fd48 	bl	4fac <printk>
	 }
}	
     51c:	b002      	add	sp, #8
     51e:	bd10      	pop	{r4, pc}
     520:	000069c2 	.word	0x000069c2

00000524 <uart_fw_task>:


void uart_fw_task(void)
{
     524:	b508      	push	{r3, lr}
     526:	490a      	ldr	r1, [pc, #40]	; (550 <uart_fw_task+0x2c>)
     528:	4b0a      	ldr	r3, [pc, #40]	; (554 <uart_fw_task+0x30>)
	//k_sleep(K_SECONDS(1));
	LOG_INF("Starting Logger forwarding");
     52a:	480b      	ldr	r0, [pc, #44]	; (558 <uart_fw_task+0x34>)
     52c:	1ac9      	subs	r1, r1, r3
     52e:	08c9      	lsrs	r1, r1, #3
     530:	0189      	lsls	r1, r1, #6
     532:	f041 0103 	orr.w	r1, r1, #3
     536:	f004 ff89 	bl	544c <log_0>
	uart_fw_init(WLR089U0_ISR);
     53a:	4808      	ldr	r0, [pc, #32]	; (55c <uart_fw_task+0x38>)
     53c:	f7ff ff7a 	bl	434 <uart_fw_init>
     540:	f04f 31ff 	mov.w	r1, #4294967295
     544:	f04f 30ff 	mov.w	r0, #4294967295
     548:	f003 ffce 	bl	44e8 <z_impl_k_sleep>

	while(1)
     54c:	e7f8      	b.n	540 <uart_fw_task+0x1c>
     54e:	bf00      	nop
     550:	00006580 	.word	0x00006580
     554:	00006580 	.word	0x00006580
     558:	000069c5 	.word	0x000069c5
     55c:	000004d5 	.word	0x000004d5

00000560 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     560:	680b      	ldr	r3, [r1, #0]
     562:	3301      	adds	r3, #1
     564:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     566:	4b01      	ldr	r3, [pc, #4]	; (56c <char_out+0xc>)
     568:	681b      	ldr	r3, [r3, #0]
     56a:	4718      	bx	r3
     56c:	20000000 	.word	0x20000000

00000570 <__printk_hook_install>:
	_char_out = fn;
     570:	4b01      	ldr	r3, [pc, #4]	; (578 <__printk_hook_install+0x8>)
     572:	6018      	str	r0, [r3, #0]
}
     574:	4770      	bx	lr
     576:	bf00      	nop
     578:	20000000 	.word	0x20000000

0000057c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     57c:	b507      	push	{r0, r1, r2, lr}
     57e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     580:	2100      	movs	r1, #0
{
     582:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     584:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     586:	4803      	ldr	r0, [pc, #12]	; (594 <vprintk+0x18>)
     588:	a901      	add	r1, sp, #4
     58a:	f000 f8ff 	bl	78c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     58e:	b003      	add	sp, #12
     590:	f85d fb04 	ldr.w	pc, [sp], #4
     594:	00000561 	.word	0x00000561

00000598 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     598:	b530      	push	{r4, r5, lr}
     59a:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
     59c:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
     5a0:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     5a2:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
     5a4:	a901      	add	r1, sp, #4
     5a6:	4805      	ldr	r0, [pc, #20]	; (5bc <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
     5a8:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
     5aa:	f000 f8ef 	bl	78c <cbvprintf>

	if (ctx.count < ctx.max) {
     5ae:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
     5b2:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     5b4:	bfb8      	it	lt
     5b6:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     5b8:	b005      	add	sp, #20
     5ba:	bd30      	pop	{r4, r5, pc}
     5bc:	00004f87 	.word	0x00004f87

000005c0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     5c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     5c4:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     5c8:	f019 0808 	ands.w	r8, r9, #8
{
     5cc:	4604      	mov	r4, r0
     5ce:	4693      	mov	fp, r2
	if (processing) {
     5d0:	d00d      	beq.n	5ee <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     5d2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     5d4:	bf0c      	ite	eq
     5d6:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     5da:	f049 0920 	orrne.w	r9, r9, #32
     5de:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     5e2:	f38b 8811 	msr	BASEPRI, fp
     5e6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     5ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     5ee:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     5f2:	2902      	cmp	r1, #2
     5f4:	d107      	bne.n	606 <process_event+0x46>
			evt = process_recheck(mgr);
     5f6:	4620      	mov	r0, r4
     5f8:	f004 fcf2 	bl	4fe0 <process_recheck>
		if (evt == EVT_NOP) {
     5fc:	2800      	cmp	r0, #0
     5fe:	d0f0      	beq.n	5e2 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     600:	2801      	cmp	r0, #1
     602:	8b23      	ldrh	r3, [r4, #24]
     604:	d150      	bne.n	6a8 <process_event+0xe8>
			res = mgr->last_res;
     606:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     608:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     60a:	2f00      	cmp	r7, #0
     60c:	da15      	bge.n	63a <process_event+0x7a>
		*clients = mgr->clients;
     60e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     610:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     614:	e9c4 8800 	strd	r8, r8, [r4]
     618:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     61c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     61e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     620:	8b21      	ldrh	r1, [r4, #24]
     622:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     626:	45ca      	cmp	sl, r9
     628:	d002      	beq.n	630 <process_event+0x70>
		if (do_monitors
     62a:	68a3      	ldr	r3, [r4, #8]
     62c:	2b00      	cmp	r3, #0
     62e:	d15c      	bne.n	6ea <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
     630:	b90d      	cbnz	r5, 636 <process_event+0x76>
		    || (transit != NULL)) {
     632:	2e00      	cmp	r6, #0
     634:	d074      	beq.n	720 <process_event+0x160>
     636:	2300      	movs	r3, #0
     638:	e058      	b.n	6ec <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     63a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     63e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     640:	2a01      	cmp	r2, #1
     642:	d820      	bhi.n	686 <process_event+0xc6>
		*clients = mgr->clients;
     644:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     648:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     64a:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
     64c:	b289      	uxth	r1, r1
	list->tail = NULL;
     64e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     652:	d10c      	bne.n	66e <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     654:	2d00      	cmp	r5, #0
     656:	462b      	mov	r3, r5
     658:	bf38      	it	cc
     65a:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     65c:	b12b      	cbz	r3, 66a <process_event+0xaa>
				mgr->refs += 1U;
     65e:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     660:	681b      	ldr	r3, [r3, #0]
     662:	3201      	adds	r2, #1
     664:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     666:	2b00      	cmp	r3, #0
     668:	d1f8      	bne.n	65c <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     66a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     66e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     670:	4620      	mov	r0, r4
     672:	f004 fcb5 	bl	4fe0 <process_recheck>
     676:	4606      	mov	r6, r0
     678:	2800      	cmp	r0, #0
     67a:	d0d1      	beq.n	620 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     67c:	8b23      	ldrh	r3, [r4, #24]
     67e:	f043 0320 	orr.w	r3, r3, #32
     682:	8323      	strh	r3, [r4, #24]
     684:	e7cb      	b.n	61e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     686:	2b04      	cmp	r3, #4
     688:	d10c      	bne.n	6a4 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     68a:	f021 0107 	bic.w	r1, r1, #7
     68e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     690:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     692:	4620      	mov	r0, r4
     694:	f004 fca4 	bl	4fe0 <process_recheck>
     698:	4605      	mov	r5, r0
     69a:	2800      	cmp	r0, #0
     69c:	d0bf      	beq.n	61e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     69e:	f041 0120 	orr.w	r1, r1, #32
     6a2:	8321      	strh	r1, [r4, #24]
     6a4:	2500      	movs	r5, #0
     6a6:	e7ba      	b.n	61e <process_event+0x5e>
		} else if (evt == EVT_START) {
     6a8:	2803      	cmp	r0, #3
     6aa:	d109      	bne.n	6c0 <process_event+0x100>
			transit = mgr->transitions->start;
     6ac:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6ae:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     6b2:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6b4:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     6b8:	8323      	strh	r3, [r4, #24]
}
     6ba:	2500      	movs	r5, #0
		res = 0;
     6bc:	462f      	mov	r7, r5
     6be:	e7af      	b.n	620 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     6c0:	2804      	cmp	r0, #4
     6c2:	d106      	bne.n	6d2 <process_event+0x112>
			transit = mgr->transitions->stop;
     6c4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6c6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     6ca:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6cc:	f043 0304 	orr.w	r3, r3, #4
     6d0:	e7f2      	b.n	6b8 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
     6d2:	2805      	cmp	r0, #5
     6d4:	d106      	bne.n	6e4 <process_event+0x124>
			transit = mgr->transitions->reset;
     6d6:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6d8:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     6dc:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6de:	f043 0305 	orr.w	r3, r3, #5
     6e2:	e7e9      	b.n	6b8 <process_event+0xf8>
     6e4:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     6e6:	462e      	mov	r6, r5
     6e8:	e7e8      	b.n	6bc <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
     6ea:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     6ec:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     6f0:	8321      	strh	r1, [r4, #24]
     6f2:	f38b 8811 	msr	BASEPRI, fp
     6f6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     6fa:	bb03      	cbnz	r3, 73e <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
     6fc:	2d00      	cmp	r5, #0
     6fe:	d133      	bne.n	768 <process_event+0x1a8>
			if (transit != NULL) {
     700:	b116      	cbz	r6, 708 <process_event+0x148>
				transit(mgr, transition_complete);
     702:	4921      	ldr	r1, [pc, #132]	; (788 <process_event+0x1c8>)
     704:	4620      	mov	r0, r4
     706:	47b0      	blx	r6
	__asm__ volatile(
     708:	f04f 0320 	mov.w	r3, #32
     70c:	f3ef 8b11 	mrs	fp, BASEPRI
     710:	f383 8811 	msr	BASEPRI, r3
     714:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     718:	8b23      	ldrh	r3, [r4, #24]
     71a:	f023 0308 	bic.w	r3, r3, #8
     71e:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     720:	8b23      	ldrh	r3, [r4, #24]
     722:	06da      	lsls	r2, r3, #27
     724:	d528      	bpl.n	778 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     726:	f023 0310 	bic.w	r3, r3, #16
     72a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     72c:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     72e:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     732:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     736:	2900      	cmp	r1, #0
     738:	f47f af5b 	bne.w	5f2 <process_event+0x32>
out:
     73c:	e751      	b.n	5e2 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     73e:	68a1      	ldr	r1, [r4, #8]
     740:	2900      	cmp	r1, #0
     742:	d0db      	beq.n	6fc <process_event+0x13c>
	return node->next;
     744:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
     746:	f8d1 b004 	ldr.w	fp, [r1, #4]
     74a:	2b00      	cmp	r3, #0
     74c:	bf38      	it	cc
     74e:	2300      	movcc	r3, #0
     750:	4699      	mov	r9, r3
     752:	4652      	mov	r2, sl
     754:	463b      	mov	r3, r7
     756:	4620      	mov	r0, r4
     758:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     75a:	f1b9 0f00 	cmp.w	r9, #0
     75e:	d0cd      	beq.n	6fc <process_event+0x13c>
     760:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     764:	4649      	mov	r1, r9
     766:	e7ee      	b.n	746 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
     768:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     76a:	463b      	mov	r3, r7
     76c:	4652      	mov	r2, sl
     76e:	4620      	mov	r0, r4
     770:	682d      	ldr	r5, [r5, #0]
     772:	f004 fc51 	bl	5018 <notify_one>
     776:	e7c1      	b.n	6fc <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     778:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     77c:	bf1e      	ittt	ne
     77e:	f023 0320 	bicne.w	r3, r3, #32
     782:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     784:	2102      	movne	r1, #2
     786:	e7d2      	b.n	72e <process_event+0x16e>
     788:	00005045 	.word	0x00005045

0000078c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     790:	b091      	sub	sp, #68	; 0x44
     792:	468b      	mov	fp, r1
     794:	9002      	str	r0, [sp, #8]
     796:	4692      	mov	sl, r2
     798:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     79a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     79c:	f89a 0000 	ldrb.w	r0, [sl]
     7a0:	b908      	cbnz	r0, 7a6 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     7a2:	4628      	mov	r0, r5
     7a4:	e35e      	b.n	e64 <CONFIG_ISR_STACK_SIZE+0x664>
		if (*fp != '%') {
     7a6:	2825      	cmp	r0, #37	; 0x25
     7a8:	f10a 0701 	add.w	r7, sl, #1
     7ac:	d007      	beq.n	7be <cbvprintf+0x32>
			OUTC('%');
     7ae:	9b02      	ldr	r3, [sp, #8]
     7b0:	4659      	mov	r1, fp
     7b2:	4798      	blx	r3
     7b4:	2800      	cmp	r0, #0
     7b6:	f2c0 8355 	blt.w	e64 <CONFIG_ISR_STACK_SIZE+0x664>
     7ba:	3501      	adds	r5, #1
			break;
     7bc:	e210      	b.n	be0 <CONFIG_ISR_STACK_SIZE+0x3e0>
		} state = {
     7be:	2218      	movs	r2, #24
     7c0:	2100      	movs	r1, #0
     7c2:	a80a      	add	r0, sp, #40	; 0x28
     7c4:	f005 fa2c 	bl	5c20 <memset>
	if (*sp == '%') {
     7c8:	f89a 3001 	ldrb.w	r3, [sl, #1]
     7cc:	2b25      	cmp	r3, #37	; 0x25
     7ce:	d078      	beq.n	8c2 <CONFIG_ISR_STACK_SIZE+0xc2>
     7d0:	2200      	movs	r2, #0
     7d2:	4694      	mov	ip, r2
     7d4:	4616      	mov	r6, r2
     7d6:	4696      	mov	lr, r2
     7d8:	4610      	mov	r0, r2
     7da:	4639      	mov	r1, r7
		switch (*sp) {
     7dc:	f817 3b01 	ldrb.w	r3, [r7], #1
     7e0:	2b2b      	cmp	r3, #43	; 0x2b
     7e2:	f000 809d 	beq.w	920 <CONFIG_ISR_STACK_SIZE+0x120>
     7e6:	f200 8094 	bhi.w	912 <CONFIG_ISR_STACK_SIZE+0x112>
     7ea:	2b20      	cmp	r3, #32
     7ec:	f000 809b 	beq.w	926 <CONFIG_ISR_STACK_SIZE+0x126>
     7f0:	2b23      	cmp	r3, #35	; 0x23
     7f2:	f000 809a 	beq.w	92a <CONFIG_ISR_STACK_SIZE+0x12a>
     7f6:	b128      	cbz	r0, 804 <CONFIG_ISR_STACK_SIZE+0x4>
     7f8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     7fc:	f040 0004 	orr.w	r0, r0, #4
     800:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     804:	f1be 0f00 	cmp.w	lr, #0
     808:	d005      	beq.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
     80a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     80e:	f040 0008 	orr.w	r0, r0, #8
     812:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     816:	b12e      	cbz	r6, 824 <CONFIG_ISR_STACK_SIZE+0x24>
     818:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     81c:	f040 0010 	orr.w	r0, r0, #16
     820:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     824:	f1bc 0f00 	cmp.w	ip, #0
     828:	d005      	beq.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
     82a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     82e:	f040 0020 	orr.w	r0, r0, #32
     832:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     836:	b12a      	cbz	r2, 844 <CONFIG_ISR_STACK_SIZE+0x44>
     838:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     83c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     840:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     844:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     848:	f002 0044 	and.w	r0, r2, #68	; 0x44
     84c:	2844      	cmp	r0, #68	; 0x44
     84e:	d103      	bne.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
		conv->flag_zero = false;
     850:	f36f 1286 	bfc	r2, #6, #1
     854:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     858:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     85c:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     85e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     862:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     866:	d17b      	bne.n	960 <CONFIG_ISR_STACK_SIZE+0x160>
		conv->width_star = true;
     868:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     86c:	f042 0201 	orr.w	r2, r2, #1
     870:	1c4b      	adds	r3, r1, #1
     872:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     876:	781a      	ldrb	r2, [r3, #0]
     878:	2a2e      	cmp	r2, #46	; 0x2e
     87a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     87e:	bf0c      	ite	eq
     880:	2101      	moveq	r1, #1
     882:	2100      	movne	r1, #0
     884:	f361 0241 	bfi	r2, r1, #1, #1
     888:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     88c:	d174      	bne.n	978 <CONFIG_ISR_STACK_SIZE+0x178>
	if (*sp == '*') {
     88e:	785a      	ldrb	r2, [r3, #1]
     890:	2a2a      	cmp	r2, #42	; 0x2a
     892:	d06a      	beq.n	96a <CONFIG_ISR_STACK_SIZE+0x16a>
     894:	3301      	adds	r3, #1
	size_t val = 0;
     896:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     898:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     89a:	4618      	mov	r0, r3
     89c:	f810 2b01 	ldrb.w	r2, [r0], #1
     8a0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     8a4:	2f09      	cmp	r7, #9
     8a6:	f240 808e 	bls.w	9c6 <CONFIG_ISR_STACK_SIZE+0x1c6>
	conv->unsupported |= ((conv->prec_value < 0)
     8aa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     8ae:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     8b0:	f3c2 0040 	ubfx	r0, r2, #1, #1
     8b4:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     8b8:	f361 0241 	bfi	r2, r1, #1, #1
     8bc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     8c0:	e05a      	b.n	978 <CONFIG_ISR_STACK_SIZE+0x178>
		conv->specifier = *sp++;
     8c2:	f10a 0702 	add.w	r7, sl, #2
     8c6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     8ca:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     8ce:	07d9      	lsls	r1, r3, #31
     8d0:	f140 8149 	bpl.w	b66 <CONFIG_ISR_STACK_SIZE+0x366>
			width = va_arg(ap, int);
     8d4:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     8d8:	f1b9 0f00 	cmp.w	r9, #0
     8dc:	da07      	bge.n	8ee <CONFIG_ISR_STACK_SIZE+0xee>
				conv->flag_dash = true;
     8de:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     8e2:	f042 0204 	orr.w	r2, r2, #4
     8e6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     8ea:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     8ee:	075a      	lsls	r2, r3, #29
     8f0:	f140 8142 	bpl.w	b78 <CONFIG_ISR_STACK_SIZE+0x378>
			int arg = va_arg(ap, int);
     8f4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     8f8:	f1b8 0f00 	cmp.w	r8, #0
     8fc:	f280 8141 	bge.w	b82 <CONFIG_ISR_STACK_SIZE+0x382>
				conv->prec_present = false;
     900:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     904:	f36f 0341 	bfc	r3, #1, #1
     908:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     90c:	f04f 38ff 	mov.w	r8, #4294967295
     910:	e137      	b.n	b82 <CONFIG_ISR_STACK_SIZE+0x382>
		switch (*sp) {
     912:	2b2d      	cmp	r3, #45	; 0x2d
     914:	d00c      	beq.n	930 <CONFIG_ISR_STACK_SIZE+0x130>
     916:	2b30      	cmp	r3, #48	; 0x30
     918:	f47f af6d 	bne.w	7f6 <cbvprintf+0x6a>
			conv->flag_zero = true;
     91c:	2201      	movs	r2, #1
	} while (loop);
     91e:	e75c      	b.n	7da <cbvprintf+0x4e>
			conv->flag_plus = true;
     920:	f04f 0e01 	mov.w	lr, #1
     924:	e759      	b.n	7da <cbvprintf+0x4e>
			conv->flag_space = true;
     926:	2601      	movs	r6, #1
     928:	e757      	b.n	7da <cbvprintf+0x4e>
			conv->flag_hash = true;
     92a:	f04f 0c01 	mov.w	ip, #1
     92e:	e754      	b.n	7da <cbvprintf+0x4e>
		switch (*sp) {
     930:	2001      	movs	r0, #1
     932:	e752      	b.n	7da <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     934:	fb0c 0202 	mla	r2, ip, r2, r0
     938:	3a30      	subs	r2, #48	; 0x30
     93a:	4633      	mov	r3, r6
     93c:	461e      	mov	r6, r3
     93e:	f816 0b01 	ldrb.w	r0, [r6], #1
     942:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     946:	2f09      	cmp	r7, #9
     948:	d9f4      	bls.n	934 <CONFIG_ISR_STACK_SIZE+0x134>
	if (sp != wp) {
     94a:	4299      	cmp	r1, r3
     94c:	d093      	beq.n	876 <CONFIG_ISR_STACK_SIZE+0x76>
		conv->unsupported |= ((conv->width_value < 0)
     94e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     952:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     954:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     956:	f362 0141 	bfi	r1, r2, #1, #1
     95a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     95e:	e78a      	b.n	876 <CONFIG_ISR_STACK_SIZE+0x76>
     960:	460b      	mov	r3, r1
	size_t val = 0;
     962:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     964:	f04f 0c0a 	mov.w	ip, #10
     968:	e7e8      	b.n	93c <CONFIG_ISR_STACK_SIZE+0x13c>
		conv->prec_star = true;
     96a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     96e:	f042 0204 	orr.w	r2, r2, #4
     972:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     976:	3302      	adds	r3, #2
	switch (*sp) {
     978:	461f      	mov	r7, r3
     97a:	f817 2b01 	ldrb.w	r2, [r7], #1
     97e:	2a6c      	cmp	r2, #108	; 0x6c
     980:	d041      	beq.n	a06 <CONFIG_ISR_STACK_SIZE+0x206>
     982:	d825      	bhi.n	9d0 <CONFIG_ISR_STACK_SIZE+0x1d0>
     984:	2a68      	cmp	r2, #104	; 0x68
     986:	d02b      	beq.n	9e0 <CONFIG_ISR_STACK_SIZE+0x1e0>
     988:	2a6a      	cmp	r2, #106	; 0x6a
     98a:	d046      	beq.n	a1a <CONFIG_ISR_STACK_SIZE+0x21a>
     98c:	2a4c      	cmp	r2, #76	; 0x4c
     98e:	d04c      	beq.n	a2a <CONFIG_ISR_STACK_SIZE+0x22a>
     990:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     992:	f817 2b01 	ldrb.w	r2, [r7], #1
     996:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     99a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     99e:	2a78      	cmp	r2, #120	; 0x78
     9a0:	f200 80d9 	bhi.w	b56 <CONFIG_ISR_STACK_SIZE+0x356>
     9a4:	2a57      	cmp	r2, #87	; 0x57
     9a6:	d84d      	bhi.n	a44 <CONFIG_ISR_STACK_SIZE+0x244>
     9a8:	2a41      	cmp	r2, #65	; 0x41
     9aa:	d003      	beq.n	9b4 <CONFIG_ISR_STACK_SIZE+0x1b4>
     9ac:	3a45      	subs	r2, #69	; 0x45
     9ae:	2a02      	cmp	r2, #2
     9b0:	f200 80d1 	bhi.w	b56 <CONFIG_ISR_STACK_SIZE+0x356>
		conv->specifier_cat = SPECIFIER_FP;
     9b4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     9b8:	2204      	movs	r2, #4
     9ba:	f362 0302 	bfi	r3, r2, #0, #3
     9be:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     9c2:	2301      	movs	r3, #1
			break;
     9c4:	e09e      	b.n	b04 <CONFIG_ISR_STACK_SIZE+0x304>
		val = 10U * val + *sp++ - '0';
     9c6:	fb06 2101 	mla	r1, r6, r1, r2
     9ca:	3930      	subs	r1, #48	; 0x30
     9cc:	4603      	mov	r3, r0
     9ce:	e764      	b.n	89a <CONFIG_ISR_STACK_SIZE+0x9a>
	switch (*sp) {
     9d0:	2a74      	cmp	r2, #116	; 0x74
     9d2:	d026      	beq.n	a22 <CONFIG_ISR_STACK_SIZE+0x222>
     9d4:	2a7a      	cmp	r2, #122	; 0x7a
     9d6:	d1db      	bne.n	990 <CONFIG_ISR_STACK_SIZE+0x190>
		conv->length_mod = LENGTH_Z;
     9d8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     9dc:	2206      	movs	r2, #6
     9de:	e00d      	b.n	9fc <CONFIG_ISR_STACK_SIZE+0x1fc>
		if (*++sp == 'h') {
     9e0:	785a      	ldrb	r2, [r3, #1]
     9e2:	2a68      	cmp	r2, #104	; 0x68
     9e4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     9e8:	d106      	bne.n	9f8 <CONFIG_ISR_STACK_SIZE+0x1f8>
			conv->length_mod = LENGTH_HH;
     9ea:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     9ec:	f361 02c6 	bfi	r2, r1, #3, #4
     9f0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     9f4:	1c9f      	adds	r7, r3, #2
     9f6:	e7cc      	b.n	992 <CONFIG_ISR_STACK_SIZE+0x192>
			conv->length_mod = LENGTH_H;
     9f8:	4613      	mov	r3, r2
     9fa:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     9fc:	f362 03c6 	bfi	r3, r2, #3, #4
     a00:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     a04:	e7c5      	b.n	992 <CONFIG_ISR_STACK_SIZE+0x192>
		if (*++sp == 'l') {
     a06:	785a      	ldrb	r2, [r3, #1]
     a08:	2a6c      	cmp	r2, #108	; 0x6c
     a0a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     a0e:	d101      	bne.n	a14 <CONFIG_ISR_STACK_SIZE+0x214>
			conv->length_mod = LENGTH_LL;
     a10:	2104      	movs	r1, #4
     a12:	e7eb      	b.n	9ec <CONFIG_ISR_STACK_SIZE+0x1ec>
			conv->length_mod = LENGTH_L;
     a14:	4613      	mov	r3, r2
     a16:	2203      	movs	r2, #3
     a18:	e7f0      	b.n	9fc <CONFIG_ISR_STACK_SIZE+0x1fc>
		conv->length_mod = LENGTH_J;
     a1a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     a1e:	2205      	movs	r2, #5
     a20:	e7ec      	b.n	9fc <CONFIG_ISR_STACK_SIZE+0x1fc>
		conv->length_mod = LENGTH_T;
     a22:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     a26:	2207      	movs	r2, #7
     a28:	e7e8      	b.n	9fc <CONFIG_ISR_STACK_SIZE+0x1fc>
		conv->unsupported = true;
     a2a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     a2e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     a32:	f023 0302 	bic.w	r3, r3, #2
     a36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     a3a:	f043 0302 	orr.w	r3, r3, #2
     a3e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     a42:	e7a6      	b.n	992 <CONFIG_ISR_STACK_SIZE+0x192>
     a44:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     a48:	2920      	cmp	r1, #32
     a4a:	f200 8084 	bhi.w	b56 <CONFIG_ISR_STACK_SIZE+0x356>
     a4e:	a001      	add	r0, pc, #4	; (adr r0, a54 <CONFIG_ISR_STACK_SIZE+0x254>)
     a50:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     a54:	00000b19 	.word	0x00000b19
     a58:	00000b57 	.word	0x00000b57
     a5c:	00000b57 	.word	0x00000b57
     a60:	00000b57 	.word	0x00000b57
     a64:	00000b57 	.word	0x00000b57
     a68:	00000b57 	.word	0x00000b57
     a6c:	00000b57 	.word	0x00000b57
     a70:	00000b57 	.word	0x00000b57
     a74:	00000b57 	.word	0x00000b57
     a78:	000009b5 	.word	0x000009b5
     a7c:	00000b57 	.word	0x00000b57
     a80:	00000b19 	.word	0x00000b19
     a84:	00000ad9 	.word	0x00000ad9
     a88:	000009b5 	.word	0x000009b5
     a8c:	000009b5 	.word	0x000009b5
     a90:	000009b5 	.word	0x000009b5
     a94:	00000b57 	.word	0x00000b57
     a98:	00000ad9 	.word	0x00000ad9
     a9c:	00000b57 	.word	0x00000b57
     aa0:	00000b57 	.word	0x00000b57
     aa4:	00000b57 	.word	0x00000b57
     aa8:	00000b57 	.word	0x00000b57
     aac:	00000b21 	.word	0x00000b21
     ab0:	00000b19 	.word	0x00000b19
     ab4:	00000b3d 	.word	0x00000b3d
     ab8:	00000b57 	.word	0x00000b57
     abc:	00000b57 	.word	0x00000b57
     ac0:	00000b3d 	.word	0x00000b3d
     ac4:	00000b57 	.word	0x00000b57
     ac8:	00000b19 	.word	0x00000b19
     acc:	00000b57 	.word	0x00000b57
     ad0:	00000b57 	.word	0x00000b57
     ad4:	00000b19 	.word	0x00000b19
		conv->specifier_cat = SPECIFIER_SINT;
     ad8:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     adc:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     ade:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     ae2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     ae6:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     ae8:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     aec:	bf02      	ittt	eq
     aee:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     af2:	f041 0101 	orreq.w	r1, r1, #1
     af6:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     afa:	2a63      	cmp	r2, #99	; 0x63
     afc:	d131      	bne.n	b62 <CONFIG_ISR_STACK_SIZE+0x362>
			unsupported = (conv->length_mod != LENGTH_NONE);
     afe:	3b00      	subs	r3, #0
     b00:	bf18      	it	ne
     b02:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     b04:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     b08:	f3c2 0140 	ubfx	r1, r2, #1, #1
     b0c:	430b      	orrs	r3, r1
     b0e:	f363 0241 	bfi	r2, r3, #1, #1
     b12:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     b16:	e6d8      	b.n	8ca <CONFIG_ISR_STACK_SIZE+0xca>
		conv->specifier_cat = SPECIFIER_UINT;
     b18:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     b1c:	2002      	movs	r0, #2
     b1e:	e7de      	b.n	ade <CONFIG_ISR_STACK_SIZE+0x2de>
		conv->specifier_cat = SPECIFIER_PTR;
     b20:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     b24:	f003 0378 	and.w	r3, r3, #120	; 0x78
     b28:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     b2c:	2103      	movs	r1, #3
     b2e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     b32:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     b34:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     b38:	4143      	adcs	r3, r0
     b3a:	e7e3      	b.n	b04 <CONFIG_ISR_STACK_SIZE+0x304>
		conv->specifier_cat = SPECIFIER_PTR;
     b3c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     b40:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     b42:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     b46:	f361 0202 	bfi	r2, r1, #0, #3
     b4a:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     b4e:	bf14      	ite	ne
     b50:	2301      	movne	r3, #1
     b52:	2300      	moveq	r3, #0
     b54:	e7d6      	b.n	b04 <CONFIG_ISR_STACK_SIZE+0x304>
		conv->invalid = true;
     b56:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     b5a:	f043 0301 	orr.w	r3, r3, #1
     b5e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     b62:	2300      	movs	r3, #0
     b64:	e7ce      	b.n	b04 <CONFIG_ISR_STACK_SIZE+0x304>
		} else if (conv->width_present) {
     b66:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     b6a:	2a00      	cmp	r2, #0
			width = conv->width_value;
     b6c:	bfb4      	ite	lt
     b6e:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     b72:	f04f 39ff 	movge.w	r9, #4294967295
     b76:	e6ba      	b.n	8ee <CONFIG_ISR_STACK_SIZE+0xee>
		} else if (conv->prec_present) {
     b78:	079b      	lsls	r3, r3, #30
     b7a:	f57f aec7 	bpl.w	90c <CONFIG_ISR_STACK_SIZE+0x10c>
			precision = conv->prec_value;
     b7e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     b82:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     b86:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     b88:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     b8c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     b90:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     b94:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     b96:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     b9a:	d136      	bne.n	c0a <CONFIG_ISR_STACK_SIZE+0x40a>
			switch (length_mod) {
     b9c:	1ed3      	subs	r3, r2, #3
     b9e:	2b04      	cmp	r3, #4
     ba0:	d820      	bhi.n	be4 <CONFIG_ISR_STACK_SIZE+0x3e4>
     ba2:	e8df f003 	tbb	[pc, r3]
     ba6:	0703      	.short	0x0703
     ba8:	1f07      	.short	0x1f07
     baa:	1f          	.byte	0x1f
     bab:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     bac:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
     bb0:	17c1      	asrs	r1, r0, #31
     bb2:	e004      	b.n	bbe <CONFIG_ISR_STACK_SIZE+0x3be>
					(sint_value_type)va_arg(ap, intmax_t);
     bb4:	3407      	adds	r4, #7
     bb6:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     bba:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
     bbe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     bc2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     bc6:	f013 0603 	ands.w	r6, r3, #3
     bca:	d054      	beq.n	c76 <CONFIG_ISR_STACK_SIZE+0x476>
			OUTS(sp, fp);
     bcc:	9802      	ldr	r0, [sp, #8]
     bce:	463b      	mov	r3, r7
     bd0:	4652      	mov	r2, sl
     bd2:	4659      	mov	r1, fp
     bd4:	f004 fbe0 	bl	5398 <outs>
     bd8:	2800      	cmp	r0, #0
     bda:	f2c0 8143 	blt.w	e64 <CONFIG_ISR_STACK_SIZE+0x664>
     bde:	4405      	add	r5, r0
			continue;
     be0:	46ba      	mov	sl, r7
     be2:	e5db      	b.n	79c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     be4:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
     be8:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     bea:	ea4f 71e0 	mov.w	r1, r0, asr #31
     bee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     bf2:	d105      	bne.n	c00 <CONFIG_ISR_STACK_SIZE+0x400>
				value->uint = (unsigned char)value->uint;
     bf4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     bf8:	930a      	str	r3, [sp, #40]	; 0x28
     bfa:	2300      	movs	r3, #0
     bfc:	930b      	str	r3, [sp, #44]	; 0x2c
     bfe:	e7e0      	b.n	bc2 <CONFIG_ISR_STACK_SIZE+0x3c2>
			} else if (length_mod == LENGTH_H) {
     c00:	2a02      	cmp	r2, #2
     c02:	d1de      	bne.n	bc2 <CONFIG_ISR_STACK_SIZE+0x3c2>
				value->sint = (short)value->sint;
     c04:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
     c08:	e7d2      	b.n	bb0 <CONFIG_ISR_STACK_SIZE+0x3b0>
		} else if (specifier_cat == SPECIFIER_UINT) {
     c0a:	2b02      	cmp	r3, #2
     c0c:	d123      	bne.n	c56 <CONFIG_ISR_STACK_SIZE+0x456>
			switch (length_mod) {
     c0e:	1ed3      	subs	r3, r2, #3
     c10:	2b04      	cmp	r3, #4
     c12:	d813      	bhi.n	c3c <CONFIG_ISR_STACK_SIZE+0x43c>
     c14:	e8df f003 	tbb	[pc, r3]
     c18:	120a0a03 	.word	0x120a0a03
     c1c:	12          	.byte	0x12
     c1d:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     c1e:	6820      	ldr	r0, [r4, #0]
     c20:	900a      	str	r0, [sp, #40]	; 0x28
     c22:	2100      	movs	r1, #0
     c24:	1d23      	adds	r3, r4, #4
     c26:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     c28:	461c      	mov	r4, r3
     c2a:	e7ca      	b.n	bc2 <CONFIG_ISR_STACK_SIZE+0x3c2>
					(uint_value_type)va_arg(ap,
     c2c:	3407      	adds	r4, #7
     c2e:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
     c32:	e8f3 0102 	ldrd	r0, r1, [r3], #8
     c36:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
     c3a:	e7f5      	b.n	c28 <CONFIG_ISR_STACK_SIZE+0x428>
					(uint_value_type)va_arg(ap, size_t);
     c3c:	f854 3b04 	ldr.w	r3, [r4], #4
     c40:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     c42:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
     c44:	f04f 0300 	mov.w	r3, #0
     c48:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     c4a:	d0d3      	beq.n	bf4 <CONFIG_ISR_STACK_SIZE+0x3f4>
			} else if (length_mod == LENGTH_H) {
     c4c:	2a02      	cmp	r2, #2
     c4e:	d1b8      	bne.n	bc2 <CONFIG_ISR_STACK_SIZE+0x3c2>
				value->uint = (unsigned short)value->uint;
     c50:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     c54:	e7d0      	b.n	bf8 <CONFIG_ISR_STACK_SIZE+0x3f8>
		} else if (specifier_cat == SPECIFIER_FP) {
     c56:	2b04      	cmp	r3, #4
     c58:	d107      	bne.n	c6a <CONFIG_ISR_STACK_SIZE+0x46a>
			if (length_mod == LENGTH_UPPER_L) {
     c5a:	3407      	adds	r4, #7
     c5c:	f024 0407 	bic.w	r4, r4, #7
     c60:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
     c64:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
     c68:	e7ab      	b.n	bc2 <CONFIG_ISR_STACK_SIZE+0x3c2>
		} else if (specifier_cat == SPECIFIER_PTR) {
     c6a:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     c6c:	bf04      	itt	eq
     c6e:	f854 3b04 	ldreq.w	r3, [r4], #4
     c72:	930a      	streq	r3, [sp, #40]	; 0x28
     c74:	e7a5      	b.n	bc2 <CONFIG_ISR_STACK_SIZE+0x3c2>
		switch (conv->specifier) {
     c76:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     c7a:	2878      	cmp	r0, #120	; 0x78
     c7c:	d8b0      	bhi.n	be0 <CONFIG_ISR_STACK_SIZE+0x3e0>
     c7e:	2862      	cmp	r0, #98	; 0x62
     c80:	d822      	bhi.n	cc8 <CONFIG_ISR_STACK_SIZE+0x4c8>
     c82:	2825      	cmp	r0, #37	; 0x25
     c84:	f43f ad93 	beq.w	7ae <cbvprintf+0x22>
     c88:	2858      	cmp	r0, #88	; 0x58
     c8a:	d1a9      	bne.n	be0 <CONFIG_ISR_STACK_SIZE+0x3e0>
			bps = encode_uint(value->uint, conv, buf, bpe);
     c8c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     c90:	9300      	str	r3, [sp, #0]
     c92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     c96:	ab04      	add	r3, sp, #16
     c98:	aa0c      	add	r2, sp, #48	; 0x30
     c9a:	f004 fb32 	bl	5302 <encode_uint>
     c9e:	4682      	mov	sl, r0
			if (precision >= 0) {
     ca0:	f1b8 0f00 	cmp.w	r8, #0
     ca4:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     ca8:	db0c      	blt.n	cc4 <CONFIG_ISR_STACK_SIZE+0x4c4>
				conv->flag_zero = false;
     caa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     cae:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     cb2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     cb6:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     cb8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     cbc:	d902      	bls.n	cc4 <CONFIG_ISR_STACK_SIZE+0x4c4>
					conv->pad0_value = precision - (int)len;
     cbe:	eba8 0303 	sub.w	r3, r8, r3
     cc2:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     cc4:	4680      	mov	r8, r0
     cc6:	e03d      	b.n	d44 <CONFIG_ISR_STACK_SIZE+0x544>
     cc8:	3863      	subs	r0, #99	; 0x63
     cca:	2815      	cmp	r0, #21
     ccc:	d888      	bhi.n	be0 <CONFIG_ISR_STACK_SIZE+0x3e0>
     cce:	a101      	add	r1, pc, #4	; (adr r1, cd4 <CONFIG_ISR_STACK_SIZE+0x4d4>)
     cd0:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
     cd4:	00000d55 	.word	0x00000d55
     cd8:	00000db9 	.word	0x00000db9
     cdc:	00000be1 	.word	0x00000be1
     ce0:	00000be1 	.word	0x00000be1
     ce4:	00000be1 	.word	0x00000be1
     ce8:	00000be1 	.word	0x00000be1
     cec:	00000db9 	.word	0x00000db9
     cf0:	00000be1 	.word	0x00000be1
     cf4:	00000be1 	.word	0x00000be1
     cf8:	00000be1 	.word	0x00000be1
     cfc:	00000be1 	.word	0x00000be1
     d00:	00000e17 	.word	0x00000e17
     d04:	00000de5 	.word	0x00000de5
     d08:	00000de9 	.word	0x00000de9
     d0c:	00000be1 	.word	0x00000be1
     d10:	00000be1 	.word	0x00000be1
     d14:	00000d2d 	.word	0x00000d2d
     d18:	00000be1 	.word	0x00000be1
     d1c:	00000de5 	.word	0x00000de5
     d20:	00000be1 	.word	0x00000be1
     d24:	00000be1 	.word	0x00000be1
     d28:	00000de5 	.word	0x00000de5
			if (precision >= 0) {
     d2c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     d30:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     d34:	db0a      	blt.n	d4c <CONFIG_ISR_STACK_SIZE+0x54c>
				len = strnlen(bps, precision);
     d36:	4641      	mov	r1, r8
     d38:	4650      	mov	r0, sl
     d3a:	f004 ff31 	bl	5ba0 <strnlen>
			bpe = bps + len;
     d3e:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
     d42:	2600      	movs	r6, #0
		if (bps == NULL) {
     d44:	f1ba 0f00 	cmp.w	sl, #0
     d48:	d10c      	bne.n	d64 <CONFIG_ISR_STACK_SIZE+0x564>
     d4a:	e749      	b.n	be0 <CONFIG_ISR_STACK_SIZE+0x3e0>
				len = strlen(bps);
     d4c:	4650      	mov	r0, sl
     d4e:	f004 ff20 	bl	5b92 <strlen>
     d52:	e7f4      	b.n	d3e <CONFIG_ISR_STACK_SIZE+0x53e>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     d56:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
     d5a:	2600      	movs	r6, #0
			bpe = buf + 1;
     d5c:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
     d60:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
     d64:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     d68:	b106      	cbz	r6, d6c <CONFIG_ISR_STACK_SIZE+0x56c>
			nj_len += 1U;
     d6a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     d6c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     d70:	06d0      	lsls	r0, r2, #27
     d72:	d56b      	bpl.n	e4c <CONFIG_ISR_STACK_SIZE+0x64c>
			nj_len += 2U;
     d74:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     d76:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     d78:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     d7a:	bf48      	it	mi
     d7c:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     d7e:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     d80:	bf48      	it	mi
     d82:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     d84:	f1b9 0f00 	cmp.w	r9, #0
     d88:	dd79      	ble.n	e7e <CONFIG_ISR_STACK_SIZE+0x67e>
			if (!conv->flag_dash) {
     d8a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     d8e:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     d92:	f3c2 0380 	ubfx	r3, r2, #2, #1
     d96:	9303      	str	r3, [sp, #12]
     d98:	0753      	lsls	r3, r2, #29
     d9a:	d470      	bmi.n	e7e <CONFIG_ISR_STACK_SIZE+0x67e>
				if (conv->flag_zero) {
     d9c:	0650      	lsls	r0, r2, #25
     d9e:	d564      	bpl.n	e6a <CONFIG_ISR_STACK_SIZE+0x66a>
					if (sign != 0) {
     da0:	b146      	cbz	r6, db4 <CONFIG_ISR_STACK_SIZE+0x5b4>
						OUTC(sign);
     da2:	9b02      	ldr	r3, [sp, #8]
     da4:	4659      	mov	r1, fp
     da6:	4630      	mov	r0, r6
     da8:	4798      	blx	r3
     daa:	2800      	cmp	r0, #0
     dac:	db5a      	blt.n	e64 <CONFIG_ISR_STACK_SIZE+0x664>
						sign = 0;
     dae:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     db0:	3501      	adds	r5, #1
						sign = 0;
     db2:	461e      	mov	r6, r3
					pad = '0';
     db4:	2330      	movs	r3, #48	; 0x30
     db6:	e059      	b.n	e6c <CONFIG_ISR_STACK_SIZE+0x66c>
			if (conv->flag_plus) {
     db8:	071e      	lsls	r6, r3, #28
     dba:	d411      	bmi.n	de0 <CONFIG_ISR_STACK_SIZE+0x5e0>
				sign = ' ';
     dbc:	f013 0610 	ands.w	r6, r3, #16
     dc0:	bf18      	it	ne
     dc2:	2620      	movne	r6, #32
			if (value->sint < 0) {
     dc4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
     dc8:	2a00      	cmp	r2, #0
     dca:	f173 0100 	sbcs.w	r1, r3, #0
     dce:	f6bf af5d 	bge.w	c8c <CONFIG_ISR_STACK_SIZE+0x48c>
				value->uint = (uint_value_type)-value->sint;
     dd2:	4252      	negs	r2, r2
     dd4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     dd8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
     ddc:	262d      	movs	r6, #45	; 0x2d
     dde:	e755      	b.n	c8c <CONFIG_ISR_STACK_SIZE+0x48c>
				sign = '+';
     de0:	262b      	movs	r6, #43	; 0x2b
     de2:	e7ef      	b.n	dc4 <CONFIG_ISR_STACK_SIZE+0x5c4>
		switch (conv->specifier) {
     de4:	2600      	movs	r6, #0
     de6:	e751      	b.n	c8c <CONFIG_ISR_STACK_SIZE+0x48c>
			if (value->ptr != NULL) {
     de8:	980a      	ldr	r0, [sp, #40]	; 0x28
     dea:	b348      	cbz	r0, e40 <CONFIG_ISR_STACK_SIZE+0x640>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     dec:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     df0:	9300      	str	r3, [sp, #0]
     df2:	aa0c      	add	r2, sp, #48	; 0x30
     df4:	ab04      	add	r3, sp, #16
     df6:	2100      	movs	r1, #0
     df8:	f004 fa83 	bl	5302 <encode_uint>
				conv->altform_0c = true;
     dfc:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
     e00:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     e04:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     e08:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
     e0c:	4682      	mov	sl, r0
				conv->altform_0c = true;
     e0e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
     e12:	2600      	movs	r6, #0
				goto prec_int_pad0;
     e14:	e744      	b.n	ca0 <CONFIG_ISR_STACK_SIZE+0x4a0>
				store_count(conv, value->ptr, count);
     e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
     e18:	2a07      	cmp	r2, #7
     e1a:	f63f aee1 	bhi.w	be0 <CONFIG_ISR_STACK_SIZE+0x3e0>
     e1e:	e8df f002 	tbb	[pc, r2]
     e22:	040d      	.short	0x040d
     e24:	08080d06 	.word	0x08080d06
     e28:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
     e2a:	701d      	strb	r5, [r3, #0]
		break;
     e2c:	e6d8      	b.n	be0 <CONFIG_ISR_STACK_SIZE+0x3e0>
		*(short *)dp = (short)count;
     e2e:	801d      	strh	r5, [r3, #0]
		break;
     e30:	e6d6      	b.n	be0 <CONFIG_ISR_STACK_SIZE+0x3e0>
		*(intmax_t *)dp = (intmax_t)count;
     e32:	4628      	mov	r0, r5
     e34:	17e9      	asrs	r1, r5, #31
     e36:	e9c3 0100 	strd	r0, r1, [r3]
		break;
     e3a:	e6d1      	b.n	be0 <CONFIG_ISR_STACK_SIZE+0x3e0>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     e3c:	601d      	str	r5, [r3, #0]
		break;
     e3e:	e6cf      	b.n	be0 <CONFIG_ISR_STACK_SIZE+0x3e0>
			bpe = bps + 5;
     e40:	f8df 80c4 	ldr.w	r8, [pc, #196]	; f08 <CONFIG_ISR_STACK_SIZE+0x708>
     e44:	4606      	mov	r6, r0
			bps = "(nil)";
     e46:	f1a8 0a05 	sub.w	sl, r8, #5
     e4a:	e78b      	b.n	d64 <CONFIG_ISR_STACK_SIZE+0x564>
		} else if (conv->altform_0) {
     e4c:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     e4e:	bf48      	it	mi
     e50:	3301      	addmi	r3, #1
     e52:	e790      	b.n	d76 <CONFIG_ISR_STACK_SIZE+0x576>
					OUTC(pad);
     e54:	4618      	mov	r0, r3
     e56:	9303      	str	r3, [sp, #12]
     e58:	4659      	mov	r1, fp
     e5a:	9b02      	ldr	r3, [sp, #8]
     e5c:	4798      	blx	r3
     e5e:	2800      	cmp	r0, #0
     e60:	9b03      	ldr	r3, [sp, #12]
     e62:	da04      	bge.n	e6e <CONFIG_ISR_STACK_SIZE+0x66e>
#undef OUTS
#undef OUTC
}
     e64:	b011      	add	sp, #68	; 0x44
     e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     e6a:	2320      	movs	r3, #32
     e6c:	444d      	add	r5, r9
     e6e:	464a      	mov	r2, r9
				while (width-- > 0) {
     e70:	2a00      	cmp	r2, #0
     e72:	eba5 0109 	sub.w	r1, r5, r9
     e76:	f109 39ff 	add.w	r9, r9, #4294967295
     e7a:	dceb      	bgt.n	e54 <CONFIG_ISR_STACK_SIZE+0x654>
     e7c:	460d      	mov	r5, r1
		if (sign != 0) {
     e7e:	b136      	cbz	r6, e8e <CONFIG_ISR_STACK_SIZE+0x68e>
			OUTC(sign);
     e80:	9b02      	ldr	r3, [sp, #8]
     e82:	4659      	mov	r1, fp
     e84:	4630      	mov	r0, r6
     e86:	4798      	blx	r3
     e88:	2800      	cmp	r0, #0
     e8a:	dbeb      	blt.n	e64 <CONFIG_ISR_STACK_SIZE+0x664>
     e8c:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     e8e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     e92:	06d9      	lsls	r1, r3, #27
     e94:	d401      	bmi.n	e9a <CONFIG_ISR_STACK_SIZE+0x69a>
     e96:	071a      	lsls	r2, r3, #28
     e98:	d506      	bpl.n	ea8 <CONFIG_ISR_STACK_SIZE+0x6a8>
				OUTC('0');
     e9a:	9b02      	ldr	r3, [sp, #8]
     e9c:	4659      	mov	r1, fp
     e9e:	2030      	movs	r0, #48	; 0x30
     ea0:	4798      	blx	r3
     ea2:	2800      	cmp	r0, #0
     ea4:	dbde      	blt.n	e64 <CONFIG_ISR_STACK_SIZE+0x664>
     ea6:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     ea8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     eac:	06db      	lsls	r3, r3, #27
     eae:	d507      	bpl.n	ec0 <CONFIG_ISR_STACK_SIZE+0x6c0>
				OUTC(conv->specifier);
     eb0:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     eb4:	9b02      	ldr	r3, [sp, #8]
     eb6:	4659      	mov	r1, fp
     eb8:	4798      	blx	r3
     eba:	2800      	cmp	r0, #0
     ebc:	dbd2      	blt.n	e64 <CONFIG_ISR_STACK_SIZE+0x664>
     ebe:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     ec0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
     ec2:	442e      	add	r6, r5
     ec4:	1b73      	subs	r3, r6, r5
     ec6:	2b00      	cmp	r3, #0
     ec8:	dc16      	bgt.n	ef8 <CONFIG_ISR_STACK_SIZE+0x6f8>
			OUTS(bps, bpe);
     eca:	9802      	ldr	r0, [sp, #8]
     ecc:	4643      	mov	r3, r8
     ece:	4652      	mov	r2, sl
     ed0:	4659      	mov	r1, fp
     ed2:	f004 fa61 	bl	5398 <outs>
     ed6:	2800      	cmp	r0, #0
     ed8:	dbc4      	blt.n	e64 <CONFIG_ISR_STACK_SIZE+0x664>
     eda:	4405      	add	r5, r0
		while (width > 0) {
     edc:	44a9      	add	r9, r5
     ede:	eba9 0305 	sub.w	r3, r9, r5
     ee2:	2b00      	cmp	r3, #0
     ee4:	f77f ae7c 	ble.w	be0 <CONFIG_ISR_STACK_SIZE+0x3e0>
			OUTC(' ');
     ee8:	9b02      	ldr	r3, [sp, #8]
     eea:	4659      	mov	r1, fp
     eec:	2020      	movs	r0, #32
     eee:	4798      	blx	r3
     ef0:	2800      	cmp	r0, #0
     ef2:	dbb7      	blt.n	e64 <CONFIG_ISR_STACK_SIZE+0x664>
     ef4:	3501      	adds	r5, #1
			--width;
     ef6:	e7f2      	b.n	ede <CONFIG_ISR_STACK_SIZE+0x6de>
				OUTC('0');
     ef8:	9b02      	ldr	r3, [sp, #8]
     efa:	4659      	mov	r1, fp
     efc:	2030      	movs	r0, #48	; 0x30
     efe:	4798      	blx	r3
     f00:	2800      	cmp	r0, #0
     f02:	dbaf      	blt.n	e64 <CONFIG_ISR_STACK_SIZE+0x664>
     f04:	3501      	adds	r5, #1
     f06:	e7dd      	b.n	ec4 <CONFIG_ISR_STACK_SIZE+0x6c4>
     f08:	000069ef 	.word	0x000069ef

00000f0c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
     f0c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
     f0e:	4910      	ldr	r1, [pc, #64]	; (f50 <enable_logger+0x44>)
     f10:	4810      	ldr	r0, [pc, #64]	; (f54 <enable_logger+0x48>)
{
     f12:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
     f14:	2200      	movs	r2, #0
     f16:	f005 f9ff 	bl	6318 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     f1a:	4d0f      	ldr	r5, [pc, #60]	; (f58 <enable_logger+0x4c>)
     f1c:	490f      	ldr	r1, [pc, #60]	; (f5c <enable_logger+0x50>)
     f1e:	2200      	movs	r2, #0
     f20:	2300      	movs	r3, #0
     f22:	e9cd 2306 	strd	r2, r3, [sp, #24]
     f26:	2400      	movs	r4, #0
     f28:	230e      	movs	r3, #14
     f2a:	e9cd 3403 	strd	r3, r4, [sp, #12]
     f2e:	e9cd 4401 	strd	r4, r4, [sp, #4]
     f32:	4b0b      	ldr	r3, [pc, #44]	; (f60 <enable_logger+0x54>)
     f34:	9400      	str	r4, [sp, #0]
     f36:	f44f 7240 	mov.w	r2, #768	; 0x300
     f3a:	4628      	mov	r0, r5
     f3c:	f003 fb78 	bl	4630 <z_impl_k_thread_create>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread_id, *(uintptr_t *)&value, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread_id, value);
     f40:	4908      	ldr	r1, [pc, #32]	; (f64 <enable_logger+0x58>)
     f42:	4628      	mov	r0, r5
     f44:	f005 f99f 	bl	6286 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
     f48:	4620      	mov	r0, r4
     f4a:	b009      	add	sp, #36	; 0x24
     f4c:	bd30      	pop	{r4, r5, pc}
     f4e:	bf00      	nop
     f50:	00000f69 	.word	0x00000f69
     f54:	20000278 	.word	0x20000278
     f58:	200002b0 	.word	0x200002b0
     f5c:	200013c0 	.word	0x200013c0
     f60:	00001389 	.word	0x00001389
     f64:	000069f0 	.word	0x000069f0

00000f68 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     f68:	4801      	ldr	r0, [pc, #4]	; (f70 <log_process_thread_timer_expiry_fn+0x8>)
     f6a:	f003 bae5 	b.w	4538 <z_impl_k_sem_give>
     f6e:	bf00      	nop
     f70:	200001e4 	.word	0x200001e4

00000f74 <log_core_init>:
{
     f74:	b508      	push	{r3, lr}
		log_msg_pool_init();
     f76:	f000 fa69 	bl	144c <log_msg_pool_init>
		log_list_init(&list);
     f7a:	4809      	ldr	r0, [pc, #36]	; (fa0 <log_core_init+0x2c>)
     f7c:	f004 fa23 	bl	53c6 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
     f80:	2304      	movs	r3, #4
     f82:	f44f 7202 	mov.w	r2, #520	; 0x208
     f86:	4907      	ldr	r1, [pc, #28]	; (fa4 <log_core_init+0x30>)
     f88:	4807      	ldr	r0, [pc, #28]	; (fa8 <log_core_init+0x34>)
     f8a:	f005 f884 	bl	6096 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
     f8e:	4b07      	ldr	r3, [pc, #28]	; (fac <log_core_init+0x38>)
     f90:	4a07      	ldr	r2, [pc, #28]	; (fb0 <log_core_init+0x3c>)
     f92:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
     f94:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
     f98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
     f9c:	f000 bc9e 	b.w	18dc <log_output_timestamp_freq_set>
     fa0:	20000448 	.word	0x20000448
     fa4:	20002480 	.word	0x20002480
     fa8:	20000450 	.word	0x20000450
     fac:	20000004 	.word	0x20000004
     fb0:	00005405 	.word	0x00005405

00000fb4 <dropped_notify>:
{
     fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     fb6:	4b0f      	ldr	r3, [pc, #60]	; (ff4 <dropped_notify+0x40>)
     fb8:	f3bf 8f5b 	dmb	ish
     fbc:	2500      	movs	r5, #0
     fbe:	e853 7f00 	ldrex	r7, [r3]
     fc2:	e843 5200 	strex	r2, r5, [r3]
     fc6:	2a00      	cmp	r2, #0
     fc8:	d1f9      	bne.n	fbe <dropped_notify+0xa>
     fca:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
     fce:	4c0a      	ldr	r4, [pc, #40]	; (ff8 <dropped_notify+0x44>)
     fd0:	4e0a      	ldr	r6, [pc, #40]	; (ffc <dropped_notify+0x48>)
     fd2:	1b36      	subs	r6, r6, r4
     fd4:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
     fd6:	42b5      	cmp	r5, r6
     fd8:	db00      	blt.n	fdc <dropped_notify+0x28>
}
     fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
     fdc:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
     fde:	795b      	ldrb	r3, [r3, #5]
     fe0:	b12b      	cbz	r3, fee <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
     fe2:	6823      	ldr	r3, [r4, #0]
     fe4:	68db      	ldr	r3, [r3, #12]
     fe6:	b113      	cbz	r3, fee <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
     fe8:	4639      	mov	r1, r7
     fea:	4620      	mov	r0, r4
     fec:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
     fee:	3501      	adds	r5, #1
     ff0:	3410      	adds	r4, #16
     ff2:	e7f0      	b.n	fd6 <dropped_notify+0x22>
     ff4:	20000440 	.word	0x20000440
     ff8:	000065e8 	.word	0x000065e8
     ffc:	000065f8 	.word	0x000065f8

00001000 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1000:	4b06      	ldr	r3, [pc, #24]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
    1002:	f3bf 8f5b 	dmb	ish
    1006:	e853 2f00 	ldrex	r2, [r3]
    100a:	3201      	adds	r2, #1
    100c:	e843 2100 	strex	r1, r2, [r3]
    1010:	2900      	cmp	r1, #0
    1012:	d1f8      	bne.n	1006 <log_dropped+0x6>
    1014:	f3bf 8f5b 	dmb	ish
}
    1018:	4770      	bx	lr
    101a:	bf00      	nop
    101c:	20000440 	.word	0x20000440

00001020 <log_source_name_get>:
    1020:	4a04      	ldr	r2, [pc, #16]	; (1034 <log_source_name_get+0x14>)
    1022:	4b05      	ldr	r3, [pc, #20]	; (1038 <log_source_name_get+0x18>)
    1024:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    1026:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    102a:	bf34      	ite	cc
    102c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    1030:	2000      	movcs	r0, #0
}
    1032:	4770      	bx	lr
    1034:	00006580 	.word	0x00006580
    1038:	000065e8 	.word	0x000065e8

0000103c <log_backend_enable>:
	id += backend - log_backend_get(0);
    103c:	4b09      	ldr	r3, [pc, #36]	; (1064 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    103e:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    1040:	1ac3      	subs	r3, r0, r3
    1042:	111b      	asrs	r3, r3, #4
    1044:	3301      	adds	r3, #1
{
    1046:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    1048:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
    104a:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    104c:	4c06      	ldr	r4, [pc, #24]	; (1068 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    104e:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1050:	2201      	movs	r2, #1
    1052:	715a      	strb	r2, [r3, #5]
    1054:	7822      	ldrb	r2, [r4, #0]
    1056:	b912      	cbnz	r2, 105e <log_backend_enable+0x22>
    1058:	4804      	ldr	r0, [pc, #16]	; (106c <log_backend_enable+0x30>)
    105a:	f003 fa6d 	bl	4538 <z_impl_k_sem_give>
	backend_attached = true;
    105e:	2301      	movs	r3, #1
    1060:	7023      	strb	r3, [r4, #0]
}
    1062:	bd10      	pop	{r4, pc}
    1064:	000065e8 	.word	0x000065e8
    1068:	20000f56 	.word	0x20000f56
    106c:	200001e4 	.word	0x200001e4

00001070 <log_init>:
{
    1070:	b570      	push	{r4, r5, r6, lr}
    1072:	4b11      	ldr	r3, [pc, #68]	; (10b8 <log_init+0x48>)
    1074:	f3bf 8f5b 	dmb	ish
    1078:	e853 5f00 	ldrex	r5, [r3]
    107c:	1c6a      	adds	r2, r5, #1
    107e:	e843 2100 	strex	r1, r2, [r3]
    1082:	2900      	cmp	r1, #0
    1084:	d1f8      	bne.n	1078 <log_init+0x8>
    1086:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    108a:	b92d      	cbnz	r5, 1098 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    108c:	4c0b      	ldr	r4, [pc, #44]	; (10bc <log_init+0x4c>)
    108e:	4e0c      	ldr	r6, [pc, #48]	; (10c0 <log_init+0x50>)
    1090:	1b36      	subs	r6, r6, r4
    1092:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    1094:	42b5      	cmp	r5, r6
    1096:	db00      	blt.n	109a <log_init+0x2a>
}
    1098:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    109a:	7b23      	ldrb	r3, [r4, #12]
    109c:	b143      	cbz	r3, 10b0 <log_init+0x40>
			if (backend->api->init != NULL) {
    109e:	6823      	ldr	r3, [r4, #0]
    10a0:	695b      	ldr	r3, [r3, #20]
    10a2:	b103      	cbz	r3, 10a6 <log_init+0x36>
				backend->api->init();
    10a4:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    10a6:	2204      	movs	r2, #4
    10a8:	2100      	movs	r1, #0
    10aa:	4620      	mov	r0, r4
    10ac:	f7ff ffc6 	bl	103c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    10b0:	3501      	adds	r5, #1
    10b2:	3410      	adds	r4, #16
    10b4:	e7ee      	b.n	1094 <log_init+0x24>
    10b6:	bf00      	nop
    10b8:	20000444 	.word	0x20000444
    10bc:	000065e8 	.word	0x000065e8
    10c0:	000065f8 	.word	0x000065f8

000010c4 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    10c4:	4b17      	ldr	r3, [pc, #92]	; (1124 <log_strdup+0x60>)
    10c6:	4298      	cmp	r0, r3
{
    10c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    10ca:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    10cc:	d302      	bcc.n	10d4 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    10ce:	4b16      	ldr	r3, [pc, #88]	; (1128 <log_strdup+0x64>)
    10d0:	4298      	cmp	r0, r3
    10d2:	d321      	bcc.n	1118 <log_strdup+0x54>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    10d4:	4815      	ldr	r0, [pc, #84]	; (112c <log_strdup+0x68>)
    10d6:	2200      	movs	r2, #0
    10d8:	2300      	movs	r3, #0
    10da:	a901      	add	r1, sp, #4
    10dc:	f002 fd74 	bl	3bc8 <k_mem_slab_alloc>
	if (err != 0) {
    10e0:	4605      	mov	r5, r0
    10e2:	b9e0      	cbnz	r0, 111e <log_strdup+0x5a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    10e4:	2201      	movs	r2, #1
    10e6:	9b01      	ldr	r3, [sp, #4]
    10e8:	f3bf 8f5b 	dmb	ish
    10ec:	e853 1f00 	ldrex	r1, [r3]
    10f0:	e843 2000 	strex	r0, r2, [r3]
    10f4:	2800      	cmp	r0, #0
    10f6:	d1f9      	bne.n	10ec <log_strdup+0x28>
    10f8:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    10fc:	9801      	ldr	r0, [sp, #4]
    10fe:	4621      	mov	r1, r4
    1100:	f240 12ff 	movw	r2, #511	; 0x1ff
    1104:	3004      	adds	r0, #4
    1106:	f004 fd31 	bl	5b6c <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    110a:	9c01      	ldr	r4, [sp, #4]
    110c:	237e      	movs	r3, #126	; 0x7e
    110e:	f884 3203 	strb.w	r3, [r4, #515]	; 0x203
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    1112:	f884 5204 	strb.w	r5, [r4, #516]	; 0x204
	return dup->buf;
    1116:	3404      	adds	r4, #4
}
    1118:	4620      	mov	r0, r4
    111a:	b003      	add	sp, #12
    111c:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    111e:	4c04      	ldr	r4, [pc, #16]	; (1130 <log_strdup+0x6c>)
    1120:	e7fa      	b.n	1118 <log_strdup+0x54>
    1122:	bf00      	nop
    1124:	00006390 	.word	0x00006390
    1128:	000072c4 	.word	0x000072c4
    112c:	20000450 	.word	0x20000450
    1130:	000069f8 	.word	0x000069f8

00001134 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    1134:	b150      	cbz	r0, 114c <log_is_strdup+0x18>
    1136:	4b06      	ldr	r3, [pc, #24]	; (1150 <log_is_strdup+0x1c>)
    1138:	4298      	cmp	r0, r3
    113a:	d306      	bcc.n	114a <log_is_strdup+0x16>
    113c:	f503 6302 	add.w	r3, r3, #2080	; 0x820
    1140:	4298      	cmp	r0, r3
    1142:	bf2c      	ite	cs
    1144:	2000      	movcs	r0, #0
    1146:	2001      	movcc	r0, #1
    1148:	4770      	bx	lr
    114a:	2000      	movs	r0, #0
}
    114c:	4770      	bx	lr
    114e:	bf00      	nop
    1150:	20002480 	.word	0x20002480

00001154 <z_impl_log_process>:
{
    1154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    1158:	4b4c      	ldr	r3, [pc, #304]	; (128c <z_impl_log_process+0x138>)
    115a:	781b      	ldrb	r3, [r3, #0]
{
    115c:	b085      	sub	sp, #20
    115e:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    1160:	b903      	cbnz	r3, 1164 <z_impl_log_process+0x10>
    1162:	b360      	cbz	r0, 11be <z_impl_log_process+0x6a>
    1164:	f04f 0320 	mov.w	r3, #32
    1168:	f3ef 8611 	mrs	r6, BASEPRI
    116c:	f383 8811 	msr	BASEPRI, r3
    1170:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    1174:	4846      	ldr	r0, [pc, #280]	; (1290 <z_impl_log_process+0x13c>)
    1176:	f004 f936 	bl	53e6 <log_list_head_get>
    117a:	4605      	mov	r5, r0
	__asm__ volatile(
    117c:	f386 8811 	msr	BASEPRI, r6
    1180:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    1184:	b178      	cbz	r0, 11a6 <z_impl_log_process+0x52>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1186:	f3bf 8f5b 	dmb	ish
    118a:	4b42      	ldr	r3, [pc, #264]	; (1294 <z_impl_log_process+0x140>)
    118c:	e853 2f00 	ldrex	r2, [r3]
    1190:	3a01      	subs	r2, #1
    1192:	e843 2100 	strex	r1, r2, [r3]
    1196:	2900      	cmp	r1, #0
    1198:	d1f8      	bne.n	118c <z_impl_log_process+0x38>
    119a:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    119e:	b194      	cbz	r4, 11c6 <z_impl_log_process+0x72>
	log_msg_put(msg);
    11a0:	4628      	mov	r0, r5
    11a2:	f004 fa39 	bl	5618 <log_msg_put>
	if (!bypass && dropped_cnt) {
    11a6:	b924      	cbnz	r4, 11b2 <z_impl_log_process+0x5e>
    11a8:	4b3b      	ldr	r3, [pc, #236]	; (1298 <z_impl_log_process+0x144>)
    11aa:	681b      	ldr	r3, [r3, #0]
    11ac:	b10b      	cbz	r3, 11b2 <z_impl_log_process+0x5e>
		dropped_notify();
    11ae:	f7ff ff01 	bl	fb4 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    11b2:	4837      	ldr	r0, [pc, #220]	; (1290 <z_impl_log_process+0x13c>)
    11b4:	f004 f915 	bl	53e2 <log_list_head_peek>
    11b8:	1e04      	subs	r4, r0, #0
    11ba:	bf18      	it	ne
    11bc:	2401      	movne	r4, #1
}
    11be:	4620      	mov	r0, r4
    11c0:	b005      	add	sp, #20
    11c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    11c6:	4b35      	ldr	r3, [pc, #212]	; (129c <z_impl_log_process+0x148>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    11c8:	781b      	ldrb	r3, [r3, #0]
    11ca:	b9cb      	cbnz	r3, 1200 <z_impl_log_process+0xac>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    11cc:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    11ce:	07db      	lsls	r3, r3, #31
    11d0:	d416      	bmi.n	1200 <z_impl_log_process+0xac>
	msg_str = log_msg_str_get(msg);
    11d2:	f004 fa34 	bl	563e <log_msg_str_get>
    11d6:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    11d8:	4628      	mov	r0, r5
    11da:	f004 f9fb 	bl	55d4 <log_msg_nargs_get>
    11de:	4601      	mov	r1, r0
    11e0:	4640      	mov	r0, r8
    11e2:	f004 f913 	bl	540c <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    11e6:	4f2e      	ldr	r7, [pc, #184]	; (12a0 <z_impl_log_process+0x14c>)
    11e8:	4b2e      	ldr	r3, [pc, #184]	; (12a4 <z_impl_log_process+0x150>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    11ea:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 12c0 <z_impl_log_process+0x16c>
    11ee:	1bdb      	subs	r3, r3, r7
    11f0:	08db      	lsrs	r3, r3, #3
    11f2:	9303      	str	r3, [sp, #12]
    11f4:	4b2c      	ldr	r3, [pc, #176]	; (12a8 <z_impl_log_process+0x154>)
    11f6:	1bdb      	subs	r3, r3, r7
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    11f8:	4606      	mov	r6, r0
    11fa:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    11fe:	b936      	cbnz	r6, 120e <z_impl_log_process+0xba>
    1200:	4e2a      	ldr	r6, [pc, #168]	; (12ac <z_impl_log_process+0x158>)
    1202:	4f2b      	ldr	r7, [pc, #172]	; (12b0 <z_impl_log_process+0x15c>)
    1204:	1bbf      	subs	r7, r7, r6
    1206:	113f      	asrs	r7, r7, #4
    1208:	f04f 0800 	mov.w	r8, #0
    120c:	e03a      	b.n	1284 <z_impl_log_process+0x130>
		idx = 31 - __builtin_clz(mask);
    120e:	fab6 f186 	clz	r1, r6
    1212:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    1216:	4649      	mov	r1, r9
    1218:	4628      	mov	r0, r5
    121a:	f004 f9de 	bl	55da <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    121e:	4b25      	ldr	r3, [pc, #148]	; (12b4 <z_impl_log_process+0x160>)
    1220:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    1222:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    1224:	d302      	bcc.n	122c <z_impl_log_process+0xd8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    1226:	4b24      	ldr	r3, [pc, #144]	; (12b8 <z_impl_log_process+0x164>)
    1228:	4298      	cmp	r0, r3
    122a:	d31a      	bcc.n	1262 <z_impl_log_process+0x10e>
    122c:	4608      	mov	r0, r1
    122e:	f7ff ff81 	bl	1134 <log_is_strdup>
    1232:	4602      	mov	r2, r0
    1234:	b9a8      	cbnz	r0, 1262 <z_impl_log_process+0x10e>
    1236:	4b21      	ldr	r3, [pc, #132]	; (12bc <z_impl_log_process+0x168>)
    1238:	4299      	cmp	r1, r3
    123a:	d012      	beq.n	1262 <z_impl_log_process+0x10e>
	return msg->hdr.ids.source_id;
    123c:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    123e:	9903      	ldr	r1, [sp, #12]
    1240:	f3c3 1389 	ubfx	r3, r3, #6, #10
    1244:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    1246:	bf38      	it	cc
    1248:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    124c:	ea4f 138a 	mov.w	r3, sl, lsl #6
    1250:	f043 0301 	orr.w	r3, r3, #1
    1254:	f8ad 3000 	strh.w	r3, [sp]
    1258:	4649      	mov	r1, r9
    125a:	4643      	mov	r3, r8
    125c:	4658      	mov	r0, fp
    125e:	f004 f92f 	bl	54c0 <log_3>
		mask &= ~BIT(idx);
    1262:	2101      	movs	r1, #1
    1264:	fa01 f109 	lsl.w	r1, r1, r9
    1268:	ea26 0601 	bic.w	r6, r6, r1
    126c:	e7c7      	b.n	11fe <z_impl_log_process+0xaa>
	return backend->cb->active;
    126e:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    1270:	795b      	ldrb	r3, [r3, #5]
    1272:	b123      	cbz	r3, 127e <z_impl_log_process+0x12a>
	backend->api->put(backend, msg);
    1274:	6833      	ldr	r3, [r6, #0]
    1276:	4629      	mov	r1, r5
    1278:	681b      	ldr	r3, [r3, #0]
    127a:	4630      	mov	r0, r6
    127c:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    127e:	f108 0801 	add.w	r8, r8, #1
    1282:	3610      	adds	r6, #16
    1284:	45b8      	cmp	r8, r7
    1286:	dbf2      	blt.n	126e <z_impl_log_process+0x11a>
    1288:	e78a      	b.n	11a0 <z_impl_log_process+0x4c>
    128a:	bf00      	nop
    128c:	20000f56 	.word	0x20000f56
    1290:	20000448 	.word	0x20000448
    1294:	2000043c 	.word	0x2000043c
    1298:	20000440 	.word	0x20000440
    129c:	20000f57 	.word	0x20000f57
    12a0:	00006580 	.word	0x00006580
    12a4:	000065e8 	.word	0x000065e8
    12a8:	000065b0 	.word	0x000065b0
    12ac:	000065e8 	.word	0x000065e8
    12b0:	000065f8 	.word	0x000065f8
    12b4:	00006390 	.word	0x00006390
    12b8:	000072c4 	.word	0x000072c4
    12bc:	000069f8 	.word	0x000069f8
    12c0:	00006a12 	.word	0x00006a12

000012c4 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    12c4:	4b29      	ldr	r3, [pc, #164]	; (136c <msg_finalize+0xa8>)
{
    12c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    12c8:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    12ca:	8141      	strh	r1, [r0, #10]
{
    12cc:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    12ce:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    12d0:	4d27      	ldr	r5, [pc, #156]	; (1370 <msg_finalize+0xac>)
    12d2:	60e0      	str	r0, [r4, #12]
    12d4:	f3bf 8f5b 	dmb	ish
    12d8:	e855 3f00 	ldrex	r3, [r5]
    12dc:	3301      	adds	r3, #1
    12de:	e845 3200 	strex	r2, r3, [r5]
    12e2:	2a00      	cmp	r2, #0
    12e4:	d1f8      	bne.n	12d8 <msg_finalize+0x14>
    12e6:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    12ea:	f04f 0320 	mov.w	r3, #32
    12ee:	f3ef 8611 	mrs	r6, BASEPRI
    12f2:	f383 8811 	msr	BASEPRI, r3
    12f6:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    12fa:	481e      	ldr	r0, [pc, #120]	; (1374 <msg_finalize+0xb0>)
    12fc:	4621      	mov	r1, r4
    12fe:	f004 f866 	bl	53ce <log_list_add_tail>
	__asm__ volatile(
    1302:	f386 8811 	msr	BASEPRI, r6
    1306:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    130a:	4b1b      	ldr	r3, [pc, #108]	; (1378 <msg_finalize+0xb4>)
    130c:	781b      	ldrb	r3, [r3, #0]
    130e:	b183      	cbz	r3, 1332 <msg_finalize+0x6e>
	__asm__ volatile(
    1310:	f04f 0320 	mov.w	r3, #32
    1314:	f3ef 8411 	mrs	r4, BASEPRI
    1318:	f383 8811 	msr	BASEPRI, r3
    131c:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    1320:	2000      	movs	r0, #0
    1322:	f7ff ff17 	bl	1154 <z_impl_log_process>
	__asm__ volatile(
    1326:	f384 8811 	msr	BASEPRI, r4
    132a:	f3bf 8f6f 	isb	sy
}
    132e:	b002      	add	sp, #8
    1330:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    1332:	4a12      	ldr	r2, [pc, #72]	; (137c <msg_finalize+0xb8>)
    1334:	682b      	ldr	r3, [r5, #0]
    1336:	6812      	ldr	r2, [r2, #0]
    1338:	2a00      	cmp	r2, #0
    133a:	d0f8      	beq.n	132e <msg_finalize+0x6a>
    133c:	2b01      	cmp	r3, #1
    133e:	d10a      	bne.n	1356 <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    1340:	2200      	movs	r2, #0
    1342:	2300      	movs	r3, #0
    1344:	e9cd 2300 	strd	r2, r3, [sp]
    1348:	480d      	ldr	r0, [pc, #52]	; (1380 <msg_finalize+0xbc>)
    134a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    134e:	2300      	movs	r3, #0
    1350:	f003 fbbe 	bl	4ad0 <z_impl_k_timer_start>
    1354:	e7eb      	b.n	132e <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    1356:	2b0a      	cmp	r3, #10
    1358:	d1e9      	bne.n	132e <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    135a:	4809      	ldr	r0, [pc, #36]	; (1380 <msg_finalize+0xbc>)
    135c:	f004 ffe8 	bl	6330 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1360:	4808      	ldr	r0, [pc, #32]	; (1384 <msg_finalize+0xc0>)
}
    1362:	b002      	add	sp, #8
    1364:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1368:	f003 b8e6 	b.w	4538 <z_impl_k_sem_give>
    136c:	20000004 	.word	0x20000004
    1370:	2000043c 	.word	0x2000043c
    1374:	20000448 	.word	0x20000448
    1378:	20000f57 	.word	0x20000f57
    137c:	2000046c 	.word	0x2000046c
    1380:	20000278 	.word	0x20000278
    1384:	200001e4 	.word	0x200001e4

00001388 <log_process_thread_func>:
{
    1388:	b510      	push	{r4, lr}
	log_init();
    138a:	f7ff fe71 	bl	1070 <log_init>
	return z_impl_k_current_get();
    138e:	f003 f8cd 	bl	452c <z_impl_k_current_get>
	proc_tid = process_tid;
    1392:	4b0c      	ldr	r3, [pc, #48]	; (13c4 <log_process_thread_func+0x3c>)
    1394:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1396:	b130      	cbz	r0, 13a6 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    1398:	4b0b      	ldr	r3, [pc, #44]	; (13c8 <log_process_thread_func+0x40>)
	    process_tid &&
    139a:	681b      	ldr	r3, [r3, #0]
    139c:	2b09      	cmp	r3, #9
    139e:	dd02      	ble.n	13a6 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    13a0:	480a      	ldr	r0, [pc, #40]	; (13cc <log_process_thread_func+0x44>)
    13a2:	f003 f8c9 	bl	4538 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    13a6:	4c09      	ldr	r4, [pc, #36]	; (13cc <log_process_thread_func+0x44>)
    13a8:	2000      	movs	r0, #0
    13aa:	f7ff fed3 	bl	1154 <z_impl_log_process>
		if (log_process(false) == false) {
    13ae:	2800      	cmp	r0, #0
    13b0:	d1fa      	bne.n	13a8 <log_process_thread_func+0x20>
    13b2:	f04f 32ff 	mov.w	r2, #4294967295
    13b6:	f04f 33ff 	mov.w	r3, #4294967295
    13ba:	4620      	mov	r0, r4
    13bc:	f003 f8dc 	bl	4578 <z_impl_k_sem_take>
    13c0:	e7f2      	b.n	13a8 <log_process_thread_func+0x20>
    13c2:	bf00      	nop
    13c4:	2000046c 	.word	0x2000046c
    13c8:	2000043c 	.word	0x2000043c
    13cc:	200001e4 	.word	0x200001e4

000013d0 <z_impl_log_panic>:
{
    13d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    13d2:	4f0e      	ldr	r7, [pc, #56]	; (140c <z_impl_log_panic+0x3c>)
    13d4:	783d      	ldrb	r5, [r7, #0]
    13d6:	b975      	cbnz	r5, 13f6 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    13d8:	4c0d      	ldr	r4, [pc, #52]	; (1410 <z_impl_log_panic+0x40>)
    13da:	4e0e      	ldr	r6, [pc, #56]	; (1414 <z_impl_log_panic+0x44>)
	log_init();
    13dc:	f7ff fe48 	bl	1070 <log_init>
    13e0:	1b36      	subs	r6, r6, r4
    13e2:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    13e4:	42b5      	cmp	r5, r6
    13e6:	db07      	blt.n	13f8 <z_impl_log_panic+0x28>
    13e8:	2000      	movs	r0, #0
    13ea:	f7ff feb3 	bl	1154 <z_impl_log_process>
		while (log_process(false) == true) {
    13ee:	2800      	cmp	r0, #0
    13f0:	d1fa      	bne.n	13e8 <z_impl_log_panic+0x18>
	panic_mode = true;
    13f2:	2301      	movs	r3, #1
    13f4:	703b      	strb	r3, [r7, #0]
}
    13f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    13f8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    13fa:	795b      	ldrb	r3, [r3, #5]
    13fc:	b11b      	cbz	r3, 1406 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    13fe:	6823      	ldr	r3, [r4, #0]
    1400:	4620      	mov	r0, r4
    1402:	691b      	ldr	r3, [r3, #16]
    1404:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    1406:	3501      	adds	r5, #1
    1408:	3410      	adds	r4, #16
    140a:	e7eb      	b.n	13e4 <z_impl_log_panic+0x14>
    140c:	20000f57 	.word	0x20000f57
    1410:	000065e8 	.word	0x000065e8
    1414:	000065f8 	.word	0x000065f8

00001418 <log_free>:
{
    1418:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    141a:	3804      	subs	r0, #4
    141c:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    141e:	f3bf 8f5b 	dmb	ish
    1422:	e850 3f00 	ldrex	r3, [r0]
    1426:	1e5a      	subs	r2, r3, #1
    1428:	e840 2100 	strex	r1, r2, [r0]
    142c:	2900      	cmp	r1, #0
    142e:	d1f8      	bne.n	1422 <log_free+0xa>
    1430:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    1434:	2b01      	cmp	r3, #1
    1436:	d103      	bne.n	1440 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    1438:	4803      	ldr	r0, [pc, #12]	; (1448 <log_free+0x30>)
    143a:	a901      	add	r1, sp, #4
    143c:	f002 fbf6 	bl	3c2c <k_mem_slab_free>
}
    1440:	b003      	add	sp, #12
    1442:	f85d fb04 	ldr.w	pc, [sp], #4
    1446:	bf00      	nop
    1448:	20000450 	.word	0x20000450

0000144c <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    144c:	2320      	movs	r3, #32
    144e:	4902      	ldr	r1, [pc, #8]	; (1458 <log_msg_pool_init+0xc>)
    1450:	4802      	ldr	r0, [pc, #8]	; (145c <log_msg_pool_init+0x10>)
    1452:	461a      	mov	r2, r3
    1454:	f004 be1f 	b.w	6096 <k_mem_slab_init>
    1458:	20002ca0 	.word	0x20002ca0
    145c:	20000470 	.word	0x20000470

00001460 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    1460:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    1462:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    1464:	4d09      	ldr	r5, [pc, #36]	; (148c <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    1466:	9301      	str	r3, [sp, #4]
    1468:	2001      	movs	r0, #1
    146a:	f7ff fe73 	bl	1154 <z_impl_log_process>
    146e:	4604      	mov	r4, r0
			log_dropped();
    1470:	f7ff fdc6 	bl	1000 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    1474:	2200      	movs	r2, #0
    1476:	2300      	movs	r3, #0
    1478:	a901      	add	r1, sp, #4
    147a:	4628      	mov	r0, r5
    147c:	f002 fba4 	bl	3bc8 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    1480:	b108      	cbz	r0, 1486 <log_msg_no_space_handle+0x26>
    1482:	2c00      	cmp	r4, #0
    1484:	d1f0      	bne.n	1468 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    1486:	9801      	ldr	r0, [sp, #4]
    1488:	b003      	add	sp, #12
    148a:	bd30      	pop	{r4, r5, pc}
    148c:	20000470 	.word	0x20000470

00001490 <log_msg_chunk_alloc>:
{
    1490:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    1492:	2300      	movs	r3, #0
    1494:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    1496:	4807      	ldr	r0, [pc, #28]	; (14b4 <log_msg_chunk_alloc+0x24>)
    1498:	2200      	movs	r2, #0
    149a:	2300      	movs	r3, #0
    149c:	a901      	add	r1, sp, #4
    149e:	f002 fb93 	bl	3bc8 <k_mem_slab_alloc>
	if (err != 0) {
    14a2:	b110      	cbz	r0, 14aa <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    14a4:	f7ff ffdc 	bl	1460 <log_msg_no_space_handle>
    14a8:	9001      	str	r0, [sp, #4]
}
    14aa:	9801      	ldr	r0, [sp, #4]
    14ac:	b003      	add	sp, #12
    14ae:	f85d fb04 	ldr.w	pc, [sp], #4
    14b2:	bf00      	nop
    14b4:	20000470 	.word	0x20000470

000014b8 <msg_free>:
{
    14b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    14ba:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    14bc:	7a45      	ldrb	r5, [r0, #9]
{
    14be:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
    14c0:	092d      	lsrs	r5, r5, #4
{
    14c2:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    14c4:	07d8      	lsls	r0, r3, #31
    14c6:	d41c      	bmi.n	1502 <msg_free+0x4a>
    14c8:	b1dd      	cbz	r5, 1502 <msg_free+0x4a>
		uint32_t smask = 0;
    14ca:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    14cc:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    14ce:	9801      	ldr	r0, [sp, #4]
    14d0:	4631      	mov	r1, r6
    14d2:	f004 f882 	bl	55da <log_msg_arg_get>
    14d6:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    14d8:	f7ff fe2c 	bl	1134 <log_is_strdup>
    14dc:	b170      	cbz	r0, 14fc <msg_free+0x44>
				if (smask == 0) {
    14de:	b934      	cbnz	r4, 14ee <msg_free+0x36>
					smask = z_log_get_s_mask(
    14e0:	9b01      	ldr	r3, [sp, #4]
    14e2:	4629      	mov	r1, r5
    14e4:	6918      	ldr	r0, [r3, #16]
    14e6:	f003 ff91 	bl	540c <z_log_get_s_mask>
					if (smask == 0) {
    14ea:	4604      	mov	r4, r0
    14ec:	b148      	cbz	r0, 1502 <msg_free+0x4a>
				if (smask & BIT(i)) {
    14ee:	fa24 f306 	lsr.w	r3, r4, r6
    14f2:	07d9      	lsls	r1, r3, #31
    14f4:	d502      	bpl.n	14fc <msg_free+0x44>
					log_free(buf);
    14f6:	4638      	mov	r0, r7
    14f8:	f7ff ff8e 	bl	1418 <log_free>
		for (i = 0; i < nargs; i++) {
    14fc:	3601      	adds	r6, #1
    14fe:	42ae      	cmp	r6, r5
    1500:	d3e5      	bcc.n	14ce <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    1502:	9b01      	ldr	r3, [sp, #4]
    1504:	7a1a      	ldrb	r2, [r3, #8]
    1506:	0792      	lsls	r2, r2, #30
    1508:	d504      	bpl.n	1514 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    150a:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    150c:	4c08      	ldr	r4, [pc, #32]	; (1530 <msg_free+0x78>)
    150e:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    1510:	9b03      	ldr	r3, [sp, #12]
    1512:	b92b      	cbnz	r3, 1520 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    1514:	4806      	ldr	r0, [pc, #24]	; (1530 <msg_free+0x78>)
    1516:	a901      	add	r1, sp, #4
    1518:	f002 fb88 	bl	3c2c <k_mem_slab_free>
}
    151c:	b005      	add	sp, #20
    151e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    1520:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    1522:	a903      	add	r1, sp, #12
    1524:	4620      	mov	r0, r4
    1526:	f002 fb81 	bl	3c2c <k_mem_slab_free>
		cont = next;
    152a:	9503      	str	r5, [sp, #12]
    152c:	e7f0      	b.n	1510 <msg_free+0x58>
    152e:	bf00      	nop
    1530:	20000470 	.word	0x20000470

00001534 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    1534:	b40e      	push	{r1, r2, r3}
    1536:	b503      	push	{r0, r1, lr}
    1538:	ab03      	add	r3, sp, #12
    153a:	4601      	mov	r1, r0
    153c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    1540:	4804      	ldr	r0, [pc, #16]	; (1554 <print_formatted+0x20>)
	va_start(args, fmt);
    1542:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    1544:	f7ff f922 	bl	78c <cbvprintf>
	va_end(args);

	return length;
}
    1548:	b002      	add	sp, #8
    154a:	f85d eb04 	ldr.w	lr, [sp], #4
    154e:	b003      	add	sp, #12
    1550:	4770      	bx	lr
    1552:	bf00      	nop
    1554:	000059e7 	.word	0x000059e7

00001558 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    1558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    155c:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    155e:	f011 0402 	ands.w	r4, r1, #2
{
    1562:	4690      	mov	r8, r2
    1564:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    1568:	4606      	mov	r6, r0
    156a:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    156c:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1570:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    1574:	d007      	beq.n	1586 <prefix_print+0x2e>
	if (!format) {
    1576:	f011 0f44 	tst.w	r1, #68	; 0x44
    157a:	d137      	bne.n	15ec <prefix_print+0x94>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    157c:	4932      	ldr	r1, [pc, #200]	; (1648 <prefix_print+0xf0>)
    157e:	f7ff ffd9 	bl	1534 <print_formatted>
			length = print_formatted(log_output,
    1582:	4601      	mov	r1, r0
		length += timestamp_print(log_output, flags, timestamp);
    1584:	460c      	mov	r4, r1
	if (color) {
    1586:	f1b9 0f00 	cmp.w	r9, #0
    158a:	d00a      	beq.n	15a2 <prefix_print+0x4a>
		const char *log_color = start && (colors[level] != NULL) ?
    158c:	4b2f      	ldr	r3, [pc, #188]	; (164c <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
    158e:	4930      	ldr	r1, [pc, #192]	; (1650 <prefix_print+0xf8>)
		const char *log_color = start && (colors[level] != NULL) ?
    1590:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
    1594:	4b2f      	ldr	r3, [pc, #188]	; (1654 <prefix_print+0xfc>)
    1596:	4630      	mov	r0, r6
    1598:	2a00      	cmp	r2, #0
    159a:	bf08      	it	eq
    159c:	461a      	moveq	r2, r3
    159e:	f7ff ffc9 	bl	1534 <print_formatted>
	if (level_on) {
    15a2:	b13d      	cbz	r5, 15b4 <prefix_print+0x5c>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    15a4:	4b2c      	ldr	r3, [pc, #176]	; (1658 <prefix_print+0x100>)
    15a6:	492d      	ldr	r1, [pc, #180]	; (165c <prefix_print+0x104>)
    15a8:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    15ac:	4630      	mov	r0, r6
    15ae:	f7ff ffc1 	bl	1534 <print_formatted>
    15b2:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    15b4:	f1b8 0f00 	cmp.w	r8, #0
    15b8:	d043      	beq.n	1642 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    15ba:	2301      	movs	r3, #1
    15bc:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    15c0:	4b27      	ldr	r3, [pc, #156]	; (1660 <prefix_print+0x108>)
    15c2:	f017 0f10 	tst.w	r7, #16
    15c6:	4f27      	ldr	r7, [pc, #156]	; (1664 <prefix_print+0x10c>)
    15c8:	bf18      	it	ne
    15ca:	461f      	movne	r7, r3
    15cc:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    15d0:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    15d4:	f7ff fd24 	bl	1020 <log_source_name_get>
    15d8:	4639      	mov	r1, r7
    15da:	4602      	mov	r2, r0
    15dc:	4630      	mov	r0, r6
    15de:	f7ff ffa9 	bl	1534 <print_formatted>
    15e2:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
    15e4:	4420      	add	r0, r4
    15e6:	b005      	add	sp, #20
    15e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    15ec:	4b1e      	ldr	r3, [pc, #120]	; (1668 <prefix_print+0x110>)
    15ee:	6819      	ldr	r1, [r3, #0]
    15f0:	2900      	cmp	r1, #0
    15f2:	d0c7      	beq.n	1584 <prefix_print+0x2c>
		timestamp /= timestamp_div;
    15f4:	4b1d      	ldr	r3, [pc, #116]	; (166c <prefix_print+0x114>)
    15f6:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    15fa:	681b      	ldr	r3, [r3, #0]
    15fc:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    1600:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    1604:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    1608:	fbb4 f2fe 	udiv	r2, r4, lr
    160c:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    1610:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    1614:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    1618:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    161c:	fbb4 fbf1 	udiv	fp, r4, r1
    1620:	fb01 441b 	mls	r4, r1, fp, r4
    1624:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    1628:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    162c:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    1630:	e9cd b101 	strd	fp, r1, [sp, #4]
    1634:	fb0a e113 	mls	r1, sl, r3, lr
    1638:	9100      	str	r1, [sp, #0]
    163a:	490d      	ldr	r1, [pc, #52]	; (1670 <prefix_print+0x118>)
    163c:	f7ff ff7a 	bl	1534 <print_formatted>
    1640:	e79f      	b.n	1582 <prefix_print+0x2a>
	total += print_formatted(log_output,
    1642:	4f08      	ldr	r7, [pc, #32]	; (1664 <prefix_print+0x10c>)
    1644:	e7c2      	b.n	15cc <prefix_print+0x74>
    1646:	bf00      	nop
    1648:	00006a63 	.word	0x00006a63
    164c:	00006628 	.word	0x00006628
    1650:	00007020 	.word	0x00007020
    1654:	00006a55 	.word	0x00006a55
    1658:	0000663c 	.word	0x0000663c
    165c:	00006a88 	.word	0x00006a88
    1660:	00006a5f 	.word	0x00006a5f
    1664:	00006a5a 	.word	0x00006a5a
    1668:	2000048c 	.word	0x2000048c
    166c:	20000490 	.word	0x20000490
    1670:	00006a6c 	.word	0x00006a6c

00001674 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
    1674:	b538      	push	{r3, r4, r5, lr}
    1676:	460c      	mov	r4, r1
	if (color) {
    1678:	07e1      	lsls	r1, r4, #31
{
    167a:	4605      	mov	r5, r0
	if (color) {
    167c:	d503      	bpl.n	1686 <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
    167e:	4a08      	ldr	r2, [pc, #32]	; (16a0 <postfix_print+0x2c>)
    1680:	4908      	ldr	r1, [pc, #32]	; (16a4 <postfix_print+0x30>)
    1682:	f7ff ff57 	bl	1534 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1686:	06e2      	lsls	r2, r4, #27
    1688:	d408      	bmi.n	169c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    168a:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    168c:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    168e:	bf4c      	ite	mi
    1690:	4905      	ldrmi	r1, [pc, #20]	; (16a8 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    1692:	4906      	ldrpl	r1, [pc, #24]	; (16ac <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    1694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    1698:	f7ff bf4c 	b.w	1534 <print_formatted>
}
    169c:	bd38      	pop	{r3, r4, r5, pc}
    169e:	bf00      	nop
    16a0:	00006a55 	.word	0x00006a55
    16a4:	00007020 	.word	0x00007020
    16a8:	00006a8f 	.word	0x00006a8f
    16ac:	00006a8e 	.word	0x00006a8e

000016b0 <hexdump_line_print>:
{
    16b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    16b4:	461d      	mov	r5, r3
    16b6:	9b08      	ldr	r3, [sp, #32]
    16b8:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    16ba:	06da      	lsls	r2, r3, #27
{
    16bc:	4604      	mov	r4, r0
    16be:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    16c0:	d405      	bmi.n	16ce <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    16c2:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    16c4:	bf4c      	ite	mi
    16c6:	492a      	ldrmi	r1, [pc, #168]	; (1770 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    16c8:	492a      	ldrpl	r1, [pc, #168]	; (1774 <hexdump_line_print+0xc4>)
    16ca:	f7ff ff33 	bl	1534 <print_formatted>
		print_formatted(log_output, " ");
    16ce:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 177c <hexdump_line_print+0xcc>
{
    16d2:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    16d6:	45a8      	cmp	r8, r5
    16d8:	db2a      	blt.n	1730 <hexdump_line_print+0x80>
			print_formatted(log_output, "   ");
    16da:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 1780 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
    16de:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 1784 <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
    16e2:	f8df a098 	ldr.w	sl, [pc, #152]	; 177c <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    16e6:	2500      	movs	r5, #0
		if (i < length) {
    16e8:	42bd      	cmp	r5, r7
    16ea:	d22f      	bcs.n	174c <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
    16ec:	5d72      	ldrb	r2, [r6, r5]
    16ee:	4649      	mov	r1, r9
    16f0:	4620      	mov	r0, r4
    16f2:	f7ff ff1f 	bl	1534 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    16f6:	3501      	adds	r5, #1
    16f8:	2d10      	cmp	r5, #16
    16fa:	d120      	bne.n	173e <hexdump_line_print+0x8e>
	print_formatted(log_output, "|");
    16fc:	491e      	ldr	r1, [pc, #120]	; (1778 <hexdump_line_print+0xc8>)
			print_formatted(log_output, " ");
    16fe:	f8df 807c 	ldr.w	r8, [pc, #124]	; 177c <hexdump_line_print+0xcc>
			print_formatted(log_output, "%c",
    1702:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1788 <hexdump_line_print+0xd8>
	print_formatted(log_output, "|");
    1706:	4620      	mov	r0, r4
    1708:	f7ff ff14 	bl	1534 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    170c:	2500      	movs	r5, #0
		if (i < length) {
    170e:	42af      	cmp	r7, r5
    1710:	d928      	bls.n	1764 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    1712:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    1714:	f1a2 0320 	sub.w	r3, r2, #32
    1718:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(log_output, "%c",
    171a:	bf28      	it	cs
    171c:	222e      	movcs	r2, #46	; 0x2e
    171e:	4649      	mov	r1, r9
    1720:	4620      	mov	r0, r4
    1722:	f7ff ff07 	bl	1534 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1726:	3501      	adds	r5, #1
    1728:	2d10      	cmp	r5, #16
    172a:	d114      	bne.n	1756 <hexdump_line_print+0xa6>
}
    172c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    1730:	4649      	mov	r1, r9
    1732:	4620      	mov	r0, r4
    1734:	f7ff fefe 	bl	1534 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1738:	f108 0801 	add.w	r8, r8, #1
    173c:	e7cb      	b.n	16d6 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    173e:	076a      	lsls	r2, r5, #29
    1740:	d1d2      	bne.n	16e8 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    1742:	4651      	mov	r1, sl
    1744:	4620      	mov	r0, r4
    1746:	f7ff fef5 	bl	1534 <print_formatted>
    174a:	e7cd      	b.n	16e8 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    174c:	4641      	mov	r1, r8
    174e:	4620      	mov	r0, r4
    1750:	f7ff fef0 	bl	1534 <print_formatted>
    1754:	e7cf      	b.n	16f6 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    1756:	076b      	lsls	r3, r5, #29
    1758:	d1d9      	bne.n	170e <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    175a:	4641      	mov	r1, r8
    175c:	4620      	mov	r0, r4
    175e:	f7ff fee9 	bl	1534 <print_formatted>
    1762:	e7d4      	b.n	170e <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    1764:	4641      	mov	r1, r8
    1766:	4620      	mov	r0, r4
    1768:	f7ff fee4 	bl	1534 <print_formatted>
    176c:	e7db      	b.n	1726 <hexdump_line_print+0x76>
    176e:	bf00      	nop
    1770:	00006a8f 	.word	0x00006a8f
    1774:	00006a8e 	.word	0x00006a8e
    1778:	00006a9b 	.word	0x00006a9b
    177c:	00006a99 	.word	0x00006a99
    1780:	00006a97 	.word	0x00006a97
    1784:	00006a91 	.word	0x00006a91
    1788:	000069c2 	.word	0x000069c2

0000178c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    178c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    1790:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    1792:	f013 0807 	ands.w	r8, r3, #7
{
    1796:	4617      	mov	r7, r2
    1798:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    179a:	7a0a      	ldrb	r2, [r1, #8]
    179c:	4605      	mov	r5, r0
    179e:	460e      	mov	r6, r1
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    17a0:	d021      	beq.n	17e6 <log_output_msg_process+0x5a>
	return msg->hdr.ids.source_id;
    17a2:	8949      	ldrh	r1, [r1, #10]
    17a4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    17a8:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    17ac:	43d2      	mvns	r2, r2
    17ae:	e9cd 8300 	strd	r8, r3, [sp]
    17b2:	9102      	str	r1, [sp, #8]
    17b4:	68f3      	ldr	r3, [r6, #12]
    17b6:	f002 0201 	and.w	r2, r2, #1
    17ba:	4639      	mov	r1, r7
    17bc:	f7ff fecc 	bl	1558 <prefix_print>
    17c0:	4681      	mov	r9, r0
    17c2:	7a34      	ldrb	r4, [r6, #8]
    17c4:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    17c6:	f014 0401 	ands.w	r4, r4, #1
    17ca:	d00e      	beq.n	17ea <log_output_msg_process+0x5e>
		std_print(msg, log_output);
    17cc:	4629      	mov	r1, r5
    17ce:	4630      	mov	r0, r6
    17d0:	f003 ff9f 	bl	5712 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    17d4:	f1b8 0f00 	cmp.w	r8, #0
    17d8:	d02b      	beq.n	1832 <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
    17da:	4642      	mov	r2, r8
    17dc:	4639      	mov	r1, r7
    17de:	4628      	mov	r0, r5
    17e0:	f7ff ff48 	bl	1674 <postfix_print>
    17e4:	e025      	b.n	1832 <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    17e6:	46c1      	mov	r9, r8
    17e8:	e7eb      	b.n	17c2 <log_output_msg_process+0x36>
	} else if (raw_string) {
    17ea:	f1b8 0f00 	cmp.w	r8, #0
    17ee:	d126      	bne.n	183e <log_output_msg_process+0xb2>
	size_t offset = 0;
    17f0:	4627      	mov	r7, r4
		length = log_output->size;
    17f2:	68eb      	ldr	r3, [r5, #12]
    17f4:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    17f6:	aa06      	add	r2, sp, #24
    17f8:	463b      	mov	r3, r7
    17fa:	68a9      	ldr	r1, [r5, #8]
    17fc:	4630      	mov	r0, r6
    17fe:	f003 ff74 	bl	56ea <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    1802:	9a06      	ldr	r2, [sp, #24]
    1804:	686b      	ldr	r3, [r5, #4]
    1806:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    1808:	b13a      	cbz	r2, 181a <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
    180a:	68ab      	ldr	r3, [r5, #8]
    180c:	4413      	add	r3, r2
    180e:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    1812:	f1a4 030a 	sub.w	r3, r4, #10
    1816:	425c      	negs	r4, r3
    1818:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    181a:	4628      	mov	r0, r5
    181c:	f004 f8d6 	bl	59cc <log_output_flush>
		offset += length;
    1820:	9b06      	ldr	r3, [sp, #24]
    1822:	441f      	add	r7, r3
	} while (length > 0);
    1824:	2b00      	cmp	r3, #0
    1826:	d1e4      	bne.n	17f2 <log_output_msg_process+0x66>
	if (eol) {
    1828:	b11c      	cbz	r4, 1832 <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
    182a:	4914      	ldr	r1, [pc, #80]	; (187c <log_output_msg_process+0xf0>)
    182c:	4628      	mov	r0, r5
    182e:	f7ff fe81 	bl	1534 <print_formatted>
	}

	log_output_flush(log_output);
    1832:	4628      	mov	r0, r5
    1834:	f004 f8ca 	bl	59cc <log_output_flush>
}
    1838:	b00a      	add	sp, #40	; 0x28
    183a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    183e:	4630      	mov	r0, r6
    1840:	f003 fefd 	bl	563e <log_msg_str_get>
    1844:	490e      	ldr	r1, [pc, #56]	; (1880 <log_output_msg_process+0xf4>)
    1846:	4602      	mov	r2, r0
    1848:	4628      	mov	r0, r5
    184a:	f7ff fe73 	bl	1534 <print_formatted>
		length = sizeof(buf);
    184e:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    1852:	aa05      	add	r2, sp, #20
    1854:	4623      	mov	r3, r4
    1856:	a906      	add	r1, sp, #24
    1858:	4630      	mov	r0, r6
		length = sizeof(buf);
    185a:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    185e:	f003 ff44 	bl	56ea <log_msg_hexdump_data_get>
		if (length) {
    1862:	9a05      	ldr	r2, [sp, #20]
    1864:	2a00      	cmp	r2, #0
    1866:	d0b8      	beq.n	17da <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
    1868:	464b      	mov	r3, r9
    186a:	9700      	str	r7, [sp, #0]
    186c:	a906      	add	r1, sp, #24
    186e:	4628      	mov	r0, r5
    1870:	f7ff ff1e 	bl	16b0 <hexdump_line_print>
			offset += length;
    1874:	9b05      	ldr	r3, [sp, #20]
    1876:	441c      	add	r4, r3
		length = sizeof(buf);
    1878:	e7eb      	b.n	1852 <log_output_msg_process+0xc6>
    187a:	bf00      	nop
    187c:	00006a9d 	.word	0x00006a9d
    1880:	00007020 	.word	0x00007020

00001884 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, uint32_t cnt)
{
    1884:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1886:	f242 730f 	movw	r3, #9999	; 0x270f
    188a:	428b      	cmp	r3, r1
    188c:	bf28      	it	cs
    188e:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
    1890:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1892:	4a0f      	ldr	r2, [pc, #60]	; (18d0 <log_output_dropped_process+0x4c>)
{
    1894:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1896:	2105      	movs	r1, #5
    1898:	4668      	mov	r0, sp
    189a:	f003 fb94 	bl	4fc6 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    189e:	6863      	ldr	r3, [r4, #4]
    18a0:	490c      	ldr	r1, [pc, #48]	; (18d4 <log_output_dropped_process+0x50>)
    18a2:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    18a4:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    18a6:	220b      	movs	r2, #11
    18a8:	4628      	mov	r0, r5
    18aa:	f003 ff25 	bl	56f8 <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
    18ae:	6863      	ldr	r3, [r4, #4]
    18b0:	4632      	mov	r2, r6
    18b2:	4669      	mov	r1, sp
    18b4:	4628      	mov	r0, r5
    18b6:	685b      	ldr	r3, [r3, #4]
    18b8:	f003 ff1e 	bl	56f8 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    18bc:	6863      	ldr	r3, [r4, #4]
    18be:	4906      	ldr	r1, [pc, #24]	; (18d8 <log_output_dropped_process+0x54>)
    18c0:	685b      	ldr	r3, [r3, #4]
    18c2:	221b      	movs	r2, #27
    18c4:	4628      	mov	r0, r5
    18c6:	f003 ff17 	bl	56f8 <buffer_write>
		     log_output->control_block->ctx);
}
    18ca:	b002      	add	sp, #8
    18cc:	bd70      	pop	{r4, r5, r6, pc}
    18ce:	bf00      	nop
    18d0:	00007206 	.word	0x00007206
    18d4:	00006adb 	.word	0x00006adb
    18d8:	00006abf 	.word	0x00006abf

000018dc <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    18dc:	4a08      	ldr	r2, [pc, #32]	; (1900 <log_output_timestamp_freq_set+0x24>)
{
    18de:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    18e0:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    18e2:	4c08      	ldr	r4, [pc, #32]	; (1904 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    18e4:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    18e6:	2100      	movs	r1, #0
    18e8:	42a0      	cmp	r0, r4
    18ea:	d804      	bhi.n	18f6 <log_output_timestamp_freq_set+0x1a>
    18ec:	b101      	cbz	r1, 18f0 <log_output_timestamp_freq_set+0x14>
    18ee:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    18f0:	4b05      	ldr	r3, [pc, #20]	; (1908 <log_output_timestamp_freq_set+0x2c>)
    18f2:	6018      	str	r0, [r3, #0]
}
    18f4:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    18f6:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    18f8:	005b      	lsls	r3, r3, #1
    18fa:	2101      	movs	r1, #1
    18fc:	e7f4      	b.n	18e8 <log_output_timestamp_freq_set+0xc>
    18fe:	bf00      	nop
    1900:	20000490 	.word	0x20000490
    1904:	000f4240 	.word	0x000f4240
    1908:	2000048c 	.word	0x2000048c

0000190c <char_out>:
#include <sys/__assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
    190e:	4f07      	ldr	r7, [pc, #28]	; (192c <char_out+0x20>)
{
    1910:	460d      	mov	r5, r1
    1912:	4604      	mov	r4, r0
    1914:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
    1916:	42b4      	cmp	r4, r6
    1918:	d101      	bne.n	191e <char_out+0x12>
	}

	return length;
}
    191a:	4628      	mov	r0, r5
    191c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
    191e:	6838      	ldr	r0, [r7, #0]
    1920:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
    1924:	6883      	ldr	r3, [r0, #8]
    1926:	685b      	ldr	r3, [r3, #4]
    1928:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    192a:	e7f4      	b.n	1916 <char_out+0xa>
    192c:	200004a8 	.word	0x200004a8

00001930 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    1930:	4801      	ldr	r0, [pc, #4]	; (1938 <panic+0x8>)
    1932:	f004 b84b 	b.w	59cc <log_output_flush>
    1936:	bf00      	nop
    1938:	00006668 	.word	0x00006668

0000193c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    193c:	4801      	ldr	r0, [pc, #4]	; (1944 <dropped+0x8>)
    193e:	f7ff bfa1 	b.w	1884 <log_output_dropped_process>
    1942:	bf00      	nop
    1944:	00006668 	.word	0x00006668

00001948 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
    1948:	b508      	push	{r3, lr}
    194a:	4803      	ldr	r0, [pc, #12]	; (1958 <log_backend_uart_init+0x10>)
    194c:	f001 ffbc 	bl	38c8 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1950:	4b02      	ldr	r3, [pc, #8]	; (195c <log_backend_uart_init+0x14>)
    1952:	6018      	str	r0, [r3, #0]
	__ASSERT_NO_MSG((void *)uart_dev);
}
    1954:	bd08      	pop	{r3, pc}
    1956:	bf00      	nop
    1958:	00006ae7 	.word	0x00006ae7
    195c:	200004a8 	.word	0x200004a8

00001960 <put>:
{
    1960:	b510      	push	{r4, lr}
	log_msg_get(msg);
    1962:	4608      	mov	r0, r1
    1964:	460c      	mov	r4, r1
    1966:	f003 fe28 	bl	55ba <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    196a:	4805      	ldr	r0, [pc, #20]	; (1980 <put+0x20>)
    196c:	4621      	mov	r1, r4
    196e:	220f      	movs	r2, #15
    1970:	f7ff ff0c 	bl	178c <log_output_msg_process>
	log_msg_put(msg);
    1974:	4620      	mov	r0, r4
}
    1976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    197a:	f003 be4d 	b.w	5618 <log_msg_put>
    197e:	bf00      	nop
    1980:	00006668 	.word	0x00006668

00001984 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
    1984:	b508      	push	{r3, lr}
    1986:	4604      	mov	r4, r0
	__asm__ volatile(
    1988:	f04f 0220 	mov.w	r2, #32
    198c:	f3ef 8311 	mrs	r3, BASEPRI
    1990:	f382 8811 	msr	BASEPRI, r2
    1994:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    1998:	f004 f8d5 	bl	5b46 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    199c:	4620      	mov	r0, r4
    199e:	f001 f887 	bl	2ab0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    19a2:	4803      	ldr	r0, [pc, #12]	; (19b0 <sys_reboot+0x2c>)
    19a4:	f003 fb02 	bl	4fac <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    19a8:	f000 fc76 	bl	2298 <arch_cpu_idle>
    19ac:	e7fc      	b.n	19a8 <sys_reboot+0x24>
    19ae:	bf00      	nop
    19b0:	00006b05 	.word	0x00006b05

000019b4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    19b4:	b510      	push	{r4, lr}
    19b6:	4807      	ldr	r0, [pc, #28]	; (19d4 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    19b8:	4c07      	ldr	r4, [pc, #28]	; (19d8 <uart_console_init+0x24>)
    19ba:	f001 ff85 	bl	38c8 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    19be:	4b07      	ldr	r3, [pc, #28]	; (19dc <uart_console_init+0x28>)
    19c0:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    19c2:	4620      	mov	r0, r4
    19c4:	f001 f856 	bl	2a74 <__stdout_hook_install>
	__printk_hook_install(console_out);
    19c8:	4620      	mov	r0, r4
    19ca:	f7fe fdd1 	bl	570 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    19ce:	2000      	movs	r0, #0
    19d0:	bd10      	pop	{r4, pc}
    19d2:	bf00      	nop
    19d4:	00006ae7 	.word	0x00006ae7
    19d8:	000019e1 	.word	0x000019e1
    19dc:	200004ac 	.word	0x200004ac

000019e0 <console_out>:
	if ('\n' == c) {
    19e0:	280a      	cmp	r0, #10
{
    19e2:	b538      	push	{r3, r4, r5, lr}
    19e4:	4d07      	ldr	r5, [pc, #28]	; (1a04 <console_out+0x24>)
    19e6:	4604      	mov	r4, r0
	if ('\n' == c) {
    19e8:	d104      	bne.n	19f4 <console_out+0x14>
    19ea:	6828      	ldr	r0, [r5, #0]
    19ec:	6883      	ldr	r3, [r0, #8]
    19ee:	210d      	movs	r1, #13
    19f0:	685b      	ldr	r3, [r3, #4]
    19f2:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    19f4:	6828      	ldr	r0, [r5, #0]
    19f6:	6883      	ldr	r3, [r0, #8]
    19f8:	b2e1      	uxtb	r1, r4
    19fa:	685b      	ldr	r3, [r3, #4]
    19fc:	4798      	blx	r3
}
    19fe:	4620      	mov	r0, r4
    1a00:	bd38      	pop	{r3, r4, r5, pc}
    1a02:	bf00      	nop
    1a04:	200004ac 	.word	0x200004ac

00001a08 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1a08:	b570      	push	{r4, r5, r6, lr}
    1a0a:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    1a0c:	480d      	ldr	r0, [pc, #52]	; (1a44 <onoff_stop+0x3c>)
    1a0e:	1a23      	subs	r3, r4, r0
    1a10:	109a      	asrs	r2, r3, #2
    1a12:	4b0d      	ldr	r3, [pc, #52]	; (1a48 <onoff_stop+0x40>)
    1a14:	4353      	muls	r3, r2
    1a16:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    1a18:	250c      	movs	r5, #12
    1a1a:	435d      	muls	r5, r3
    1a1c:	f105 0340 	add.w	r3, r5, #64	; 0x40
{
    1a20:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    1a22:	4418      	add	r0, r3
    1a24:	2140      	movs	r1, #64	; 0x40
    1a26:	f004 f802 	bl	5a2e <set_off_state>
	if (err < 0) {
    1a2a:	1e01      	subs	r1, r0, #0
    1a2c:	db04      	blt.n	1a38 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    1a2e:	4b07      	ldr	r3, [pc, #28]	; (1a4c <onoff_stop+0x44>)
    1a30:	442b      	add	r3, r5
    1a32:	685b      	ldr	r3, [r3, #4]
    1a34:	4798      	blx	r3
	return 0;
    1a36:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    1a38:	4620      	mov	r0, r4
    1a3a:	4633      	mov	r3, r6
}
    1a3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1a40:	4718      	bx	r3
    1a42:	bf00      	nop
    1a44:	200004c0 	.word	0x200004c0
    1a48:	b6db6db7 	.word	0xb6db6db7
    1a4c:	0000668c 	.word	0x0000668c

00001a50 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1a54:	4c0f      	ldr	r4, [pc, #60]	; (1a94 <onoff_start+0x44>)
    1a56:	4d10      	ldr	r5, [pc, #64]	; (1a98 <onoff_start+0x48>)
    1a58:	1b03      	subs	r3, r0, r4
    1a5a:	109b      	asrs	r3, r3, #2
    1a5c:	435d      	muls	r5, r3
    1a5e:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    1a60:	250c      	movs	r5, #12
    1a62:	435d      	muls	r5, r3
{
    1a64:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    1a66:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    1a6a:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    1a6c:	4420      	add	r0, r4
    1a6e:	2140      	movs	r1, #64	; 0x40
    1a70:	f003 fff6 	bl	5a60 <set_starting_state>
	if (err < 0) {
    1a74:	1e01      	subs	r1, r0, #0
    1a76:	db08      	blt.n	1a8a <onoff_start+0x3a>
	subdata->cb = cb;
    1a78:	4b08      	ldr	r3, [pc, #32]	; (1a9c <onoff_start+0x4c>)
    1a7a:	442c      	add	r4, r5
	subdata->user_data = user_data;
    1a7c:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    1a80:	4b07      	ldr	r3, [pc, #28]	; (1aa0 <onoff_start+0x50>)
    1a82:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    1a84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    1a88:	4718      	bx	r3
		notify(mgr, err);
    1a8a:	4638      	mov	r0, r7
    1a8c:	4633      	mov	r3, r6
}
    1a8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    1a92:	4718      	bx	r3
    1a94:	200004c0 	.word	0x200004c0
    1a98:	b6db6db7 	.word	0xb6db6db7
    1a9c:	00005ac3 	.word	0x00005ac3
    1aa0:	0000668c 	.word	0x0000668c

00001aa4 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1aa4:	2200      	movs	r2, #0
{
    1aa6:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1aa8:	2101      	movs	r1, #1
{
    1aaa:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1aac:	4610      	mov	r0, r2
    1aae:	f000 fb85 	bl	21bc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    1ab2:	2000      	movs	r0, #0
    1ab4:	f000 fb64 	bl	2180 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1ab8:	480f      	ldr	r0, [pc, #60]	; (1af8 <clk_init+0x54>)
    1aba:	f001 fd7d 	bl	35b8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1abe:	4b0f      	ldr	r3, [pc, #60]	; (1afc <clk_init+0x58>)
    1ac0:	4298      	cmp	r0, r3
    1ac2:	d115      	bne.n	1af0 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1ac4:	f004 fadb 	bl	607e <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    1ac8:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1aca:	490d      	ldr	r1, [pc, #52]	; (1b00 <clk_init+0x5c>)
    1acc:	4630      	mov	r0, r6
    1ace:	f003 fad6 	bl	507e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1ad2:	2800      	cmp	r0, #0
    1ad4:	db0b      	blt.n	1aee <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1ad6:	2501      	movs	r5, #1
    1ad8:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    1ada:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1adc:	4908      	ldr	r1, [pc, #32]	; (1b00 <clk_init+0x5c>)
    1ade:	f104 001c 	add.w	r0, r4, #28
    1ae2:	f003 facc 	bl	507e <onoff_manager_init>
		if (err < 0) {
    1ae6:	2800      	cmp	r0, #0
    1ae8:	db01      	blt.n	1aee <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1aea:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    1aec:	2000      	movs	r0, #0
}
    1aee:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1af0:	f06f 0004 	mvn.w	r0, #4
    1af4:	e7fb      	b.n	1aee <clk_init+0x4a>
    1af6:	bf00      	nop
    1af8:	00001b39 	.word	0x00001b39
    1afc:	0bad0000 	.word	0x0bad0000
    1b00:	000066a4 	.word	0x000066a4

00001b04 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1b04:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1b06:	230c      	movs	r3, #12
    1b08:	4809      	ldr	r0, [pc, #36]	; (1b30 <clkstarted_handle.constprop.0+0x2c>)
    1b0a:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    1b0c:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    1b0e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    1b10:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    1b14:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    1b16:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    1b18:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    1b1a:	4418      	add	r0, r3
    1b1c:	f003 ffbe 	bl	5a9c <set_on_state>
	if (callback) {
    1b20:	b12d      	cbz	r5, 1b2e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1b22:	4632      	mov	r2, r6
    1b24:	462b      	mov	r3, r5
    1b26:	4803      	ldr	r0, [pc, #12]	; (1b34 <clkstarted_handle.constprop.0+0x30>)
}
    1b28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1b2c:	4718      	bx	r3
}
    1b2e:	bd70      	pop	{r4, r5, r6, pc}
    1b30:	200004c0 	.word	0x200004c0
    1b34:	200000f0 	.word	0x200000f0

00001b38 <clock_event_handler>:
	switch (event) {
    1b38:	b110      	cbz	r0, 1b40 <clock_event_handler+0x8>
    1b3a:	2801      	cmp	r0, #1
    1b3c:	d004      	beq.n	1b48 <clock_event_handler+0x10>
    1b3e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1b40:	4b03      	ldr	r3, [pc, #12]	; (1b50 <clock_event_handler+0x18>)
    1b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1b44:	075b      	lsls	r3, r3, #29
    1b46:	d101      	bne.n	1b4c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1b48:	f7ff bfdc 	b.w	1b04 <clkstarted_handle.constprop.0>
}
    1b4c:	4770      	bx	lr
    1b4e:	bf00      	nop
    1b50:	200004c0 	.word	0x200004c0

00001b54 <generic_hfclk_start>:
{
    1b54:	b508      	push	{r3, lr}
    1b56:	f04f 0320 	mov.w	r3, #32
    1b5a:	f3ef 8111 	mrs	r1, BASEPRI
    1b5e:	f383 8811 	msr	BASEPRI, r3
    1b62:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1b66:	4a12      	ldr	r2, [pc, #72]	; (1bb0 <generic_hfclk_start+0x5c>)
    1b68:	6813      	ldr	r3, [r2, #0]
    1b6a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    1b6e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    1b72:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1b74:	d00c      	beq.n	1b90 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1b76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1b7a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1b7e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1b82:	f013 0301 	ands.w	r3, r3, #1
    1b86:	d003      	beq.n	1b90 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    1b88:	480a      	ldr	r0, [pc, #40]	; (1bb4 <generic_hfclk_start+0x60>)
    1b8a:	f003 ff87 	bl	5a9c <set_on_state>
			already_started = true;
    1b8e:	2301      	movs	r3, #1
	__asm__ volatile(
    1b90:	f381 8811 	msr	BASEPRI, r1
    1b94:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1b98:	b123      	cbz	r3, 1ba4 <generic_hfclk_start+0x50>
}
    1b9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    1b9e:	2000      	movs	r0, #0
    1ba0:	f7ff bfb0 	b.w	1b04 <clkstarted_handle.constprop.0>
}
    1ba4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1ba8:	2001      	movs	r0, #1
    1baa:	f001 bd15 	b.w	35d8 <nrfx_clock_start>
    1bae:	bf00      	nop
    1bb0:	20000510 	.word	0x20000510
    1bb4:	20000500 	.word	0x20000500

00001bb8 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1bb8:	4b09      	ldr	r3, [pc, #36]	; (1be0 <generic_hfclk_stop+0x28>)
    1bba:	f3bf 8f5b 	dmb	ish
    1bbe:	e853 2f00 	ldrex	r2, [r3]
    1bc2:	f022 0102 	bic.w	r1, r2, #2
    1bc6:	e843 1000 	strex	r0, r1, [r3]
    1bca:	2800      	cmp	r0, #0
    1bcc:	d1f7      	bne.n	1bbe <generic_hfclk_stop+0x6>
    1bce:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1bd2:	07d3      	lsls	r3, r2, #31
    1bd4:	d402      	bmi.n	1bdc <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1bd6:	2001      	movs	r0, #1
    1bd8:	f001 bd30 	b.w	363c <nrfx_clock_stop>
}
    1bdc:	4770      	bx	lr
    1bde:	bf00      	nop
    1be0:	20000510 	.word	0x20000510

00001be4 <api_blocking_start>:
{
    1be4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1be6:	2200      	movs	r2, #0
    1be8:	2301      	movs	r3, #1
    1bea:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1bee:	4a09      	ldr	r2, [pc, #36]	; (1c14 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1bf0:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1bf4:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1bf6:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1bfa:	f003 ff88 	bl	5b0e <api_start>
	if (err < 0) {
    1bfe:	2800      	cmp	r0, #0
    1c00:	db05      	blt.n	1c0e <api_blocking_start+0x2a>
    1c02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1c06:	2300      	movs	r3, #0
    1c08:	4668      	mov	r0, sp
    1c0a:	f002 fcb5 	bl	4578 <z_impl_k_sem_take>
}
    1c0e:	b005      	add	sp, #20
    1c10:	f85d fb04 	ldr.w	pc, [sp], #4
    1c14:	00005ae1 	.word	0x00005ae1

00001c18 <z_nrf_clock_control_lf_on>:
{
    1c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1c1c:	493a      	ldr	r1, [pc, #232]	; (1d08 <z_nrf_clock_control_lf_on+0xf0>)
    1c1e:	f3bf 8f5b 	dmb	ish
    1c22:	4606      	mov	r6, r0
    1c24:	2201      	movs	r2, #1
    1c26:	e851 3f00 	ldrex	r3, [r1]
    1c2a:	e841 2000 	strex	r0, r2, [r1]
    1c2e:	2800      	cmp	r0, #0
    1c30:	d1f9      	bne.n	1c26 <z_nrf_clock_control_lf_on+0xe>
    1c32:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    1c36:	b933      	cbnz	r3, 1c46 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1c38:	4934      	ldr	r1, [pc, #208]	; (1d0c <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    1c3a:	4835      	ldr	r0, [pc, #212]	; (1d10 <z_nrf_clock_control_lf_on+0xf8>)
    1c3c:	604b      	str	r3, [r1, #4]
    1c3e:	60cb      	str	r3, [r1, #12]
    1c40:	608a      	str	r2, [r1, #8]
    1c42:	f003 fa2f 	bl	50a4 <onoff_request>
	switch (start_mode) {
    1c46:	1e73      	subs	r3, r6, #1
    1c48:	2b01      	cmp	r3, #1
    1c4a:	d832      	bhi.n	1cb2 <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1c4c:	2e01      	cmp	r6, #1
    1c4e:	d107      	bne.n	1c60 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1c50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1c54:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1c58:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1c5c:	2b01      	cmp	r3, #1
    1c5e:	d028      	beq.n	1cb2 <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1c60:	f004 fb07 	bl	6272 <k_is_in_isr>
    1c64:	4604      	mov	r4, r0
    1c66:	b918      	cbnz	r0, 1c70 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    1c68:	4b2a      	ldr	r3, [pc, #168]	; (1d14 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    1c6a:	781b      	ldrb	r3, [r3, #0]
    1c6c:	2b00      	cmp	r3, #0
    1c6e:	d144      	bne.n	1cfa <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    1c70:	f04f 0320 	mov.w	r3, #32
    1c74:	f3ef 8511 	mrs	r5, BASEPRI
    1c78:	f383 8811 	msr	BASEPRI, r3
    1c7c:	f3bf 8f6f 	isb	sy
    1c80:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1c82:	4f25      	ldr	r7, [pc, #148]	; (1d18 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c84:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1d1c <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1c88:	f8df 9094 	ldr.w	r9, [pc, #148]	; 1d20 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1c8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1c90:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1c94:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    1c98:	03d2      	lsls	r2, r2, #15
    1c9a:	d50c      	bpl.n	1cb6 <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1c9c:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1ca0:	2b01      	cmp	r3, #1
    1ca2:	d001      	beq.n	1ca8 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1ca4:	2e01      	cmp	r6, #1
    1ca6:	d106      	bne.n	1cb6 <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    1ca8:	b30c      	cbz	r4, 1cee <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    1caa:	f385 8811 	msr	BASEPRI, r5
    1cae:	f3bf 8f6f 	isb	sy
}
    1cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    1cb6:	b1ac      	cbz	r4, 1ce4 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1cb8:	4628      	mov	r0, r5
    1cba:	f000 fafb 	bl	22b4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1cbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1cc2:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1cc6:	2b00      	cmp	r3, #0
    1cc8:	d1e0      	bne.n	1c8c <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1cca:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    1ccc:	2900      	cmp	r1, #0
    1cce:	d0dd      	beq.n	1c8c <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1cd0:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1cd2:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    1cd4:	2301      	movs	r3, #1
    1cd6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    1cda:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1cde:	f8c9 3000 	str.w	r3, [r9]
}
    1ce2:	e7d3      	b.n	1c8c <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    1ce4:	2100      	movs	r1, #0
    1ce6:	2021      	movs	r0, #33	; 0x21
    1ce8:	f002 fbfe 	bl	44e8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1cec:	e7e7      	b.n	1cbe <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    1cee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1cf2:	2202      	movs	r2, #2
    1cf4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1cf8:	e7db      	b.n	1cb2 <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    1cfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1cfe:	2202      	movs	r2, #2
    1d00:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    1d04:	4605      	mov	r5, r0
}
    1d06:	e7bc      	b.n	1c82 <z_nrf_clock_control_lf_on+0x6a>
    1d08:	20000514 	.word	0x20000514
    1d0c:	200004b0 	.word	0x200004b0
    1d10:	200004dc 	.word	0x200004dc
    1d14:	20000f9b 	.word	0x20000f9b
    1d18:	40000104 	.word	0x40000104
    1d1c:	e000e100 	.word	0xe000e100
    1d20:	40000008 	.word	0x40000008

00001d24 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    1d24:	4a04      	ldr	r2, [pc, #16]	; (1d38 <sys_clock_timeout_handler+0x14>)
    1d26:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    1d28:	1ac8      	subs	r0, r1, r3
    1d2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    1d2e:	4403      	add	r3, r0
    1d30:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    1d32:	f002 be21 	b.w	4978 <z_clock_announce>
    1d36:	bf00      	nop
    1d38:	20000524 	.word	0x20000524

00001d3c <set_absolute_alarm>:
{
    1d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1d40:	0086      	lsls	r6, r0, #2
    1d42:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    1d46:	f100 0450 	add.w	r4, r0, #80	; 0x50
    1d4a:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    1d4e:	00a4      	lsls	r4, r4, #2
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    1d50:	f8df 807c 	ldr.w	r8, [pc, #124]	; 1dd0 <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
    1d54:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1d58:	b2a4      	uxth	r4, r4
    1d5a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    1d5e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    1d62:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    1d66:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    1d6a:	4087      	lsls	r7, r0
    1d6c:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
    1d6e:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    1d72:	eba3 030a 	sub.w	r3, r3, sl
    1d76:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    1d7a:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    1d7e:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    1d80:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    1d84:	d102      	bne.n	1d8c <set_absolute_alarm+0x50>
	z_impl_k_busy_wait(usec_to_wait);
    1d86:	2013      	movs	r0, #19
    1d88:	f004 fa79 	bl	627e <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    1d8c:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    1d90:	1aab      	subs	r3, r5, r2
    1d92:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    1d96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    1d9a:	bf88      	it	hi
    1d9c:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1d9e:	2300      	movs	r3, #0
    1da0:	6023      	str	r3, [r4, #0]
    1da2:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    1da4:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    1da8:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    1dac:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    1db0:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    1db4:	459a      	cmp	sl, r3
    1db6:	d006      	beq.n	1dc6 <set_absolute_alarm+0x8a>
	return (a - b) & COUNTER_MAX;
    1db8:	1aeb      	subs	r3, r5, r3
    1dba:	3b02      	subs	r3, #2
    1dbc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    1dc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    1dc4:	d801      	bhi.n	1dca <set_absolute_alarm+0x8e>
}
    1dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    1dca:	462b      	mov	r3, r5
    1dcc:	e7cf      	b.n	1d6e <set_absolute_alarm+0x32>
    1dce:	bf00      	nop
    1dd0:	40011000 	.word	0x40011000

00001dd4 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    1dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
    1dd6:	4e10      	ldr	r6, [pc, #64]	; (1e18 <rtc_nrf_isr+0x44>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1dd8:	4f10      	ldr	r7, [pc, #64]	; (1e1c <rtc_nrf_isr+0x48>)
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    1dda:	2500      	movs	r5, #0
    1ddc:	4b10      	ldr	r3, [pc, #64]	; (1e20 <rtc_nrf_isr+0x4c>)
    1dde:	2000      	movs	r0, #0
    1de0:	681c      	ldr	r4, [r3, #0]
    1de2:	461a      	mov	r2, r3
    1de4:	b105      	cbz	r5, 1de8 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    1de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    1de8:	f8d6 1304 	ldr.w	r1, [r6, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    1dec:	03c9      	lsls	r1, r1, #15
    1dee:	d5fa      	bpl.n	1de6 <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1df0:	6839      	ldr	r1, [r7, #0]
    1df2:	2900      	cmp	r1, #0
    1df4:	d0f7      	beq.n	1de6 <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1df6:	603d      	str	r5, [r7, #0]
    1df8:	6839      	ldr	r1, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    1dfa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1dfe:	f8c6 1348 	str.w	r1, [r6, #840]	; 0x348
    return p_reg->CC[ch];
    1e02:	f8d6 1540 	ldr.w	r1, [r6, #1344]	; 0x540
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    1e06:	2501      	movs	r5, #1
			if (handler) {
    1e08:	b11c      	cbz	r4, 1e12 <rtc_nrf_isr+0x3e>
				handler(chan, cc_val,
    1e0a:	685a      	ldr	r2, [r3, #4]
    1e0c:	6018      	str	r0, [r3, #0]
    1e0e:	47a0      	blx	r4
    1e10:	e7e4      	b.n	1ddc <rtc_nrf_isr+0x8>
    1e12:	6014      	str	r4, [r2, #0]
}
    1e14:	e7e7      	b.n	1de6 <rtc_nrf_isr+0x12>
    1e16:	bf00      	nop
    1e18:	40011000 	.word	0x40011000
    1e1c:	40011140 	.word	0x40011140
    1e20:	20000518 	.word	0x20000518

00001e24 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    1e24:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    1e26:	4d10      	ldr	r5, [pc, #64]	; (1e68 <z_clock_driver_init+0x44>)
    1e28:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    1e2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    1e2e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    1e32:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1e36:	4b0d      	ldr	r3, [pc, #52]	; (1e6c <z_clock_driver_init+0x48>)
    1e38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1e3c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    1e40:	2101      	movs	r1, #1
    1e42:	4622      	mov	r2, r4
    1e44:	2011      	movs	r0, #17
    1e46:	f000 f9b9 	bl	21bc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    1e4a:	2011      	movs	r0, #17
    1e4c:	f000 f998 	bl	2180 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1e50:	4a07      	ldr	r2, [pc, #28]	; (1e70 <z_clock_driver_init+0x4c>)
    1e52:	2301      	movs	r3, #1
    1e54:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    1e56:	4a07      	ldr	r2, [pc, #28]	; (1e74 <z_clock_driver_init+0x50>)
    1e58:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    1e5a:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
    1e5c:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    1e5e:	f7ff fedb 	bl	1c18 <z_nrf_clock_control_lf_on>

	return 0;
}
    1e62:	4620      	mov	r0, r4
    1e64:	bd38      	pop	{r3, r4, r5, pc}
    1e66:	bf00      	nop
    1e68:	40011000 	.word	0x40011000
    1e6c:	e000e100 	.word	0xe000e100
    1e70:	40011008 	.word	0x40011008
    1e74:	20000520 	.word	0x20000520

00001e78 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    1e78:	4b13      	ldr	r3, [pc, #76]	; (1ec8 <z_clock_set_timeout+0x50>)
    1e7a:	f1b0 3fff 	cmp.w	r0, #4294967295
    1e7e:	bf08      	it	eq
    1e80:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    1e82:	3801      	subs	r0, #1
    1e84:	2800      	cmp	r0, #0
    1e86:	dd1c      	ble.n	1ec2 <z_clock_set_timeout+0x4a>
    1e88:	4298      	cmp	r0, r3
    1e8a:	bfa8      	it	ge
    1e8c:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    1e8e:	4b0f      	ldr	r3, [pc, #60]	; (1ecc <z_clock_set_timeout+0x54>)
    1e90:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    1e94:	4b0e      	ldr	r3, [pc, #56]	; (1ed0 <z_clock_set_timeout+0x58>)
    1e96:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    1e98:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    1e9a:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    1e9e:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
    1ea2:	bf18      	it	ne
    1ea4:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
    1ea6:	4a0b      	ldr	r2, [pc, #44]	; (1ed4 <z_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    1ea8:	3301      	adds	r3, #1
    1eaa:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    1eac:	480a      	ldr	r0, [pc, #40]	; (1ed8 <z_clock_set_timeout+0x60>)
    1eae:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    1eb0:	2000      	movs	r0, #0
    1eb2:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    1eb4:	4a04      	ldr	r2, [pc, #16]	; (1ec8 <z_clock_set_timeout+0x50>)
    1eb6:	4293      	cmp	r3, r2
    1eb8:	bf94      	ite	ls
    1eba:	18c9      	addls	r1, r1, r3
    1ebc:	1889      	addhi	r1, r1, r2
    1ebe:	f7ff bf3d 	b.w	1d3c <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    1ec2:	2000      	movs	r0, #0
    1ec4:	e7e3      	b.n	1e8e <z_clock_set_timeout+0x16>
    1ec6:	bf00      	nop
    1ec8:	007fffff 	.word	0x007fffff
    1ecc:	40011000 	.word	0x40011000
    1ed0:	20000524 	.word	0x20000524
    1ed4:	20000518 	.word	0x20000518
    1ed8:	00001d25 	.word	0x00001d25

00001edc <z_clock_elapsed>:
	__asm__ volatile(
    1edc:	f04f 0220 	mov.w	r2, #32
    1ee0:	f3ef 8311 	mrs	r3, BASEPRI
    1ee4:	f382 8811 	msr	BASEPRI, r2
    1ee8:	f3bf 8f6f 	isb	sy
    1eec:	4a06      	ldr	r2, [pc, #24]	; (1f08 <z_clock_elapsed+0x2c>)
    1eee:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    1ef2:	4a06      	ldr	r2, [pc, #24]	; (1f0c <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    1ef4:	6812      	ldr	r2, [r2, #0]
    1ef6:	1a80      	subs	r0, r0, r2
    1ef8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    1efc:	f383 8811 	msr	BASEPRI, r3
    1f00:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    1f04:	4770      	bx	lr
    1f06:	bf00      	nop
    1f08:	40011000 	.word	0x40011000
    1f0c:	20000524 	.word	0x20000524

00001f10 <z_timer_cycle_get_32>:
	__asm__ volatile(
    1f10:	f04f 0320 	mov.w	r3, #32
    1f14:	f3ef 8211 	mrs	r2, BASEPRI
    1f18:	f383 8811 	msr	BASEPRI, r3
    1f1c:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    1f20:	4906      	ldr	r1, [pc, #24]	; (1f3c <z_timer_cycle_get_32+0x2c>)
    1f22:	4b07      	ldr	r3, [pc, #28]	; (1f40 <z_timer_cycle_get_32+0x30>)
    1f24:	6808      	ldr	r0, [r1, #0]
    1f26:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    1f2a:	f382 8811 	msr	BASEPRI, r2
    1f2e:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    1f32:	1a1b      	subs	r3, r3, r0
    1f34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    1f38:	4418      	add	r0, r3
    1f3a:	4770      	bx	lr
    1f3c:	20000524 	.word	0x20000524
    1f40:	40011000 	.word	0x40011000

00001f44 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1f44:	4801      	ldr	r0, [pc, #4]	; (1f4c <nrf_cc3xx_platform_abort_init+0x8>)
    1f46:	f002 be7f 	b.w	4c48 <nrf_cc3xx_platform_set_abort>
    1f4a:	bf00      	nop
    1f4c:	000066b0 	.word	0x000066b0

00001f50 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1f50:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1f52:	b1d0      	cbz	r0, 1f8a <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1f54:	6843      	ldr	r3, [r0, #4]
    1f56:	2b04      	cmp	r3, #4
    1f58:	d111      	bne.n	1f7e <mutex_unlock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1f5a:	2200      	movs	r2, #0
    1f5c:	6803      	ldr	r3, [r0, #0]
    1f5e:	f3bf 8f5b 	dmb	ish
    1f62:	e853 1f00 	ldrex	r1, [r3]
    1f66:	2901      	cmp	r1, #1
    1f68:	d103      	bne.n	1f72 <mutex_unlock_platform+0x22>
    1f6a:	e843 2000 	strex	r0, r2, [r3]
    1f6e:	2800      	cmp	r0, #0
    1f70:	d1f7      	bne.n	1f62 <mutex_unlock_platform+0x12>
    1f72:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1f76:	4807      	ldr	r0, [pc, #28]	; (1f94 <mutex_unlock_platform+0x44>)
    1f78:	bf08      	it	eq
    1f7a:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1f7c:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1f7e:	b13b      	cbz	r3, 1f90 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1f80:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    1f82:	f001 fef5 	bl	3d70 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1f86:	2000      	movs	r0, #0
    1f88:	e7f8      	b.n	1f7c <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1f8a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1f8e:	e7f5      	b.n	1f7c <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1f90:	4801      	ldr	r0, [pc, #4]	; (1f98 <mutex_unlock_platform+0x48>)
    1f92:	e7f3      	b.n	1f7c <mutex_unlock_platform+0x2c>
    1f94:	ffff8fe9 	.word	0xffff8fe9
    1f98:	ffff8fea 	.word	0xffff8fea

00001f9c <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1f9c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1f9e:	4604      	mov	r4, r0
    1fa0:	b918      	cbnz	r0, 1faa <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    1fa2:	4b0d      	ldr	r3, [pc, #52]	; (1fd8 <mutex_free_platform+0x3c>)
    1fa4:	480d      	ldr	r0, [pc, #52]	; (1fdc <mutex_free_platform+0x40>)
    1fa6:	685b      	ldr	r3, [r3, #4]
    1fa8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1faa:	6861      	ldr	r1, [r4, #4]
    1fac:	2908      	cmp	r1, #8
    1fae:	d00d      	beq.n	1fcc <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1fb0:	f031 0304 	bics.w	r3, r1, #4
    1fb4:	d00a      	beq.n	1fcc <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1fb6:	f011 0102 	ands.w	r1, r1, #2
    1fba:	d008      	beq.n	1fce <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1fbc:	4808      	ldr	r0, [pc, #32]	; (1fe0 <mutex_free_platform+0x44>)
    1fbe:	4621      	mov	r1, r4
    1fc0:	f001 fe34 	bl	3c2c <k_mem_slab_free>
        mutex->mutex = NULL;
    1fc4:	2300      	movs	r3, #0
    1fc6:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1fc8:	2300      	movs	r3, #0
    1fca:	6063      	str	r3, [r4, #4]
}
    1fcc:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1fce:	6820      	ldr	r0, [r4, #0]
    1fd0:	2214      	movs	r2, #20
    1fd2:	f003 fe25 	bl	5c20 <memset>
    1fd6:	e7f7      	b.n	1fc8 <mutex_free_platform+0x2c>
    1fd8:	20000090 	.word	0x20000090
    1fdc:	00006b58 	.word	0x00006b58
    1fe0:	20000528 	.word	0x20000528

00001fe4 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1fe4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1fe6:	4604      	mov	r4, r0
    1fe8:	b918      	cbnz	r0, 1ff2 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    1fea:	4b16      	ldr	r3, [pc, #88]	; (2044 <mutex_init_platform+0x60>)
    1fec:	4816      	ldr	r0, [pc, #88]	; (2048 <mutex_init_platform+0x64>)
    1fee:	685b      	ldr	r3, [r3, #4]
    1ff0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1ff2:	6863      	ldr	r3, [r4, #4]
    1ff4:	2b04      	cmp	r3, #4
    1ff6:	d023      	beq.n	2040 <mutex_init_platform+0x5c>
    1ff8:	2b08      	cmp	r3, #8
    1ffa:	d021      	beq.n	2040 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1ffc:	b9cb      	cbnz	r3, 2032 <mutex_init_platform+0x4e>
    1ffe:	6823      	ldr	r3, [r4, #0]
    2000:	b9bb      	cbnz	r3, 2032 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2002:	4812      	ldr	r0, [pc, #72]	; (204c <mutex_init_platform+0x68>)
    2004:	f04f 32ff 	mov.w	r2, #4294967295
    2008:	f04f 33ff 	mov.w	r3, #4294967295
    200c:	4621      	mov	r1, r4
    200e:	f001 fddb 	bl	3bc8 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2012:	b908      	cbnz	r0, 2018 <mutex_init_platform+0x34>
    2014:	6823      	ldr	r3, [r4, #0]
    2016:	b91b      	cbnz	r3, 2020 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    2018:	4b0a      	ldr	r3, [pc, #40]	; (2044 <mutex_init_platform+0x60>)
    201a:	480d      	ldr	r0, [pc, #52]	; (2050 <mutex_init_platform+0x6c>)
    201c:	685b      	ldr	r3, [r3, #4]
    201e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2020:	6820      	ldr	r0, [r4, #0]
    2022:	2214      	movs	r2, #20
    2024:	2100      	movs	r1, #0
    2026:	f003 fdfb 	bl	5c20 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    202a:	6863      	ldr	r3, [r4, #4]
    202c:	f043 0302 	orr.w	r3, r3, #2
    2030:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    2032:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2034:	f004 f84a 	bl	60cc <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2038:	6863      	ldr	r3, [r4, #4]
    203a:	f043 0301 	orr.w	r3, r3, #1
    203e:	6063      	str	r3, [r4, #4]
}
    2040:	bd10      	pop	{r4, pc}
    2042:	bf00      	nop
    2044:	20000090 	.word	0x20000090
    2048:	00006b58 	.word	0x00006b58
    204c:	20000528 	.word	0x20000528
    2050:	00006b7e 	.word	0x00006b7e

00002054 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2054:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    2056:	b308      	cbz	r0, 209c <mutex_lock_platform+0x48>
    switch (mutex->flags) {
    2058:	6843      	ldr	r3, [r0, #4]
    205a:	2b04      	cmp	r3, #4
    205c:	d110      	bne.n	2080 <mutex_lock_platform+0x2c>
    205e:	2201      	movs	r2, #1
    2060:	6803      	ldr	r3, [r0, #0]
    2062:	f3bf 8f5b 	dmb	ish
    2066:	e853 1f00 	ldrex	r1, [r3]
    206a:	2900      	cmp	r1, #0
    206c:	d103      	bne.n	2076 <mutex_lock_platform+0x22>
    206e:	e843 2000 	strex	r0, r2, [r3]
    2072:	2800      	cmp	r0, #0
    2074:	d1f7      	bne.n	2066 <mutex_lock_platform+0x12>
    2076:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    207a:	d10b      	bne.n	2094 <mutex_lock_platform+0x40>
    207c:	2000      	movs	r0, #0
}
    207e:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2080:	b153      	cbz	r3, 2098 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2082:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2084:	f04f 32ff 	mov.w	r2, #4294967295
    2088:	f04f 33ff 	mov.w	r3, #4294967295
    208c:	f001 fdf8 	bl	3c80 <z_impl_k_mutex_lock>
        if (ret == 0) {
    2090:	2800      	cmp	r0, #0
    2092:	d0f3      	beq.n	207c <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2094:	4803      	ldr	r0, [pc, #12]	; (20a4 <mutex_lock_platform+0x50>)
    2096:	e7f2      	b.n	207e <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2098:	4803      	ldr	r0, [pc, #12]	; (20a8 <mutex_lock_platform+0x54>)
    209a:	e7f0      	b.n	207e <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    209c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    20a0:	e7ed      	b.n	207e <mutex_lock_platform+0x2a>
    20a2:	bf00      	nop
    20a4:	ffff8fe9 	.word	0xffff8fe9
    20a8:	ffff8fea 	.word	0xffff8fea

000020ac <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    20ac:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    20ae:	4906      	ldr	r1, [pc, #24]	; (20c8 <nrf_cc3xx_platform_mutex_init+0x1c>)
    20b0:	4806      	ldr	r0, [pc, #24]	; (20cc <nrf_cc3xx_platform_mutex_init+0x20>)
    20b2:	2340      	movs	r3, #64	; 0x40
    20b4:	2214      	movs	r2, #20
    20b6:	f003 ffee 	bl	6096 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    20ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    20be:	4904      	ldr	r1, [pc, #16]	; (20d0 <nrf_cc3xx_platform_mutex_init+0x24>)
    20c0:	4804      	ldr	r0, [pc, #16]	; (20d4 <nrf_cc3xx_platform_mutex_init+0x28>)
    20c2:	f002 be17 	b.w	4cf4 <nrf_cc3xx_platform_set_mutexes>
    20c6:	bf00      	nop
    20c8:	20000544 	.word	0x20000544
    20cc:	20000528 	.word	0x20000528
    20d0:	000066c8 	.word	0x000066c8
    20d4:	000066b8 	.word	0x000066b8

000020d8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    20d8:	4a09      	ldr	r2, [pc, #36]	; (2100 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    20da:	490a      	ldr	r1, [pc, #40]	; (2104 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    20dc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    20de:	6809      	ldr	r1, [r1, #0]
    20e0:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    20e2:	4909      	ldr	r1, [pc, #36]	; (2108 <arch_swap+0x30>)
	_current->arch.basepri = key;
    20e4:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    20e6:	684b      	ldr	r3, [r1, #4]
    20e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    20ec:	604b      	str	r3, [r1, #4]
    20ee:	2300      	movs	r3, #0
    20f0:	f383 8811 	msr	BASEPRI, r3
    20f4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    20f8:	6893      	ldr	r3, [r2, #8]
}
    20fa:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    20fc:	4770      	bx	lr
    20fe:	bf00      	nop
    2100:	20000af4 	.word	0x20000af4
    2104:	00006894 	.word	0x00006894
    2108:	e000ed00 	.word	0xe000ed00

0000210c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    210c:	4912      	ldr	r1, [pc, #72]	; (2158 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    210e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2110:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    2114:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2116:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    211a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    211e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2120:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2124:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2128:	4f0c      	ldr	r7, [pc, #48]	; (215c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    212a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    212e:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    2130:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2132:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2134:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    2136:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2138:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    213a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    213e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2140:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2142:	f000 fbcb 	bl	28dc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2146:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    214a:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    214e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2152:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    2156:	4770      	bx	lr
    ldr r1, =_kernel
    2158:	20000af4 	.word	0x20000af4
    ldr v4, =_SCS_ICSR
    215c:	e000ed04 	.word	0xe000ed04

00002160 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    2160:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2164:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2166:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    216a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    216e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2170:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2174:	2902      	cmp	r1, #2
    beq _oops
    2176:	d0ff      	beq.n	2178 <_oops>

00002178 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2178:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    217a:	f003 fcec 	bl	5b56 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    217e:	bd01      	pop	{r0, pc}

00002180 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2180:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2182:	2b00      	cmp	r3, #0
    2184:	db08      	blt.n	2198 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2186:	2201      	movs	r2, #1
    2188:	f000 001f 	and.w	r0, r0, #31
    218c:	fa02 f000 	lsl.w	r0, r2, r0
    2190:	095b      	lsrs	r3, r3, #5
    2192:	4a02      	ldr	r2, [pc, #8]	; (219c <arch_irq_enable+0x1c>)
    2194:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2198:	4770      	bx	lr
    219a:	bf00      	nop
    219c:	e000e100 	.word	0xe000e100

000021a0 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    21a0:	4b05      	ldr	r3, [pc, #20]	; (21b8 <arch_irq_is_enabled+0x18>)
    21a2:	0942      	lsrs	r2, r0, #5
    21a4:	f000 001f 	and.w	r0, r0, #31
    21a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    21ac:	2301      	movs	r3, #1
    21ae:	fa03 f000 	lsl.w	r0, r3, r0
}
    21b2:	4010      	ands	r0, r2
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop
    21b8:	e000e100 	.word	0xe000e100

000021bc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    21bc:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    21be:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    21c0:	bfa8      	it	ge
    21c2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    21c6:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    21ca:	bfb8      	it	lt
    21cc:	4b06      	ldrlt	r3, [pc, #24]	; (21e8 <z_arm_irq_priority_set+0x2c>)
    21ce:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    21d2:	bfac      	ite	ge
    21d4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    21d8:	f000 000f 	andlt.w	r0, r0, #15
    21dc:	b2c9      	uxtb	r1, r1
    21de:	bfb4      	ite	lt
    21e0:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    21e2:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    21e6:	4770      	bx	lr
    21e8:	e000ed14 	.word	0xe000ed14

000021ec <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    21ec:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    21f0:	9b00      	ldr	r3, [sp, #0]
    21f2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    21f6:	490a      	ldr	r1, [pc, #40]	; (2220 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    21f8:	9b01      	ldr	r3, [sp, #4]
    21fa:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    21fe:	9b02      	ldr	r3, [sp, #8]
    2200:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    2204:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2208:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    220c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    2210:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2214:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2216:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2218:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    221a:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    221c:	4770      	bx	lr
    221e:	bf00      	nop
    2220:	00005137 	.word	0x00005137

00002224 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2224:	4a0b      	ldr	r2, [pc, #44]	; (2254 <z_check_thread_stack_fail+0x30>)
{
    2226:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    2228:	6890      	ldr	r0, [r2, #8]

	if (!thread) {
    222a:	b190      	cbz	r0, 2252 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    222c:	f113 0f16 	cmn.w	r3, #22
    2230:	6e80      	ldr	r0, [r0, #104]	; 0x68
    2232:	d005      	beq.n	2240 <z_check_thread_stack_fail+0x1c>
    2234:	f1a0 0220 	sub.w	r2, r0, #32
    2238:	429a      	cmp	r2, r3
    223a:	d806      	bhi.n	224a <z_check_thread_stack_fail+0x26>
    223c:	4283      	cmp	r3, r0
    223e:	d204      	bcs.n	224a <z_check_thread_stack_fail+0x26>
    2240:	4281      	cmp	r1, r0
    2242:	bf2c      	ite	cs
    2244:	2100      	movcs	r1, #0
    2246:	2101      	movcc	r1, #1
    2248:	e000      	b.n	224c <z_check_thread_stack_fail+0x28>
    224a:	2100      	movs	r1, #0
    224c:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    224e:	bf08      	it	eq
    2250:	2000      	moveq	r0, #0
}
    2252:	4770      	bx	lr
    2254:	20000af4 	.word	0x20000af4

00002258 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2258:	b508      	push	{r3, lr}
    225a:	4604      	mov	r4, r0
    225c:	460e      	mov	r6, r1
    225e:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    2260:	f000 fb30 	bl	28c4 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2264:	4b08      	ldr	r3, [pc, #32]	; (2288 <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    2266:	4620      	mov	r0, r4
	_current = main_thread;
    2268:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
    226a:	f000 fb37 	bl	28dc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    226e:	4628      	mov	r0, r5
    2270:	f386 8809 	msr	PSP, r6
    2274:	2100      	movs	r1, #0
    2276:	b663      	cpsie	if
    2278:	f381 8811 	msr	BASEPRI, r1
    227c:	f3bf 8f6f 	isb	sy
    2280:	2200      	movs	r2, #0
    2282:	2300      	movs	r3, #0
    2284:	f002 ff57 	bl	5136 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2288:	20000af4 	.word	0x20000af4

0000228c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    228c:	4901      	ldr	r1, [pc, #4]	; (2294 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    228e:	2210      	movs	r2, #16
	str	r2, [r1]
    2290:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2292:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2294:	e000ed10 	.word	0xe000ed10

00002298 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2298:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    229a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    229c:	f380 8811 	msr	BASEPRI, r0
	isb
    22a0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    22a4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    22a8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    22aa:	b662      	cpsie	i
	isb
    22ac:	f3bf 8f6f 	isb	sy

	bx	lr
    22b0:	4770      	bx	lr
    22b2:	bf00      	nop

000022b4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    22b4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    22b6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    22b8:	f381 8811 	msr	BASEPRI, r1

	wfe
    22bc:	bf20      	wfe

	msr	BASEPRI, r0
    22be:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    22c2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    22c4:	4770      	bx	lr
    22c6:	bf00      	nop

000022c8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    22c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    22ca:	4606      	mov	r6, r0

	if (esf != NULL) {
    22cc:	460c      	mov	r4, r1
    22ce:	b301      	cbz	r1, 2312 <z_arm_fatal_error+0x4a>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    22d0:	4b13      	ldr	r3, [pc, #76]	; (2320 <z_arm_fatal_error+0x58>)
    22d2:	4d14      	ldr	r5, [pc, #80]	; (2324 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    22d4:	4814      	ldr	r0, [pc, #80]	; (2328 <z_arm_fatal_error+0x60>)
    22d6:	1aed      	subs	r5, r5, r3
    22d8:	08ed      	lsrs	r5, r5, #3
    22da:	01ad      	lsls	r5, r5, #6
    22dc:	f045 0501 	orr.w	r5, r5, #1
    22e0:	f8ad 5000 	strh.w	r5, [sp]
    22e4:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    22e8:	6809      	ldr	r1, [r1, #0]
    22ea:	f003 f8e9 	bl	54c0 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    22ee:	f8ad 5000 	strh.w	r5, [sp]
    22f2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    22f6:	68e1      	ldr	r1, [r4, #12]
    22f8:	480c      	ldr	r0, [pc, #48]	; (232c <z_arm_fatal_error+0x64>)
    22fa:	f003 f8e1 	bl	54c0 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    22fe:	69e1      	ldr	r1, [r4, #28]
    2300:	480b      	ldr	r0, [pc, #44]	; (2330 <z_arm_fatal_error+0x68>)
    2302:	462a      	mov	r2, r5
    2304:	f003 f8af 	bl	5466 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2308:	69a1      	ldr	r1, [r4, #24]
    230a:	480a      	ldr	r0, [pc, #40]	; (2334 <z_arm_fatal_error+0x6c>)
    230c:	462a      	mov	r2, r5
    230e:	f003 f8aa 	bl	5466 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2312:	4621      	mov	r1, r4
    2314:	4630      	mov	r0, r6
}
    2316:	b002      	add	sp, #8
    2318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    231c:	f001 bafc 	b.w	3918 <z_fatal_error>
    2320:	00006580 	.word	0x00006580
    2324:	000065c8 	.word	0x000065c8
    2328:	00006bab 	.word	0x00006bab
    232c:	00006bda 	.word	0x00006bda
    2330:	00006c09 	.word	0x00006c09
    2334:	00006c18 	.word	0x00006c18

00002338 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2338:	bf30      	wfi
    b z_SysNmiOnReset
    233a:	f7ff bffd 	b.w	2338 <z_SysNmiOnReset>
    233e:	bf00      	nop

00002340 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2340:	4a0e      	ldr	r2, [pc, #56]	; (237c <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    2342:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2344:	4b0e      	ldr	r3, [pc, #56]	; (2380 <z_arm_prep_c+0x40>)
    2346:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    234a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    234c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2350:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2354:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2358:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    235c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    2360:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    2364:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    2368:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    236c:	f001 fb62 	bl	3a34 <z_bss_zero>
	z_data_copy();
    2370:	f002 fa08 	bl	4784 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2374:	f000 fa78 	bl	2868 <z_arm_interrupt_init>
	z_cstart();
    2378:	f001 fb80 	bl	3a7c <z_cstart>
    237c:	00000000 	.word	0x00000000
    2380:	e000ed00 	.word	0xe000ed00

00002384 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2384:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2386:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2388:	4a0b      	ldr	r2, [pc, #44]	; (23b8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    238a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    238c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    238e:	bf1e      	ittt	ne
	movne	r1, #0
    2390:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2392:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    2394:	f003 fe7d 	blne	6092 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2398:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    239a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    239e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    23a2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    23a6:	4905      	ldr	r1, [pc, #20]	; (23bc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    23a8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    23aa:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    23ac:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    23ae:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    23b2:	4903      	ldr	r1, [pc, #12]	; (23c0 <_isr_wrapper+0x3c>)
	bx r1
    23b4:	4708      	bx	r1
    23b6:	0000      	.short	0x0000
	ldr r2, =_kernel
    23b8:	20000af4 	.word	0x20000af4
	ldr r1, =_sw_isr_table
    23bc:	00006400 	.word	0x00006400
	ldr r1, =z_arm_int_exit
    23c0:	0000284d 	.word	0x0000284d

000023c4 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    23c4:	f003 fc52 	bl	5c6c <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    23c8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    23ca:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    23ce:	4808      	ldr	r0, [pc, #32]	; (23f0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    23d0:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    23d4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    23d6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    23da:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    23de:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    23e0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    23e2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    23e6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    23ea:	f7ff ffa9 	bl	2340 <z_arm_prep_c>
    23ee:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    23f0:	20001c60 	.word	0x20001c60

000023f4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    23f4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    23f8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    23fc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    23fe:	4672      	mov	r2, lr
	bl z_arm_fault
    2400:	f000 f94e 	bl	26a0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2404:	bd01      	pop	{r0, pc}
    2406:	bf00      	nop

00002408 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    2408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    240c:	4b35      	ldr	r3, [pc, #212]	; (24e4 <mem_manage_fault+0xdc>)
    240e:	4c36      	ldr	r4, [pc, #216]	; (24e8 <mem_manage_fault+0xe0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2410:	4d36      	ldr	r5, [pc, #216]	; (24ec <mem_manage_fault+0xe4>)
    2412:	1ae4      	subs	r4, r4, r3
    2414:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    2416:	01a4      	lsls	r4, r4, #6
    2418:	f044 0901 	orr.w	r9, r4, #1
{
    241c:	4607      	mov	r7, r0
    241e:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    2420:	4833      	ldr	r0, [pc, #204]	; (24f0 <mem_manage_fault+0xe8>)
    2422:	4649      	mov	r1, r9
{
    2424:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    2426:	f003 f811 	bl	544c <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    242a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    242c:	06d3      	lsls	r3, r2, #27
    242e:	d503      	bpl.n	2438 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2430:	4830      	ldr	r0, [pc, #192]	; (24f4 <mem_manage_fault+0xec>)
    2432:	4649      	mov	r1, r9
    2434:	f003 f80a 	bl	544c <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2438:	6aab      	ldr	r3, [r5, #40]	; 0x28
    243a:	0718      	lsls	r0, r3, #28
    243c:	d504      	bpl.n	2448 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
    243e:	482e      	ldr	r0, [pc, #184]	; (24f8 <mem_manage_fault+0xf0>)
    2440:	f044 0101 	orr.w	r1, r4, #1
    2444:	f003 f802 	bl	544c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2448:	4d28      	ldr	r5, [pc, #160]	; (24ec <mem_manage_fault+0xe4>)
    244a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    244c:	0799      	lsls	r1, r3, #30
    244e:	d423      	bmi.n	2498 <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
    2450:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2454:	4d25      	ldr	r5, [pc, #148]	; (24ec <mem_manage_fault+0xe4>)
    2456:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2458:	07d3      	lsls	r3, r2, #31
    245a:	d504      	bpl.n	2466 <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
    245c:	4827      	ldr	r0, [pc, #156]	; (24fc <mem_manage_fault+0xf4>)
    245e:	f044 0101 	orr.w	r1, r4, #1
    2462:	f002 fff3 	bl	544c <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2466:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2468:	0698      	lsls	r0, r3, #26
    246a:	d504      	bpl.n	2476 <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
    246c:	4824      	ldr	r0, [pc, #144]	; (2500 <mem_manage_fault+0xf8>)
    246e:	f044 0101 	orr.w	r1, r4, #1
    2472:	f002 ffeb 	bl	544c <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2476:	4b1d      	ldr	r3, [pc, #116]	; (24ec <mem_manage_fault+0xe4>)
    2478:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    247a:	06d1      	lsls	r1, r2, #27
    247c:	d424      	bmi.n	24c8 <mem_manage_fault+0xc0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    247e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2480:	0792      	lsls	r2, r2, #30
    2482:	d421      	bmi.n	24c8 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2484:	2000      	movs	r0, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2486:	4a19      	ldr	r2, [pc, #100]	; (24ec <mem_manage_fault+0xe4>)
    2488:	6a93      	ldr	r3, [r2, #40]	; 0x28
    248a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    248e:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    2490:	2300      	movs	r3, #0
    2492:	7033      	strb	r3, [r6, #0]

	return reason;
}
    2494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    2498:	f044 0a01 	orr.w	sl, r4, #1
    249c:	4819      	ldr	r0, [pc, #100]	; (2504 <mem_manage_fault+0xfc>)
    249e:	4651      	mov	r1, sl
    24a0:	f002 ffd4 	bl	544c <log_0>
		uint32_t temp = SCB->MMFAR;
    24a4:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    24a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    24aa:	061a      	lsls	r2, r3, #24
    24ac:	d5d0      	bpl.n	2450 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    24ae:	4816      	ldr	r0, [pc, #88]	; (2508 <mem_manage_fault+0x100>)
    24b0:	4652      	mov	r2, sl
    24b2:	4649      	mov	r1, r9
    24b4:	f002 ffd7 	bl	5466 <log_1>
			if (from_hard_fault) {
    24b8:	f1b8 0f00 	cmp.w	r8, #0
    24bc:	d0ca      	beq.n	2454 <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    24be:	6aab      	ldr	r3, [r5, #40]	; 0x28
    24c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    24c4:	62ab      	str	r3, [r5, #40]	; 0x28
    24c6:	e7c5      	b.n	2454 <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    24c8:	685b      	ldr	r3, [r3, #4]
    24ca:	051b      	lsls	r3, r3, #20
    24cc:	d5da      	bpl.n	2484 <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    24ce:	4639      	mov	r1, r7
    24d0:	4648      	mov	r0, r9
    24d2:	f7ff fea7 	bl	2224 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    24d6:	2800      	cmp	r0, #0
    24d8:	d0d4      	beq.n	2484 <mem_manage_fault+0x7c>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    24da:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    24de:	2002      	movs	r0, #2
    24e0:	e7d1      	b.n	2486 <mem_manage_fault+0x7e>
    24e2:	bf00      	nop
    24e4:	00006580 	.word	0x00006580
    24e8:	000065c8 	.word	0x000065c8
    24ec:	e000ed00 	.word	0xe000ed00
    24f0:	00006c46 	.word	0x00006c46
    24f4:	00006c5c 	.word	0x00006c5c
    24f8:	00006c8f 	.word	0x00006c8f
    24fc:	00006cd0 	.word	0x00006cd0
    2500:	00006cef 	.word	0x00006cef
    2504:	00006ca2 	.word	0x00006ca2
    2508:	00006cba 	.word	0x00006cba

0000250c <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    250c:	b570      	push	{r4, r5, r6, lr}
    250e:	4b23      	ldr	r3, [pc, #140]	; (259c <usage_fault.isra.0+0x90>)
    2510:	4c23      	ldr	r4, [pc, #140]	; (25a0 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2512:	4d24      	ldr	r5, [pc, #144]	; (25a4 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    2514:	4824      	ldr	r0, [pc, #144]	; (25a8 <usage_fault.isra.0+0x9c>)
    2516:	1ae4      	subs	r4, r4, r3
    2518:	08e4      	lsrs	r4, r4, #3
    251a:	01a4      	lsls	r4, r4, #6
    251c:	f044 0601 	orr.w	r6, r4, #1
    2520:	4631      	mov	r1, r6
    2522:	f002 ff93 	bl	544c <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2526:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2528:	0193      	lsls	r3, r2, #6
    252a:	d503      	bpl.n	2534 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    252c:	481f      	ldr	r0, [pc, #124]	; (25ac <usage_fault.isra.0+0xa0>)
    252e:	4631      	mov	r1, r6
    2530:	f002 ff8c 	bl	544c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2534:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2536:	01dd      	lsls	r5, r3, #7
    2538:	d504      	bpl.n	2544 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    253a:	481d      	ldr	r0, [pc, #116]	; (25b0 <usage_fault.isra.0+0xa4>)
    253c:	f044 0101 	orr.w	r1, r4, #1
    2540:	f002 ff84 	bl	544c <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2544:	4d17      	ldr	r5, [pc, #92]	; (25a4 <usage_fault.isra.0+0x98>)
    2546:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2548:	0310      	lsls	r0, r2, #12
    254a:	d504      	bpl.n	2556 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    254c:	4819      	ldr	r0, [pc, #100]	; (25b4 <usage_fault.isra.0+0xa8>)
    254e:	f044 0101 	orr.w	r1, r4, #1
    2552:	f002 ff7b 	bl	544c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2556:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2558:	0359      	lsls	r1, r3, #13
    255a:	d504      	bpl.n	2566 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    255c:	4816      	ldr	r0, [pc, #88]	; (25b8 <usage_fault.isra.0+0xac>)
    255e:	f044 0101 	orr.w	r1, r4, #1
    2562:	f002 ff73 	bl	544c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2566:	4d0f      	ldr	r5, [pc, #60]	; (25a4 <usage_fault.isra.0+0x98>)
    2568:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    256a:	0392      	lsls	r2, r2, #14
    256c:	d504      	bpl.n	2578 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    256e:	4813      	ldr	r0, [pc, #76]	; (25bc <usage_fault.isra.0+0xb0>)
    2570:	f044 0101 	orr.w	r1, r4, #1
    2574:	f002 ff6a 	bl	544c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2578:	6aab      	ldr	r3, [r5, #40]	; 0x28
    257a:	03db      	lsls	r3, r3, #15
    257c:	d504      	bpl.n	2588 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    257e:	4810      	ldr	r0, [pc, #64]	; (25c0 <usage_fault.isra.0+0xb4>)
    2580:	f044 0101 	orr.w	r1, r4, #1
    2584:	f002 ff62 	bl	544c <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2588:	4a06      	ldr	r2, [pc, #24]	; (25a4 <usage_fault.isra.0+0x98>)
    258a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    258c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2590:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    2594:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    2596:	2000      	movs	r0, #0
    2598:	bd70      	pop	{r4, r5, r6, pc}
    259a:	bf00      	nop
    259c:	00006580 	.word	0x00006580
    25a0:	000065c8 	.word	0x000065c8
    25a4:	e000ed00 	.word	0xe000ed00
    25a8:	00006d1e 	.word	0x00006d1e
    25ac:	00006d36 	.word	0x00006d36
    25b0:	00006d49 	.word	0x00006d49
    25b4:	00006d63 	.word	0x00006d63
    25b8:	00006d81 	.word	0x00006d81
    25bc:	00006da6 	.word	0x00006da6
    25c0:	00006dc0 	.word	0x00006dc0

000025c4 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    25c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    25c8:	4b2a      	ldr	r3, [pc, #168]	; (2674 <bus_fault.isra.0+0xb0>)
    25ca:	4c2b      	ldr	r4, [pc, #172]	; (2678 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    25cc:	4d2b      	ldr	r5, [pc, #172]	; (267c <bus_fault.isra.0+0xb8>)
    25ce:	1ae4      	subs	r4, r4, r3
    25d0:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    25d2:	01a4      	lsls	r4, r4, #6
    25d4:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    25d8:	4607      	mov	r7, r0
    25da:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    25dc:	4828      	ldr	r0, [pc, #160]	; (2680 <bus_fault.isra.0+0xbc>)
    25de:	4641      	mov	r1, r8
    25e0:	f002 ff34 	bl	544c <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    25e4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    25e6:	04d1      	lsls	r1, r2, #19
    25e8:	d503      	bpl.n	25f2 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    25ea:	4826      	ldr	r0, [pc, #152]	; (2684 <bus_fault.isra.0+0xc0>)
    25ec:	4641      	mov	r1, r8
    25ee:	f002 ff2d 	bl	544c <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    25f2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    25f4:	051a      	lsls	r2, r3, #20
    25f6:	d504      	bpl.n	2602 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    25f8:	4823      	ldr	r0, [pc, #140]	; (2688 <bus_fault.isra.0+0xc4>)
    25fa:	f044 0101 	orr.w	r1, r4, #1
    25fe:	f002 ff25 	bl	544c <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2602:	4d1e      	ldr	r5, [pc, #120]	; (267c <bus_fault.isra.0+0xb8>)
    2604:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2606:	059b      	lsls	r3, r3, #22
    2608:	d512      	bpl.n	2630 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    260a:	f044 0801 	orr.w	r8, r4, #1
    260e:	481f      	ldr	r0, [pc, #124]	; (268c <bus_fault.isra.0+0xc8>)
    2610:	4641      	mov	r1, r8
    2612:	f002 ff1b 	bl	544c <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    2616:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2618:	6aab      	ldr	r3, [r5, #40]	; 0x28
    261a:	0418      	lsls	r0, r3, #16
    261c:	d508      	bpl.n	2630 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    261e:	481c      	ldr	r0, [pc, #112]	; (2690 <bus_fault.isra.0+0xcc>)
    2620:	4642      	mov	r2, r8
    2622:	f002 ff20 	bl	5466 <log_1>
			if (from_hard_fault) {
    2626:	b11f      	cbz	r7, 2630 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2628:	6aab      	ldr	r3, [r5, #40]	; 0x28
    262a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    262e:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2630:	4d12      	ldr	r5, [pc, #72]	; (267c <bus_fault.isra.0+0xb8>)
    2632:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2634:	0559      	lsls	r1, r3, #21
    2636:	d504      	bpl.n	2642 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    2638:	4816      	ldr	r0, [pc, #88]	; (2694 <bus_fault.isra.0+0xd0>)
    263a:	f044 0101 	orr.w	r1, r4, #1
    263e:	f002 ff05 	bl	544c <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2642:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2644:	05da      	lsls	r2, r3, #23
    2646:	d50d      	bpl.n	2664 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    2648:	4813      	ldr	r0, [pc, #76]	; (2698 <bus_fault.isra.0+0xd4>)
    264a:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    264e:	f002 fefd 	bl	544c <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2652:	4a0a      	ldr	r2, [pc, #40]	; (267c <bus_fault.isra.0+0xb8>)
    2654:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    2656:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2658:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    265c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    265e:	7030      	strb	r0, [r6, #0]
}
    2660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2664:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2666:	049b      	lsls	r3, r3, #18
    2668:	d5f3      	bpl.n	2652 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    266a:	480c      	ldr	r0, [pc, #48]	; (269c <bus_fault.isra.0+0xd8>)
    266c:	f044 0101 	orr.w	r1, r4, #1
    2670:	e7ed      	b.n	264e <bus_fault.isra.0+0x8a>
    2672:	bf00      	nop
    2674:	00006580 	.word	0x00006580
    2678:	000065c8 	.word	0x000065c8
    267c:	e000ed00 	.word	0xe000ed00
    2680:	00006deb 	.word	0x00006deb
    2684:	00006e01 	.word	0x00006e01
    2688:	00006c8f 	.word	0x00006c8f
    268c:	00006e12 	.word	0x00006e12
    2690:	00006e2b 	.word	0x00006e2b
    2694:	00006e40 	.word	0x00006e40
    2698:	00006e5b 	.word	0x00006e5b
    269c:	00006cef 	.word	0x00006cef

000026a0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    26a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    26a4:	4b57      	ldr	r3, [pc, #348]	; (2804 <z_arm_fault+0x164>)
    26a6:	685e      	ldr	r6, [r3, #4]
{
    26a8:	b08a      	sub	sp, #40	; 0x28
    26aa:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    26ac:	f3c6 0408 	ubfx	r4, r6, #0, #9
    26b0:	2500      	movs	r5, #0
    26b2:	f385 8811 	msr	BASEPRI, r5
    26b6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    26ba:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    26be:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    26c2:	d10d      	bne.n	26e0 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    26c4:	f002 030c 	and.w	r3, r2, #12
    26c8:	2b08      	cmp	r3, #8
    26ca:	d10b      	bne.n	26e4 <z_arm_fault+0x44>
    26cc:	494e      	ldr	r1, [pc, #312]	; (2808 <z_arm_fault+0x168>)
    26ce:	4b4f      	ldr	r3, [pc, #316]	; (280c <z_arm_fault+0x16c>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    26d0:	484f      	ldr	r0, [pc, #316]	; (2810 <z_arm_fault+0x170>)
    26d2:	1ac9      	subs	r1, r1, r3
    26d4:	08c9      	lsrs	r1, r1, #3
    26d6:	0189      	lsls	r1, r1, #6
    26d8:	f041 0101 	orr.w	r1, r1, #1
    26dc:	f002 feb6 	bl	544c <log_0>
		return NULL;
    26e0:	462f      	mov	r7, r5
    26e2:	e003      	b.n	26ec <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    26e4:	0712      	lsls	r2, r2, #28
    26e6:	d401      	bmi.n	26ec <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    26e8:	4607      	mov	r7, r0
			*nested_exc = true;
    26ea:	2501      	movs	r5, #1
	*recoverable = false;
    26ec:	2300      	movs	r3, #0
    26ee:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    26f2:	1ee3      	subs	r3, r4, #3
    26f4:	2b09      	cmp	r3, #9
    26f6:	d86b      	bhi.n	27d0 <z_arm_fault+0x130>
    26f8:	e8df f003 	tbb	[pc, r3]
    26fc:	3d5d5905 	.word	0x3d5d5905
    2700:	6a6a6a6a 	.word	0x6a6a6a6a
    2704:	616a      	.short	0x616a
    2706:	4b41      	ldr	r3, [pc, #260]	; (280c <z_arm_fault+0x16c>)
    2708:	4e3f      	ldr	r6, [pc, #252]	; (2808 <z_arm_fault+0x168>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    270a:	4842      	ldr	r0, [pc, #264]	; (2814 <z_arm_fault+0x174>)
    270c:	1af6      	subs	r6, r6, r3
    270e:	08f6      	lsrs	r6, r6, #3
    2710:	01b6      	lsls	r6, r6, #6
    2712:	f046 0601 	orr.w	r6, r6, #1
    2716:	4631      	mov	r1, r6
    2718:	f002 fe98 	bl	544c <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    271c:	4b39      	ldr	r3, [pc, #228]	; (2804 <z_arm_fault+0x164>)
    271e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    2720:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2724:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    2728:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    272c:	d005      	beq.n	273a <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    272e:	483a      	ldr	r0, [pc, #232]	; (2818 <z_arm_fault+0x178>)
    2730:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    2732:	f002 fe8b 	bl	544c <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2736:	2400      	movs	r4, #0
}
    2738:	e020      	b.n	277c <z_arm_fault+0xdc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    273c:	005b      	lsls	r3, r3, #1
    273e:	d51d      	bpl.n	277c <z_arm_fault+0xdc>
		PR_EXC("  Fault escalation (see below)");
    2740:	4836      	ldr	r0, [pc, #216]	; (281c <z_arm_fault+0x17c>)
    2742:	4631      	mov	r1, r6
    2744:	f002 fe82 	bl	544c <log_0>
		if (SCB_MMFSR != 0) {
    2748:	4b35      	ldr	r3, [pc, #212]	; (2820 <z_arm_fault+0x180>)
    274a:	781b      	ldrb	r3, [r3, #0]
    274c:	b133      	cbz	r3, 275c <z_arm_fault+0xbc>
			reason = mem_manage_fault(esf, 1, recoverable);
    274e:	f10d 0207 	add.w	r2, sp, #7
    2752:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2754:	4638      	mov	r0, r7
    2756:	f7ff fe57 	bl	2408 <mem_manage_fault>
    275a:	e00e      	b.n	277a <z_arm_fault+0xda>
		} else if (SCB_BFSR != 0) {
    275c:	4b31      	ldr	r3, [pc, #196]	; (2824 <z_arm_fault+0x184>)
    275e:	781b      	ldrb	r3, [r3, #0]
    2760:	b12b      	cbz	r3, 276e <z_arm_fault+0xce>
			reason = bus_fault(esf, 1, recoverable);
    2762:	f10d 0107 	add.w	r1, sp, #7
    2766:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    2768:	f7ff ff2c 	bl	25c4 <bus_fault.isra.0>
    276c:	e005      	b.n	277a <z_arm_fault+0xda>
		} else if (SCB_UFSR != 0) {
    276e:	4b2e      	ldr	r3, [pc, #184]	; (2828 <z_arm_fault+0x188>)
    2770:	881b      	ldrh	r3, [r3, #0]
    2772:	b29b      	uxth	r3, r3
    2774:	b113      	cbz	r3, 277c <z_arm_fault+0xdc>
			reason = usage_fault(esf);
    2776:	f7ff fec9 	bl	250c <usage_fault.isra.0>
    277a:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    277c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2780:	b993      	cbnz	r3, 27a8 <z_arm_fault+0x108>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2782:	2220      	movs	r2, #32
    2784:	4639      	mov	r1, r7
    2786:	a802      	add	r0, sp, #8
    2788:	f003 fa1f 	bl	5bca <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    278c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    278e:	b39d      	cbz	r5, 27f8 <z_arm_fault+0x158>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2790:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2794:	b922      	cbnz	r2, 27a0 <z_arm_fault+0x100>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2796:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    279a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    279e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    27a0:	a902      	add	r1, sp, #8
    27a2:	4620      	mov	r0, r4
    27a4:	f7ff fd90 	bl	22c8 <z_arm_fatal_error>
}
    27a8:	b00a      	add	sp, #40	; 0x28
    27aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    27ae:	f10d 0207 	add.w	r2, sp, #7
    27b2:	2100      	movs	r1, #0
    27b4:	e7ce      	b.n	2754 <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
    27b6:	f10d 0107 	add.w	r1, sp, #7
    27ba:	2000      	movs	r0, #0
    27bc:	e7d4      	b.n	2768 <z_arm_fault+0xc8>
    27be:	4912      	ldr	r1, [pc, #72]	; (2808 <z_arm_fault+0x168>)
    27c0:	4b12      	ldr	r3, [pc, #72]	; (280c <z_arm_fault+0x16c>)
	PR_FAULT_INFO(
    27c2:	481a      	ldr	r0, [pc, #104]	; (282c <z_arm_fault+0x18c>)
    27c4:	1ac9      	subs	r1, r1, r3
    27c6:	08c9      	lsrs	r1, r1, #3
    27c8:	0189      	lsls	r1, r1, #6
    27ca:	f041 0101 	orr.w	r1, r1, #1
    27ce:	e7b0      	b.n	2732 <z_arm_fault+0x92>
    27d0:	4a0e      	ldr	r2, [pc, #56]	; (280c <z_arm_fault+0x16c>)
    27d2:	4b0d      	ldr	r3, [pc, #52]	; (2808 <z_arm_fault+0x168>)
	PR_FAULT_INFO("***** %s %d) *****",
    27d4:	4816      	ldr	r0, [pc, #88]	; (2830 <z_arm_fault+0x190>)
    27d6:	4917      	ldr	r1, [pc, #92]	; (2834 <z_arm_fault+0x194>)
    27d8:	1a9b      	subs	r3, r3, r2
    27da:	08db      	lsrs	r3, r3, #3
    27dc:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    27e0:	ea4f 1383 	mov.w	r3, r3, lsl #6
    27e4:	bf18      	it	ne
    27e6:	4601      	movne	r1, r0
    27e8:	f043 0301 	orr.w	r3, r3, #1
    27ec:	4812      	ldr	r0, [pc, #72]	; (2838 <z_arm_fault+0x198>)
    27ee:	f1a4 0210 	sub.w	r2, r4, #16
    27f2:	f002 fe4c 	bl	548e <log_2>
    27f6:	e79e      	b.n	2736 <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    27f8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    27fc:	f023 0301 	bic.w	r3, r3, #1
    2800:	e7cd      	b.n	279e <z_arm_fault+0xfe>
    2802:	bf00      	nop
    2804:	e000ed00 	.word	0xe000ed00
    2808:	000065c8 	.word	0x000065c8
    280c:	00006580 	.word	0x00006580
    2810:	00006e73 	.word	0x00006e73
    2814:	00006e9e 	.word	0x00006e9e
    2818:	00006eb5 	.word	0x00006eb5
    281c:	00006ed6 	.word	0x00006ed6
    2820:	e000ed28 	.word	0xe000ed28
    2824:	e000ed29 	.word	0xe000ed29
    2828:	e000ed2a 	.word	0xe000ed2a
    282c:	00006ef5 	.word	0x00006ef5
    2830:	00006f40 	.word	0x00006f40
    2834:	00006f2b 	.word	0x00006f2b
    2838:	00006f59 	.word	0x00006f59

0000283c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    283c:	4a02      	ldr	r2, [pc, #8]	; (2848 <z_arm_fault_init+0xc>)
    283e:	6953      	ldr	r3, [r2, #20]
    2840:	f043 0310 	orr.w	r3, r3, #16
    2844:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    2846:	4770      	bx	lr
    2848:	e000ed00 	.word	0xe000ed00

0000284c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    284c:	4b04      	ldr	r3, [pc, #16]	; (2860 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    284e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2850:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    2852:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2854:	d003      	beq.n	285e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2856:	4903      	ldr	r1, [pc, #12]	; (2864 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    285c:	600a      	str	r2, [r1, #0]

0000285e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    285e:	4770      	bx	lr
	ldr r3, =_kernel
    2860:	20000af4 	.word	0x20000af4
	ldr r1, =_SCS_ICSR
    2864:	e000ed04 	.word	0xe000ed04

00002868 <z_arm_interrupt_init>:
    2868:	4804      	ldr	r0, [pc, #16]	; (287c <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    286a:	2300      	movs	r3, #0
    286c:	2120      	movs	r1, #32
    286e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2870:	3301      	adds	r3, #1
    2872:	2b30      	cmp	r3, #48	; 0x30
    2874:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2878:	d1f9      	bne.n	286e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    287a:	4770      	bx	lr
    287c:	e000e100 	.word	0xe000e100

00002880 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    2880:	b508      	push	{r3, lr}
	if (_current == thread) {
    2882:	4b0e      	ldr	r3, [pc, #56]	; (28bc <z_impl_k_thread_abort+0x3c>)
    2884:	689b      	ldr	r3, [r3, #8]
    2886:	4283      	cmp	r3, r0
    2888:	d107      	bne.n	289a <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    288a:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    288e:	b193      	cbz	r3, 28b6 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2890:	4a0b      	ldr	r2, [pc, #44]	; (28c0 <z_impl_k_thread_abort+0x40>)
    2892:	6853      	ldr	r3, [r2, #4]
    2894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2898:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    289a:	f001 fc77 	bl	418c <z_thread_single_abort>
	__asm__ volatile(
    289e:	f04f 0320 	mov.w	r3, #32
    28a2:	f3ef 8011 	mrs	r0, BASEPRI
    28a6:	f383 8811 	msr	BASEPRI, r3
    28aa:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    28ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    28b2:	f003 bc32 	b.w	611a <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    28b6:	f001 ff45 	bl	4744 <z_self_abort>
    28ba:	bf00      	nop
    28bc:	20000af4 	.word	0x20000af4
    28c0:	e000ed00 	.word	0xe000ed00

000028c4 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    28c4:	4b02      	ldr	r3, [pc, #8]	; (28d0 <z_arm_configure_static_mpu_regions+0xc>)
    28c6:	4a03      	ldr	r2, [pc, #12]	; (28d4 <z_arm_configure_static_mpu_regions+0x10>)
    28c8:	4803      	ldr	r0, [pc, #12]	; (28d8 <z_arm_configure_static_mpu_regions+0x14>)
    28ca:	2101      	movs	r1, #1
    28cc:	f000 b8b2 	b.w	2a34 <arm_core_mpu_configure_static_mpu_regions>
    28d0:	20040000 	.word	0x20040000
    28d4:	20000000 	.word	0x20000000
    28d8:	000066dc 	.word	0x000066dc

000028dc <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    28dc:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    28de:	4b05      	ldr	r3, [pc, #20]	; (28f4 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    28e0:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    28e2:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    28e4:	4a04      	ldr	r2, [pc, #16]	; (28f8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    28e6:	2120      	movs	r1, #32
    28e8:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    28ec:	4618      	mov	r0, r3
    28ee:	2101      	movs	r1, #1
    28f0:	f000 b8aa 	b.w	2a48 <arm_core_mpu_configure_dynamic_mpu_regions>
    28f4:	20000a44 	.word	0x20000a44
    28f8:	150b0000 	.word	0x150b0000

000028fc <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    28fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    28fe:	4f28      	ldr	r7, [pc, #160]	; (29a0 <mpu_configure_regions+0xa4>)
    2900:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2902:	2100      	movs	r1, #0
    2904:	42b1      	cmp	r1, r6
    2906:	da14      	bge.n	2932 <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
    2908:	6844      	ldr	r4, [r0, #4]
    290a:	2c00      	cmp	r4, #0
    290c:	d045      	beq.n	299a <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    290e:	b1c3      	cbz	r3, 2942 <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2910:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2914:	ea14 0f0c 	tst.w	r4, ip
    2918:	d00d      	beq.n	2936 <mpu_configure_regions+0x3a>
    291a:	4a22      	ldr	r2, [pc, #136]	; (29a4 <mpu_configure_regions+0xa8>)
    291c:	4b22      	ldr	r3, [pc, #136]	; (29a8 <mpu_configure_regions+0xac>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    291e:	4823      	ldr	r0, [pc, #140]	; (29ac <mpu_configure_regions+0xb0>)
    2920:	1ad2      	subs	r2, r2, r3
    2922:	08d2      	lsrs	r2, r2, #3
    2924:	0192      	lsls	r2, r2, #6
    2926:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    292a:	f002 fd9c 	bl	5466 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    292e:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    2932:	4610      	mov	r0, r2
    2934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    2936:	2c1f      	cmp	r4, #31
    2938:	d9ef      	bls.n	291a <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    293a:	6805      	ldr	r5, [r0, #0]
		&&
    293c:	ea1c 0f05 	tst.w	ip, r5
    2940:	d1eb      	bne.n	291a <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    2942:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2944:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    2946:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
    294a:	6802      	ldr	r2, [r0, #0]
    294c:	d916      	bls.n	297c <mpu_configure_regions+0x80>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    294e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    2952:	d815      	bhi.n	2980 <mpu_configure_regions+0x84>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2954:	3c01      	subs	r4, #1
    2956:	fab4 f484 	clz	r4, r4
    295a:	f1c4 041f 	rsb	r4, r4, #31
    295e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    2960:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2962:	ea4c 0404 	orr.w	r4, ip, r4
    2966:	d90d      	bls.n	2984 <mpu_configure_regions+0x88>
    2968:	4a0e      	ldr	r2, [pc, #56]	; (29a4 <mpu_configure_regions+0xa8>)
    296a:	4b0f      	ldr	r3, [pc, #60]	; (29a8 <mpu_configure_regions+0xac>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    296c:	4810      	ldr	r0, [pc, #64]	; (29b0 <mpu_configure_regions+0xb4>)
    296e:	1ad2      	subs	r2, r2, r3
    2970:	08d2      	lsrs	r2, r2, #3
    2972:	0192      	lsls	r2, r2, #6
    2974:	f042 0201 	orr.w	r2, r2, #1
    2978:	4629      	mov	r1, r5
    297a:	e7d6      	b.n	292a <mpu_configure_regions+0x2e>
		return REGION_32B;
    297c:	2408      	movs	r4, #8
    297e:	e7ef      	b.n	2960 <mpu_configure_regions+0x64>
		return REGION_4G;
    2980:	243e      	movs	r4, #62	; 0x3e
    2982:	e7ed      	b.n	2960 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2984:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    2988:	432a      	orrs	r2, r5
    298a:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    298e:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    2992:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2994:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2996:	613c      	str	r4, [r7, #16]
		reg_index++;
    2998:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    299a:	3101      	adds	r1, #1
    299c:	300c      	adds	r0, #12
    299e:	e7b1      	b.n	2904 <mpu_configure_regions+0x8>
    29a0:	e000ed90 	.word	0xe000ed90
    29a4:	000065c0 	.word	0x000065c0
    29a8:	00006580 	.word	0x00006580
    29ac:	00006f70 	.word	0x00006f70
    29b0:	00006f93 	.word	0x00006f93

000029b4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    29b4:	4b03      	ldr	r3, [pc, #12]	; (29c4 <arm_core_mpu_enable+0x10>)
    29b6:	2205      	movs	r2, #5
    29b8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    29ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    29be:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    29c2:	4770      	bx	lr
    29c4:	e000ed90 	.word	0xe000ed90

000029c8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    29c8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    29cc:	4b01      	ldr	r3, [pc, #4]	; (29d4 <arm_core_mpu_disable+0xc>)
    29ce:	2200      	movs	r2, #0
    29d0:	605a      	str	r2, [r3, #4]
}
    29d2:	4770      	bx	lr
    29d4:	e000ed90 	.word	0xe000ed90

000029d8 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    29d8:	4913      	ldr	r1, [pc, #76]	; (2a28 <arm_mpu_init+0x50>)
    29da:	6808      	ldr	r0, [r1, #0]
    29dc:	2808      	cmp	r0, #8
{
    29de:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    29e0:	d81e      	bhi.n	2a20 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    29e2:	f7ff fff1 	bl	29c8 <arm_core_mpu_disable>
	MPU->RNR = index;
    29e6:	4c11      	ldr	r4, [pc, #68]	; (2a2c <arm_mpu_init+0x54>)
    29e8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    29ea:	2200      	movs	r2, #0
    29ec:	4290      	cmp	r0, r2
    29ee:	f101 010c 	add.w	r1, r1, #12
    29f2:	d105      	bne.n	2a00 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    29f4:	4b0e      	ldr	r3, [pc, #56]	; (2a30 <arm_mpu_init+0x58>)
    29f6:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    29f8:	f7ff ffdc 	bl	29b4 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    29fc:	2000      	movs	r0, #0
}
    29fe:	bd10      	pop	{r4, pc}
    2a00:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2a02:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    2a06:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2a0a:	4313      	orrs	r3, r2
    2a0c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2a10:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2a12:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2a16:	f043 0301 	orr.w	r3, r3, #1
    2a1a:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2a1c:	3201      	adds	r2, #1
    2a1e:	e7e5      	b.n	29ec <arm_mpu_init+0x14>
		return -1;
    2a20:	f04f 30ff 	mov.w	r0, #4294967295
    2a24:	e7eb      	b.n	29fe <arm_mpu_init+0x26>
    2a26:	bf00      	nop
    2a28:	000066e8 	.word	0x000066e8
    2a2c:	e000ed90 	.word	0xe000ed90
    2a30:	20000f59 	.word	0x20000f59

00002a34 <arm_core_mpu_configure_static_mpu_regions>:
{
    2a34:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2a36:	4c03      	ldr	r4, [pc, #12]	; (2a44 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2a38:	2301      	movs	r3, #1
    2a3a:	7822      	ldrb	r2, [r4, #0]
    2a3c:	f7ff ff5e 	bl	28fc <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2a40:	7020      	strb	r0, [r4, #0]
}
    2a42:	bd10      	pop	{r4, pc}
    2a44:	20000f59 	.word	0x20000f59

00002a48 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    2a48:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    2a4a:	4a08      	ldr	r2, [pc, #32]	; (2a6c <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    2a4c:	2300      	movs	r3, #0
    2a4e:	7812      	ldrb	r2, [r2, #0]
    2a50:	f7ff ff54 	bl	28fc <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2a54:	f110 0f16 	cmn.w	r0, #22
    2a58:	d003      	beq.n	2a62 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    2a5a:	4b05      	ldr	r3, [pc, #20]	; (2a70 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    2a5c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2a5e:	2807      	cmp	r0, #7
    2a60:	dd00      	ble.n	2a64 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    2a62:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    2a64:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    2a66:	611a      	str	r2, [r3, #16]
    2a68:	3001      	adds	r0, #1
    2a6a:	e7f8      	b.n	2a5e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    2a6c:	20000f59 	.word	0x20000f59
    2a70:	e000ed90 	.word	0xe000ed90

00002a74 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2a74:	4b01      	ldr	r3, [pc, #4]	; (2a7c <__stdout_hook_install+0x8>)
    2a76:	6018      	str	r0, [r3, #0]
}
    2a78:	4770      	bx	lr
    2a7a:	bf00      	nop
    2a7c:	20000028 	.word	0x20000028

00002a80 <nordicsemi_nrf52_init>:
    2a80:	f04f 0320 	mov.w	r3, #32
    2a84:	f3ef 8211 	mrs	r2, BASEPRI
    2a88:	f383 8811 	msr	BASEPRI, r3
    2a8c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2a90:	4906      	ldr	r1, [pc, #24]	; (2aac <nordicsemi_nrf52_init+0x2c>)
    2a92:	2301      	movs	r3, #1
    2a94:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2a98:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2a9c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    2aa0:	f382 8811 	msr	BASEPRI, r2
    2aa4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2aa8:	2000      	movs	r0, #0
    2aaa:	4770      	bx	lr
    2aac:	4001e000 	.word	0x4001e000

00002ab0 <sys_arch_reboot>:
    *p_gpregret = val;
    2ab0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ab4:	b2c0      	uxtb	r0, r0
    2ab6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2aba:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2abe:	4905      	ldr	r1, [pc, #20]	; (2ad4 <sys_arch_reboot+0x24>)
    2ac0:	4b05      	ldr	r3, [pc, #20]	; (2ad8 <sys_arch_reboot+0x28>)
    2ac2:	68ca      	ldr	r2, [r1, #12]
    2ac4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2ac8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2aca:	60cb      	str	r3, [r1, #12]
    2acc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2ad0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2ad2:	e7fd      	b.n	2ad0 <sys_arch_reboot+0x20>
    2ad4:	e000ed00 	.word	0xe000ed00
    2ad8:	05fa0004 	.word	0x05fa0004

00002adc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2adc:	b120      	cbz	r0, 2ae8 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    2ade:	4b03      	ldr	r3, [pc, #12]	; (2aec <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2ae0:	0180      	lsls	r0, r0, #6
    2ae2:	f043 0301 	orr.w	r3, r3, #1
    2ae6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2ae8:	4770      	bx	lr
    2aea:	bf00      	nop
    2aec:	00006620 	.word	0x00006620

00002af0 <init>:
	return 0;
}
#endif /* USE_RESET_GPIO */

static int init(const struct device *dev)
{
    2af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2af4:	4a38      	ldr	r2, [pc, #224]	; (2bd8 <init+0xe8>)
    2af6:	4c39      	ldr	r4, [pc, #228]	; (2bdc <init+0xec>)
    2af8:	4d39      	ldr	r5, [pc, #228]	; (2be0 <init+0xf0>)
    2afa:	1aa4      	subs	r4, r4, r2
    2afc:	08e4      	lsrs	r4, r4, #3
			cfg->port, cfg->pin, flags);
		if (rc) {
			LOG_ERR("Error %d while configuring pin P%d.%02d (%s)",
				rc, cfg->port, cfg->pin, cfg->name);
		} else if (cfg->info) {
			LOG_INF("%s is %s",
    2afe:	ea4f 1884 	mov.w	r8, r4, lsl #6
{
    2b02:	b087      	sub	sp, #28
	for (int i = 0; i < ARRAY_SIZE(routing_switches); ++i) {
    2b04:	2600      	movs	r6, #0
    2b06:	46aa      	mov	sl, r5
			LOG_INF("%s is %s",
    2b08:	f048 0803 	orr.w	r8, r8, #3
		gpio_flags_t flags = cfg->flags;
    2b0c:	796b      	ldrb	r3, [r5, #5]
		if (!device_is_ready(cfg->gpio)) {
    2b0e:	682f      	ldr	r7, [r5, #0]
		gpio_flags_t flags = cfg->flags;
    2b10:	9300      	str	r3, [sp, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_ready(dev);
    2b12:	4638      	mov	r0, r7
    2b14:	f000 fec2 	bl	389c <z_device_ready>
		if (!device_is_ready(cfg->gpio)) {
    2b18:	9b00      	ldr	r3, [sp, #0]
    2b1a:	b960      	cbnz	r0, 2b36 <init+0x46>
			LOG_ERR("%s is not ready", cfg->gpio->name);
    2b1c:	01a2      	lsls	r2, r4, #6
    2b1e:	6839      	ldr	r1, [r7, #0]
    2b20:	4830      	ldr	r0, [pc, #192]	; (2be4 <init+0xf4>)
    2b22:	f042 0201 	orr.w	r2, r2, #1
    2b26:	f002 fc9e 	bl	5466 <log_1>
			return -ENODEV;
    2b2a:	f06f 0712 	mvn.w	r7, #18
#endif

	LOG_INF("Board configured.");

	return 0;
}
    2b2e:	4638      	mov	r0, r7
    2b30:	b007      	add	sp, #28
    2b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		flags |= (cfg->on ? GPIO_OUTPUT_ACTIVE
    2b36:	f895 9006 	ldrb.w	r9, [r5, #6]
		rc = gpio_pin_configure(cfg->gpio, cfg->pin, flags);
    2b3a:	7929      	ldrb	r1, [r5, #4]
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    2b3c:	f8d7 b00c 	ldr.w	fp, [r7, #12]
				  : GPIO_OUTPUT_INACTIVE);
    2b40:	f1b9 0f00 	cmp.w	r9, #0
    2b44:	bf14      	ite	ne
    2b46:	f44f 52d0 	movne.w	r2, #6656	; 0x1a00
    2b4a:	f44f 52b0 	moveq.w	r2, #5632	; 0x1600
		flags |= (cfg->on ? GPIO_OUTPUT_ACTIVE
    2b4e:	431a      	orrs	r2, r3
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    2b50:	07d8      	lsls	r0, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
    2b52:	bf48      	it	mi
    2b54:	f482 52e0 	eormi.w	r2, r2, #7168	; 0x1c00
	return api->pin_configure(port, pin, flags);
    2b58:	68bb      	ldr	r3, [r7, #8]
    2b5a:	4638      	mov	r0, r7
    2b5c:	681b      	ldr	r3, [r3, #0]
    2b5e:	e9cd 1200 	strd	r1, r2, [sp]
    2b62:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
    2b64:	9900      	ldr	r1, [sp, #0]
    2b66:	4607      	mov	r7, r0
    2b68:	bb20      	cbnz	r0, 2bb4 <init+0xc4>
		return ret;
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    2b6a:	9a01      	ldr	r2, [sp, #4]
    2b6c:	f8db 3000 	ldr.w	r3, [fp]
    2b70:	2001      	movs	r0, #1
    2b72:	fa00 f101 	lsl.w	r1, r0, r1
    2b76:	07d2      	lsls	r2, r2, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    2b78:	bf4c      	ite	mi
    2b7a:	430b      	orrmi	r3, r1
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    2b7c:	438b      	bicpl	r3, r1
		if (rc) {
    2b7e:	f8cb 3000 	str.w	r3, [fp]
		} else if (cfg->info) {
    2b82:	7a2b      	ldrb	r3, [r5, #8]
    2b84:	b153      	cbz	r3, 2b9c <init+0xac>
			LOG_INF("%s is %s",
    2b86:	4918      	ldr	r1, [pc, #96]	; (2be8 <init+0xf8>)
    2b88:	4a18      	ldr	r2, [pc, #96]	; (2bec <init+0xfc>)
    2b8a:	4819      	ldr	r0, [pc, #100]	; (2bf0 <init+0x100>)
    2b8c:	f1b9 0f00 	cmp.w	r9, #0
    2b90:	bf08      	it	eq
    2b92:	460a      	moveq	r2, r1
    2b94:	4643      	mov	r3, r8
    2b96:	68e9      	ldr	r1, [r5, #12]
    2b98:	f002 fc79 	bl	548e <log_2>
	for (int i = 0; i < ARRAY_SIZE(routing_switches); ++i) {
    2b9c:	3601      	adds	r6, #1
    2b9e:	2e0e      	cmp	r6, #14
    2ba0:	f105 0510 	add.w	r5, r5, #16
    2ba4:	d1b2      	bne.n	2b0c <init+0x1c>
	LOG_INF("Board configured.");
    2ba6:	01a1      	lsls	r1, r4, #6
    2ba8:	4812      	ldr	r0, [pc, #72]	; (2bf4 <init+0x104>)
    2baa:	f041 0103 	orr.w	r1, r1, #3
    2bae:	f002 fc4d 	bl	544c <log_0>
	return 0;
    2bb2:	e7bc      	b.n	2b2e <init+0x3e>
			LOG_ERR("Error %d while configuring pin P%d.%02d (%s)",
    2bb4:	eb0a 1606 	add.w	r6, sl, r6, lsl #4
    2bb8:	01a3      	lsls	r3, r4, #6
    2bba:	79f2      	ldrb	r2, [r6, #7]
    2bbc:	9002      	str	r0, [sp, #8]
    2bbe:	e9cd 2103 	strd	r2, r1, [sp, #12]
    2bc2:	68f2      	ldr	r2, [r6, #12]
    2bc4:	9205      	str	r2, [sp, #20]
    2bc6:	480c      	ldr	r0, [pc, #48]	; (2bf8 <init+0x108>)
    2bc8:	f043 0301 	orr.w	r3, r3, #1
    2bcc:	2204      	movs	r2, #4
    2bce:	a902      	add	r1, sp, #8
    2bd0:	f002 fc92 	bl	54f8 <log_n>
		if (rc) {
    2bd4:	e7ab      	b.n	2b2e <init+0x3e>
    2bd6:	bf00      	nop
    2bd8:	00006580 	.word	0x00006580
    2bdc:	00006588 	.word	0x00006588
    2be0:	00006708 	.word	0x00006708
    2be4:	00006fcc 	.word	0x00006fcc
    2be8:	00007011 	.word	0x00007011
    2bec:	00007009 	.word	0x00007009
    2bf0:	0000701a 	.word	0x0000701a
    2bf4:	00007023 	.word	0x00007023
    2bf8:	00006fdc 	.word	0x00006fdc

00002bfc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2bfc:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    2bfe:	4b09      	ldr	r3, [pc, #36]	; (2c24 <gpio_nrfx_init+0x28>)
    2c00:	781a      	ldrb	r2, [r3, #0]
    2c02:	b96a      	cbnz	r2, 2c20 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    2c04:	2101      	movs	r1, #1
    2c06:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2c08:	2006      	movs	r0, #6
    2c0a:	2105      	movs	r1, #5
    2c0c:	f7ff fad6 	bl	21bc <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    2c10:	2006      	movs	r0, #6
    2c12:	f7ff fab5 	bl	2180 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    2c16:	4b04      	ldr	r3, [pc, #16]	; (2c28 <gpio_nrfx_init+0x2c>)
    2c18:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2c1c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    2c20:	2000      	movs	r0, #0
    2c22:	bd08      	pop	{r3, pc}
    2c24:	20000f5a 	.word	0x20000f5a
    2c28:	40006000 	.word	0x40006000

00002c2c <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2c2c:	4b2b      	ldr	r3, [pc, #172]	; (2cdc <gpio_nrfx_config+0xb0>)
{
    2c2e:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    2c30:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2c32:	482b      	ldr	r0, [pc, #172]	; (2ce0 <gpio_nrfx_config+0xb4>)
    2c34:	4013      	ands	r3, r2
    2c36:	4283      	cmp	r3, r0
    2c38:	d041      	beq.n	2cbe <gpio_nrfx_config+0x92>
    2c3a:	d80d      	bhi.n	2c58 <gpio_nrfx_config+0x2c>
    2c3c:	2b06      	cmp	r3, #6
    2c3e:	d015      	beq.n	2c6c <gpio_nrfx_config+0x40>
    2c40:	d805      	bhi.n	2c4e <gpio_nrfx_config+0x22>
    2c42:	b19b      	cbz	r3, 2c6c <gpio_nrfx_config+0x40>
    2c44:	2b02      	cmp	r3, #2
    2c46:	d03c      	beq.n	2cc2 <gpio_nrfx_config+0x96>
    2c48:	f06f 0015 	mvn.w	r0, #21
    2c4c:	e036      	b.n	2cbc <gpio_nrfx_config+0x90>
    2c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2c52:	d1f9      	bne.n	2c48 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    2c54:	2301      	movs	r3, #1
    2c56:	e009      	b.n	2c6c <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2c58:	4822      	ldr	r0, [pc, #136]	; (2ce4 <gpio_nrfx_config+0xb8>)
    2c5a:	4283      	cmp	r3, r0
    2c5c:	d033      	beq.n	2cc6 <gpio_nrfx_config+0x9a>
    2c5e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    2c62:	d032      	beq.n	2cca <gpio_nrfx_config+0x9e>
    2c64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2c68:	d1ee      	bne.n	2c48 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    2c6a:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    2c6c:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    2c6e:	bf54      	ite	pl
    2c70:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    2c74:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    2c76:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    2c7a:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    2c7c:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    2c80:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    2c84:	d507      	bpl.n	2c96 <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    2c86:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    2c8a:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    2c8c:	d01f      	beq.n	2cce <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
    2c8e:	2201      	movs	r2, #1
    2c90:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    2c92:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    2c96:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
    2c98:	4c13      	ldr	r4, [pc, #76]	; (2ce8 <gpio_nrfx_config+0xbc>)
    2c9a:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    2c9c:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    2ca0:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
    2ca4:	bf18      	it	ne
    2ca6:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    2caa:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2cae:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    2cb2:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2cb6:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
    2cba:	2000      	movs	r0, #0
}
    2cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    2cbe:	2307      	movs	r3, #7
    2cc0:	e7d4      	b.n	2c6c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    2cc2:	2304      	movs	r3, #4
    2cc4:	e7d2      	b.n	2c6c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    2cc6:	2305      	movs	r3, #5
    2cc8:	e7d0      	b.n	2c6c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    2cca:	2303      	movs	r3, #3
    2ccc:	e7ce      	b.n	2c6c <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    2cce:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    2cd0:	bf42      	ittt	mi
    2cd2:	2201      	movmi	r2, #1
    2cd4:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    2cd6:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
    2cda:	e7dc      	b.n	2c96 <gpio_nrfx_config+0x6a>
    2cdc:	00f00006 	.word	0x00f00006
    2ce0:	00100006 	.word	0x00100006
    2ce4:	00400002 	.word	0x00400002
    2ce8:	50000300 	.word	0x50000300

00002cec <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    2cec:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    2cf0:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    2cf2:	4b08      	ldr	r3, [pc, #32]	; (2d14 <nrf_gpio_cfg_sense_set+0x28>)
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2cf4:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    2cf6:	bf18      	it	ne
    2cf8:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    2cfc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2d00:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
    2d04:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    2d08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    2d0c:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
    2d10:	4770      	bx	lr
    2d12:	bf00      	nop
    2d14:	50000300 	.word	0x50000300

00002d18 <gpio_nrfx_pin_interrupt_configure>:
{
    2d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2d1a:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2d1c:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
    2d1e:	68c7      	ldr	r7, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2d20:	7a09      	ldrb	r1, [r1, #8]
    2d22:	f006 051f 	and.w	r5, r6, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
    2d26:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    2d2a:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
    2d2e:	d110      	bne.n	2d52 <gpio_nrfx_pin_interrupt_configure+0x3a>
    return pin_number >> 5;
    2d30:	0968      	lsrs	r0, r5, #5
        case 1: return NRF_P1;
    2d32:	2801      	cmp	r0, #1
    *p_pin = pin_number & 0x1F;
    2d34:	f005 011f 	and.w	r1, r5, #31
        case 1: return NRF_P1;
    2d38:	485d      	ldr	r0, [pc, #372]	; (2eb0 <gpio_nrfx_pin_interrupt_configure+0x198>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2d3a:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
        case 1: return NRF_P1;
    2d3e:	bf18      	it	ne
    2d40:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2d44:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    2d48:	07c8      	lsls	r0, r1, #31
    2d4a:	d507      	bpl.n	2d5c <gpio_nrfx_pin_interrupt_configure+0x44>
		return -ENOTSUP;
    2d4c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    2d50:	e093      	b.n	2e7a <gpio_nrfx_pin_interrupt_configure+0x162>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    2d52:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    2d56:	68f9      	ldr	r1, [r7, #12]
    2d58:	f000 8091 	beq.w	2e7e <gpio_nrfx_pin_interrupt_configure+0x166>
    2d5c:	68f8      	ldr	r0, [r7, #12]
    2d5e:	2101      	movs	r1, #1
    2d60:	40b1      	lsls	r1, r6
    2d62:	4301      	orrs	r1, r0
    2d64:	6978      	ldr	r0, [r7, #20]
    2d66:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    2d68:	2101      	movs	r1, #1
    2d6a:	40b1      	lsls	r1, r6
    2d6c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    2d70:	69ba      	ldr	r2, [r7, #24]
    2d72:	bf0c      	ite	eq
    2d74:	4308      	orreq	r0, r1
    2d76:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    2d78:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    2d7c:	bf0c      	ite	eq
    2d7e:	430a      	orreq	r2, r1
    2d80:	438a      	bicne	r2, r1
    2d82:	61ba      	str	r2, [r7, #24]
    2d84:	693a      	ldr	r2, [r7, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    2d86:	6178      	str	r0, [r7, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    2d88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    2d8c:	bf0c      	ite	eq
    2d8e:	4311      	orreq	r1, r2
    2d90:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    2d94:	4a47      	ldr	r2, [pc, #284]	; (2eb4 <gpio_nrfx_pin_interrupt_configure+0x19c>)
    2d96:	6139      	str	r1, [r7, #16]
    2d98:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2d9c:	2000      	movs	r0, #0
    2d9e:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2da0:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    2da4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    2da8:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    2dac:	428d      	cmp	r5, r1
    2dae:	d16b      	bne.n	2e88 <gpio_nrfx_pin_interrupt_configure+0x170>
		    && (intenset & BIT(i))) {
    2db0:	fa23 f100 	lsr.w	r1, r3, r0
    2db4:	07c9      	lsls	r1, r1, #31
    2db6:	d567      	bpl.n	2e88 <gpio_nrfx_pin_interrupt_configure+0x170>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    2db8:	0083      	lsls	r3, r0, #2
    2dba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2dbe:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    2dc2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    2dc6:	f021 0101 	bic.w	r1, r1, #1
    2dca:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    2dce:	2301      	movs	r3, #1
    2dd0:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    2dd2:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    2dd6:	b2c0      	uxtb	r0, r0
    2dd8:	f000 fcaa 	bl	3730 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    2ddc:	4628      	mov	r0, r5
    2dde:	2100      	movs	r1, #0
    2de0:	f7ff ff84 	bl	2cec <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    2de4:	68f8      	ldr	r0, [r7, #12]
    2de6:	40f0      	lsrs	r0, r6
    2de8:	f010 0001 	ands.w	r0, r0, #1
    2dec:	d045      	beq.n	2e7a <gpio_nrfx_pin_interrupt_configure+0x162>
		if (data->trig_edge & BIT(pin)) {
    2dee:	6978      	ldr	r0, [r7, #20]
    2df0:	40f0      	lsrs	r0, r6
    2df2:	f010 0401 	ands.w	r4, r0, #1
    2df6:	d04e      	beq.n	2e96 <gpio_nrfx_pin_interrupt_configure+0x17e>
			if (data->double_edge & BIT(pin)) {
    2df8:	69bb      	ldr	r3, [r7, #24]
    2dfa:	40f3      	lsrs	r3, r6
    2dfc:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    2dfe:	bf5f      	itttt	pl
    2e00:	6939      	ldrpl	r1, [r7, #16]
    2e02:	fa21 f606 	lsrpl.w	r6, r1, r6
    2e06:	f006 0601 	andpl.w	r6, r6, #1
    2e0a:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    2e0e:	f10d 0007 	add.w	r0, sp, #7
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    2e12:	bf54      	ite	pl
    2e14:	b2f6      	uxtbpl	r6, r6
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    2e16:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    2e18:	f000 fcac 	bl	3774 <nrfx_gpiote_channel_alloc>
    2e1c:	4b26      	ldr	r3, [pc, #152]	; (2eb8 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
    2e1e:	4298      	cmp	r0, r3
    2e20:	d136      	bne.n	2e90 <gpio_nrfx_pin_interrupt_configure+0x178>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    2e22:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2e26:	008b      	lsls	r3, r1, #2
    2e28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2e2c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2e30:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2e32:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    2e36:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
    2e3a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    2e3e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2e42:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    2e46:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
    2e4a:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
    2e4c:	008a      	lsls	r2, r1, #2
    2e4e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2e52:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2e56:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2e5a:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2e5c:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2e60:	6010      	str	r0, [r2, #0]
    2e62:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    2e64:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    2e68:	f042 0201 	orr.w	r2, r2, #1
    2e6c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
    2e70:	4a10      	ldr	r2, [pc, #64]	; (2eb4 <gpio_nrfx_pin_interrupt_configure+0x19c>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    2e72:	2301      	movs	r3, #1
    2e74:	408b      	lsls	r3, r1
    2e76:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    2e7a:	b003      	add	sp, #12
    2e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    2e7e:	2001      	movs	r0, #1
    2e80:	40b0      	lsls	r0, r6
    2e82:	ea21 0100 	bic.w	r1, r1, r0
    2e86:	e76d      	b.n	2d64 <gpio_nrfx_pin_interrupt_configure+0x4c>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2e88:	3001      	adds	r0, #1
    2e8a:	2808      	cmp	r0, #8
    2e8c:	d188      	bne.n	2da0 <gpio_nrfx_pin_interrupt_configure+0x88>
    2e8e:	e7a5      	b.n	2ddc <gpio_nrfx_pin_interrupt_configure+0xc4>
		return -ENODEV;
    2e90:	f06f 0012 	mvn.w	r0, #18
    2e94:	e7f1      	b.n	2e7a <gpio_nrfx_pin_interrupt_configure+0x162>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    2e96:	6939      	ldr	r1, [r7, #16]
    2e98:	40f1      	lsrs	r1, r6
    2e9a:	f001 0101 	and.w	r1, r1, #1
    2e9e:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    2ea2:	4628      	mov	r0, r5
    2ea4:	b2c9      	uxtb	r1, r1
    2ea6:	f7ff ff21 	bl	2cec <nrf_gpio_cfg_sense_set>
	int res = 0;
    2eaa:	4620      	mov	r0, r4
    2eac:	e7e5      	b.n	2e7a <gpio_nrfx_pin_interrupt_configure+0x162>
    2eae:	bf00      	nop
    2eb0:	50000300 	.word	0x50000300
    2eb4:	40006000 	.word	0x40006000
    2eb8:	0bad0000 	.word	0x0bad0000

00002ebc <gpiote_event_handler>:
{
    2ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    2ebe:	2600      	movs	r6, #0
    2ec0:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2ec4:	4d26      	ldr	r5, [pc, #152]	; (2f60 <gpiote_event_handler+0xa4>)
    2ec6:	682c      	ldr	r4, [r5, #0]
	if (port_event) {
    2ec8:	b14c      	cbz	r4, 2ede <gpiote_event_handler+0x22>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
    2eca:	4826      	ldr	r0, [pc, #152]	; (2f64 <gpiote_event_handler+0xa8>)
    2ecc:	f002 ff3a 	bl	5d44 <check_level_trigger_pins>
		fired_triggers[0] =
    2ed0:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
    2ed2:	4825      	ldr	r0, [pc, #148]	; (2f68 <gpiote_event_handler+0xac>)
    2ed4:	f002 ff36 	bl	5d44 <check_level_trigger_pins>
		fired_triggers[1] =
    2ed8:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2eda:	602e      	str	r6, [r5, #0]
    2edc:	682b      	ldr	r3, [r5, #0]
    return p_reg->INTENSET & mask;
    2ede:	4d23      	ldr	r5, [pc, #140]	; (2f6c <gpiote_event_handler+0xb0>)
{
    2ee0:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    2ee2:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2ee4:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
    2ee6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    2eea:	fa06 f102 	lsl.w	r1, r6, r2
    2eee:	4219      	tst	r1, r3
    2ef0:	d01b      	beq.n	2f2a <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2ef2:	0091      	lsls	r1, r2, #2
    2ef4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2ef8:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
    2efc:	680b      	ldr	r3, [r1, #0]
    2efe:	b1a3      	cbz	r3, 2f2a <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2f00:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    2f04:	af02      	add	r7, sp, #8
    2f06:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2f0a:	f8c1 c000 	str.w	ip, [r1]
    2f0e:	f3c3 3040 	ubfx	r0, r3, #13, #1
    2f12:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    2f16:	f3c3 2304 	ubfx	r3, r3, #8, #5
    2f1a:	f850 7c08 	ldr.w	r7, [r0, #-8]
    2f1e:	fa06 f303 	lsl.w	r3, r6, r3
    2f22:	433b      	orrs	r3, r7
    2f24:	f840 3c08 	str.w	r3, [r0, #-8]
    2f28:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2f2a:	3201      	adds	r2, #1
    2f2c:	2a08      	cmp	r2, #8
    2f2e:	d1da      	bne.n	2ee6 <gpiote_event_handler+0x2a>
	if (fired_triggers[0]) {
    2f30:	9a00      	ldr	r2, [sp, #0]
    2f32:	b11a      	cbz	r2, 2f3c <gpiote_event_handler+0x80>
	gpio_fire_callbacks(list, port, pins);
    2f34:	490b      	ldr	r1, [pc, #44]	; (2f64 <gpiote_event_handler+0xa8>)
    2f36:	480e      	ldr	r0, [pc, #56]	; (2f70 <gpiote_event_handler+0xb4>)
    2f38:	f002 fe9a 	bl	5c70 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
    2f3c:	9a01      	ldr	r2, [sp, #4]
    2f3e:	b11a      	cbz	r2, 2f48 <gpiote_event_handler+0x8c>
	gpio_fire_callbacks(list, port, pins);
    2f40:	4909      	ldr	r1, [pc, #36]	; (2f68 <gpiote_event_handler+0xac>)
    2f42:	480c      	ldr	r0, [pc, #48]	; (2f74 <gpiote_event_handler+0xb8>)
    2f44:	f002 fe94 	bl	5c70 <gpio_fire_callbacks>
	if (port_event) {
    2f48:	b144      	cbz	r4, 2f5c <gpiote_event_handler+0xa0>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    2f4a:	4806      	ldr	r0, [pc, #24]	; (2f64 <gpiote_event_handler+0xa8>)
    2f4c:	f002 ff23 	bl	5d96 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    2f50:	4805      	ldr	r0, [pc, #20]	; (2f68 <gpiote_event_handler+0xac>)
}
    2f52:	b003      	add	sp, #12
    2f54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    2f58:	f002 bf1d 	b.w	5d96 <cfg_level_pins>
}
    2f5c:	b003      	add	sp, #12
    2f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f60:	4000617c 	.word	0x4000617c
    2f64:	20000130 	.word	0x20000130
    2f68:	20000140 	.word	0x20000140
    2f6c:	40006000 	.word	0x40006000
    2f70:	20000a54 	.word	0x20000a54
    2f74:	20000a70 	.word	0x20000a70

00002f78 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2f78:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2f7a:	794b      	ldrb	r3, [r1, #5]
    2f7c:	2b01      	cmp	r3, #1
    2f7e:	d029      	beq.n	2fd4 <uarte_nrfx_configure+0x5c>
    2f80:	2b03      	cmp	r3, #3
    2f82:	d124      	bne.n	2fce <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2f84:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2f86:	798b      	ldrb	r3, [r1, #6]
    2f88:	2b03      	cmp	r3, #3
    2f8a:	d120      	bne.n	2fce <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2f8c:	79cc      	ldrb	r4, [r1, #7]
    2f8e:	b124      	cbz	r4, 2f9a <uarte_nrfx_configure+0x22>
    2f90:	2c01      	cmp	r4, #1
    2f92:	d11c      	bne.n	2fce <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    2f94:	6843      	ldr	r3, [r0, #4]
    2f96:	791b      	ldrb	r3, [r3, #4]
    2f98:	b1cb      	cbz	r3, 2fce <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2f9a:	790a      	ldrb	r2, [r1, #4]
    2f9c:	b112      	cbz	r2, 2fa4 <uarte_nrfx_configure+0x2c>
    2f9e:	2a02      	cmp	r2, #2
    2fa0:	d115      	bne.n	2fce <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2fa2:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2fa4:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2fa6:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    2fa8:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2fac:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    2fae:	d065      	beq.n	307c <uarte_nrfx_configure+0x104>
    2fb0:	d82d      	bhi.n	300e <uarte_nrfx_configure+0x96>
    2fb2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2fb6:	d064      	beq.n	3082 <uarte_nrfx_configure+0x10a>
    2fb8:	d816      	bhi.n	2fe8 <uarte_nrfx_configure+0x70>
    2fba:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2fbe:	d062      	beq.n	3086 <uarte_nrfx_configure+0x10e>
    2fc0:	d80a      	bhi.n	2fd8 <uarte_nrfx_configure+0x60>
    2fc2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2fc6:	d061      	beq.n	308c <uarte_nrfx_configure+0x114>
    2fc8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2fcc:	d061      	beq.n	3092 <uarte_nrfx_configure+0x11a>
    2fce:	f06f 0022 	mvn.w	r0, #34	; 0x22
    2fd2:	e052      	b.n	307a <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
    2fd4:	2600      	movs	r6, #0
    2fd6:	e7d6      	b.n	2f86 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    2fd8:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2fdc:	d05c      	beq.n	3098 <uarte_nrfx_configure+0x120>
    2fde:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2fe2:	d1f4      	bne.n	2fce <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2fe4:	4b37      	ldr	r3, [pc, #220]	; (30c4 <uarte_nrfx_configure+0x14c>)
    2fe6:	e03c      	b.n	3062 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    2fe8:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2fec:	d057      	beq.n	309e <uarte_nrfx_configure+0x126>
    2fee:	d807      	bhi.n	3000 <uarte_nrfx_configure+0x88>
    2ff0:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2ff4:	d055      	beq.n	30a2 <uarte_nrfx_configure+0x12a>
    2ff6:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2ffa:	d1e8      	bne.n	2fce <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2ffc:	4b32      	ldr	r3, [pc, #200]	; (30c8 <uarte_nrfx_configure+0x150>)
    2ffe:	e030      	b.n	3062 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    3000:	f647 2712 	movw	r7, #31250	; 0x7a12
    3004:	42bb      	cmp	r3, r7
    3006:	d1e2      	bne.n	2fce <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3008:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    300c:	e029      	b.n	3062 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    300e:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3012:	d048      	beq.n	30a6 <uarte_nrfx_configure+0x12e>
    3014:	d813      	bhi.n	303e <uarte_nrfx_configure+0xc6>
    3016:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    301a:	d047      	beq.n	30ac <uarte_nrfx_configure+0x134>
    301c:	d809      	bhi.n	3032 <uarte_nrfx_configure+0xba>
    301e:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    3022:	42bb      	cmp	r3, r7
    3024:	d044      	beq.n	30b0 <uarte_nrfx_configure+0x138>
    3026:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    302a:	d1d0      	bne.n	2fce <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    302c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3030:	e017      	b.n	3062 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    3032:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3036:	d1ca      	bne.n	2fce <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    3038:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    303c:	e011      	b.n	3062 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    303e:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3042:	d038      	beq.n	30b6 <uarte_nrfx_configure+0x13e>
    3044:	d808      	bhi.n	3058 <uarte_nrfx_configure+0xe0>
    3046:	4f21      	ldr	r7, [pc, #132]	; (30cc <uarte_nrfx_configure+0x154>)
    3048:	42bb      	cmp	r3, r7
    304a:	d037      	beq.n	30bc <uarte_nrfx_configure+0x144>
    304c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3050:	d1bd      	bne.n	2fce <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3052:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3056:	e004      	b.n	3062 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    3058:	4f1d      	ldr	r7, [pc, #116]	; (30d0 <uarte_nrfx_configure+0x158>)
    305a:	42bb      	cmp	r3, r7
    305c:	d1b7      	bne.n	2fce <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    305e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3062:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    3066:	68c3      	ldr	r3, [r0, #12]
    3068:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    306a:	4334      	orrs	r4, r6
    306c:	4322      	orrs	r2, r4
    306e:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3070:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    3074:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    3078:	2000      	movs	r0, #0
}
    307a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    307c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3080:	e7ef      	b.n	3062 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3082:	4b14      	ldr	r3, [pc, #80]	; (30d4 <uarte_nrfx_configure+0x15c>)
    3084:	e7ed      	b.n	3062 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3086:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    308a:	e7ea      	b.n	3062 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
    308c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3090:	e7e7      	b.n	3062 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    3092:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3096:	e7e4      	b.n	3062 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3098:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    309c:	e7e1      	b.n	3062 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    309e:	4b0e      	ldr	r3, [pc, #56]	; (30d8 <uarte_nrfx_configure+0x160>)
    30a0:	e7df      	b.n	3062 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    30a2:	4b0e      	ldr	r3, [pc, #56]	; (30dc <uarte_nrfx_configure+0x164>)
    30a4:	e7dd      	b.n	3062 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    30a6:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    30aa:	e7da      	b.n	3062 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    30ac:	4b0c      	ldr	r3, [pc, #48]	; (30e0 <uarte_nrfx_configure+0x168>)
    30ae:	e7d8      	b.n	3062 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    30b0:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    30b4:	e7d5      	b.n	3062 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    30b6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    30ba:	e7d2      	b.n	3062 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    30bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    30c0:	e7cf      	b.n	3062 <uarte_nrfx_configure+0xea>
    30c2:	bf00      	nop
    30c4:	0013b000 	.word	0x0013b000
    30c8:	004ea000 	.word	0x004ea000
    30cc:	0003d090 	.word	0x0003d090
    30d0:	000f4240 	.word	0x000f4240
    30d4:	00275000 	.word	0x00275000
    30d8:	0075c000 	.word	0x0075c000
    30dc:	003af000 	.word	0x003af000
    30e0:	013a9000 	.word	0x013a9000

000030e4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    30e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    30e8:	68c7      	ldr	r7, [r0, #12]
{
    30ea:	4606      	mov	r6, r0
    30ec:	4688      	mov	r8, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    30ee:	f003 f8c0 	bl	6272 <k_is_in_isr>
    30f2:	b9b8      	cbnz	r0, 3124 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
    30f4:	4b28      	ldr	r3, [pc, #160]	; (3198 <uarte_nrfx_poll_out+0xb4>)
    30f6:	781b      	ldrb	r3, [r3, #0]
    30f8:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
    30fc:	6872      	ldr	r2, [r6, #4]
    30fe:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
    3100:	b193      	cbz	r3, 3128 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
    3102:	f04f 0320 	mov.w	r3, #32
    3106:	f3ef 8411 	mrs	r4, BASEPRI
    310a:	f383 8811 	msr	BASEPRI, r3
    310e:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    3112:	4630      	mov	r0, r6
    3114:	f002 feb3 	bl	5e7e <is_tx_ready>
    3118:	bb38      	cbnz	r0, 316a <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
    311a:	f384 8811 	msr	BASEPRI, r4
    311e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3122:	e7ee      	b.n	3102 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3124:	2301      	movs	r3, #1
    3126:	e7e9      	b.n	30fc <uarte_nrfx_poll_out+0x18>
    3128:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    312a:	4630      	mov	r0, r6
    312c:	f002 fea7 	bl	5e7e <is_tx_ready>
    3130:	b970      	cbnz	r0, 3150 <uarte_nrfx_poll_out+0x6c>
    3132:	2001      	movs	r0, #1
    3134:	f002 ffa1 	bl	607a <nrfx_busy_wait>
    3138:	3c01      	subs	r4, #1
    313a:	d1f6      	bne.n	312a <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
    313c:	2100      	movs	r1, #0
    313e:	2021      	movs	r0, #33	; 0x21
    3140:	f001 f9d2 	bl	44e8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3144:	e7f0      	b.n	3128 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
    3146:	f384 8811 	msr	BASEPRI, r4
    314a:	f3bf 8f6f 	isb	sy
}
    314e:	e7f5      	b.n	313c <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
    3150:	f04f 0320 	mov.w	r3, #32
    3154:	f3ef 8411 	mrs	r4, BASEPRI
    3158:	f383 8811 	msr	BASEPRI, r3
    315c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3160:	4630      	mov	r0, r6
    3162:	f002 fe8c 	bl	5e7e <is_tx_ready>
    3166:	2800      	cmp	r0, #0
    3168:	d0ed      	beq.n	3146 <uarte_nrfx_poll_out+0x62>
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
    316a:	f807 8f14 	strb.w	r8, [r7, #20]!
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    316e:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3170:	2200      	movs	r2, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3172:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3176:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    317a:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
    317e:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
    3182:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
    3186:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    318a:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
    318c:	f384 8811 	msr	BASEPRI, r4
    3190:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
    3194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3198:	20000f9b 	.word	0x20000f9b

0000319c <nrf_gpio_cfg_output>:
    *p_pin = pin_number & 0x1F;
    319c:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    31a0:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    31a2:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    31a4:	4b04      	ldr	r3, [pc, #16]	; (31b8 <nrf_gpio_cfg_output+0x1c>)
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    31a6:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    31aa:	bf18      	it	ne
    31ac:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    31b0:	2103      	movs	r1, #3
    31b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    31b6:	4770      	bx	lr
    31b8:	50000300 	.word	0x50000300

000031bc <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    31bc:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    31c0:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    31c2:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    31c4:	4b04      	ldr	r3, [pc, #16]	; (31d8 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    31c6:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    31ca:	bf18      	it	ne
    31cc:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    31d0:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    31d2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    31d6:	4770      	bx	lr
    31d8:	50000300 	.word	0x50000300

000031dc <uarte_instance_init.isra.0>:
	return config->uarte_regs;
    31dc:	6843      	ldr	r3, [r0, #4]
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    31de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
    31e2:	681c      	ldr	r4, [r3, #0]
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    31e4:	68c7      	ldr	r7, [r0, #12]
static int uarte_instance_init(const struct device *dev,
    31e6:	460d      	mov	r5, r1
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    31e8:	f04f 0800 	mov.w	r8, #0
    31ec:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
    31f0:	4606      	mov	r6, r0

	nrf_uarte_disable(uarte);

	data->dev = dev;
    31f2:	6038      	str	r0, [r7, #0]
        nrf_gpio_pin_set(pin_number);
    31f4:	6808      	ldr	r0, [r1, #0]
    31f6:	f7ff ffe1 	bl	31bc <nrf_gpio_pin_set>

	nrf_gpio_pin_write(config->pseltxd, 1);
	nrf_gpio_cfg_output(config->pseltxd);
    31fa:	6828      	ldr	r0, [r5, #0]
    31fc:	f7ff ffce 	bl	319c <nrf_gpio_cfg_output>

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    3200:	686a      	ldr	r2, [r5, #4]
    3202:	1c51      	adds	r1, r2, #1
    3204:	d00b      	beq.n	321e <uarte_instance_init.isra.0+0x42>
    return pin_number >> 5;
    3206:	0951      	lsrs	r1, r2, #5
        case 1: return NRF_P1;
    3208:	2901      	cmp	r1, #1
    *p_pin = pin_number & 0x1F;
    320a:	f002 031f 	and.w	r3, r2, #31
        case 1: return NRF_P1;
    320e:	4941      	ldr	r1, [pc, #260]	; (3314 <uarte_instance_init.isra.0+0x138>)
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3210:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    3214:	bf18      	it	ne
    3216:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    321a:	f841 8023 	str.w	r8, [r1, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
    321e:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    3220:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    3224:	68ab      	ldr	r3, [r5, #8]
    p_reg->PSEL.RXD = pselrxd;
    3226:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    322a:	1c5a      	adds	r2, r3, #1
    322c:	d00c      	beq.n	3248 <uarte_instance_init.isra.0+0x6c>
    *p_pin = pin_number & 0x1F;
    322e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    3232:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    3234:	2b01      	cmp	r3, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3236:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    323a:	4b36      	ldr	r3, [pc, #216]	; (3314 <uarte_instance_init.isra.0+0x138>)
    323c:	bf18      	it	ne
    323e:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3242:	2100      	movs	r1, #0
    3244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    3248:	68e8      	ldr	r0, [r5, #12]
    324a:	1c43      	adds	r3, r0, #1
    324c:	d004      	beq.n	3258 <uarte_instance_init.isra.0+0x7c>
        nrf_gpio_pin_set(pin_number);
    324e:	f7ff ffb5 	bl	31bc <nrf_gpio_pin_set>
		nrf_gpio_pin_write(config->pselrts, 1);
		nrf_gpio_cfg_output(config->pselrts);
    3252:	68e8      	ldr	r0, [r5, #12]
    3254:	f7ff ffa2 	bl	319c <nrf_gpio_cfg_output>
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
    3258:	e9d5 3202 	ldrd	r3, r2, [r5, #8]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    325c:	68f1      	ldr	r1, [r6, #12]
    p_reg->PSEL.RTS = pselrts;
    325e:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    3262:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
    3264:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    3268:	4630      	mov	r0, r6
    326a:	f7ff fe85 	bl	2f78 <uarte_nrfx_configure>
	if (err) {
    326e:	4680      	mov	r8, r0
    3270:	b9a8      	cbnz	r0, 329e <uarte_instance_init.isra.0+0xc2>

#ifdef CONFIG_PM_DEVICE
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
#endif

	if (get_dev_config(dev)->ppi_endtx) {
    3272:	6873      	ldr	r3, [r6, #4]
    3274:	799b      	ldrb	r3, [r3, #6]
    3276:	b343      	cbz	r3, 32ca <uarte_instance_init.isra.0+0xee>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3278:	f107 0016 	add.w	r0, r7, #22
    327c:	f000 fab2 	bl	37e4 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3280:	4b25      	ldr	r3, [pc, #148]	; (3318 <uarte_instance_init.isra.0+0x13c>)
    3282:	4298      	cmp	r0, r3
    3284:	d00e      	beq.n	32a4 <uarte_instance_init.isra.0+0xc8>
    3286:	4b25      	ldr	r3, [pc, #148]	; (331c <uarte_instance_init.isra.0+0x140>)
    3288:	4925      	ldr	r1, [pc, #148]	; (3320 <uarte_instance_init.isra.0+0x144>)
		LOG_ERR("Failed to allocate PPI Channel");
    328a:	4826      	ldr	r0, [pc, #152]	; (3324 <uarte_instance_init.isra.0+0x148>)
    328c:	1ac9      	subs	r1, r1, r3
    328e:	08c9      	lsrs	r1, r1, #3
    3290:	0189      	lsls	r1, r1, #6
    3292:	f041 0101 	orr.w	r1, r1, #1
    3296:	f002 f8d9 	bl	544c <log_0>
		return -EIO;
    329a:	f06f 0804 	mvn.w	r8, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    329e:	4640      	mov	r0, r8
    32a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    32a4:	7db8      	ldrb	r0, [r7, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    32a6:	00c3      	lsls	r3, r0, #3
    32a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    32ac:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    32b0:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    32b4:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    32b8:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    32bc:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    32c0:	4a19      	ldr	r2, [pc, #100]	; (3328 <uarte_instance_init.isra.0+0x14c>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    32c2:	2301      	movs	r3, #1
    32c4:	4083      	lsls	r3, r0
    32c6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    32ca:	2308      	movs	r3, #8
    32cc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    32d0:	686b      	ldr	r3, [r5, #4]
    32d2:	3301      	adds	r3, #1
    32d4:	d00c      	beq.n	32f0 <uarte_instance_init.isra.0+0x114>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    32d6:	2300      	movs	r3, #0
    32d8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    32dc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    32e0:	f107 0315 	add.w	r3, r7, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    32e4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    32e8:	2301      	movs	r3, #1
    32ea:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    32ee:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
    32f0:	6873      	ldr	r3, [r6, #4]
    32f2:	799b      	ldrb	r3, [r3, #6]
    32f4:	b91b      	cbnz	r3, 32fe <uarte_instance_init.isra.0+0x122>
    p_reg->INTENSET = mask;
    32f6:	f44f 7380 	mov.w	r3, #256	; 0x100
    32fa:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    32fe:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    3300:	3714      	adds	r7, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3302:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3306:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    330a:	2301      	movs	r3, #1
    330c:	60a3      	str	r3, [r4, #8]
    330e:	60e3      	str	r3, [r4, #12]
	return 0;
    3310:	e7c5      	b.n	329e <uarte_instance_init.isra.0+0xc2>
    3312:	bf00      	nop
    3314:	50000300 	.word	0x50000300
    3318:	0bad0000 	.word	0x0bad0000
    331c:	00006580 	.word	0x00006580
    3320:	000065e0 	.word	0x000065e0
    3324:	00007168 	.word	0x00007168
    3328:	4001f000 	.word	0x4001f000

0000332c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    332c:	b530      	push	{r4, r5, lr}
    332e:	4b0a      	ldr	r3, [pc, #40]	; (3358 <uarte_0_init+0x2c>)
    3330:	4605      	mov	r5, r0
    3332:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3334:	b085      	sub	sp, #20
    3336:	466c      	mov	r4, sp
    3338:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    333c:	2200      	movs	r2, #0
    333e:	2101      	movs	r1, #1
    3340:	2002      	movs	r0, #2
    3342:	f7fe ff3b 	bl	21bc <z_arm_irq_priority_set>
    3346:	2002      	movs	r0, #2
    3348:	f7fe ff1a 	bl	2180 <arch_irq_enable>
    334c:	4621      	mov	r1, r4
    334e:	4628      	mov	r0, r5
    3350:	f7ff ff44 	bl	31dc <uarte_instance_init.isra.0>
    3354:	b005      	add	sp, #20
    3356:	bd30      	pop	{r4, r5, pc}
    3358:	00006600 	.word	0x00006600

0000335c <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    335c:	b530      	push	{r4, r5, lr}
    335e:	4b0a      	ldr	r3, [pc, #40]	; (3388 <uarte_1_init+0x2c>)
    3360:	4605      	mov	r5, r0
    3362:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3364:	b085      	sub	sp, #20
    3366:	466c      	mov	r4, sp
    3368:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    336c:	2200      	movs	r2, #0
    336e:	2101      	movs	r1, #1
    3370:	2028      	movs	r0, #40	; 0x28
    3372:	f7fe ff23 	bl	21bc <z_arm_irq_priority_set>
    3376:	2028      	movs	r0, #40	; 0x28
    3378:	f7fe ff02 	bl	2180 <arch_irq_enable>
    337c:	4621      	mov	r1, r4
    337e:	4628      	mov	r0, r5
    3380:	f7ff ff2c 	bl	31dc <uarte_instance_init.isra.0>
    3384:	b005      	add	sp, #20
    3386:	bd30      	pop	{r4, r5, pc}
    3388:	00006610 	.word	0x00006610

0000338c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    338c:	b508      	push	{r3, lr}
	z_impl_log_panic();
    338e:	f7fe f81f 	bl	13d0 <z_impl_log_panic>
    3392:	4b06      	ldr	r3, [pc, #24]	; (33ac <k_sys_fatal_error_handler+0x20>)
    3394:	4906      	ldr	r1, [pc, #24]	; (33b0 <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
    3396:	4807      	ldr	r0, [pc, #28]	; (33b4 <k_sys_fatal_error_handler+0x28>)
    3398:	1ac9      	subs	r1, r1, r3
    339a:	08c9      	lsrs	r1, r1, #3
    339c:	0189      	lsls	r1, r1, #6
    339e:	f041 0101 	orr.w	r1, r1, #1
    33a2:	f002 f853 	bl	544c <log_0>
	sys_arch_reboot(0);
    33a6:	2000      	movs	r0, #0
    33a8:	f7ff fb82 	bl	2ab0 <sys_arch_reboot>

	CODE_UNREACHABLE;
    33ac:	00006580 	.word	0x00006580
    33b0:	000065a0 	.word	0x000065a0
    33b4:	00007197 	.word	0x00007197

000033b8 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    33b8:	4b06      	ldr	r3, [pc, #24]	; (33d4 <nrf52_errata_136+0x1c>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    33ba:	681b      	ldr	r3, [r3, #0]
    33bc:	2b08      	cmp	r3, #8
    33be:	d106      	bne.n	33ce <nrf52_errata_136+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    33c0:	4b05      	ldr	r3, [pc, #20]	; (33d8 <nrf52_errata_136+0x20>)
    33c2:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    33c4:	2b05      	cmp	r3, #5
    33c6:	d802      	bhi.n	33ce <nrf52_errata_136+0x16>
    33c8:	4a04      	ldr	r2, [pc, #16]	; (33dc <nrf52_errata_136+0x24>)
    33ca:	5cd0      	ldrb	r0, [r2, r3]
    33cc:	4770      	bx	lr
                    default:
                        return true;
                }
            }
        #endif
        return false;
    33ce:	2000      	movs	r0, #0
    #endif
}
    33d0:	4770      	bx	lr
    33d2:	bf00      	nop
    33d4:	10000130 	.word	0x10000130
    33d8:	10000134 	.word	0x10000134
    33dc:	000071bf 	.word	0x000071bf

000033e0 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    33e0:	4b06      	ldr	r3, [pc, #24]	; (33fc <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    33e2:	681b      	ldr	r3, [r3, #0]
    33e4:	2b08      	cmp	r3, #8
    33e6:	d106      	bne.n	33f6 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    33e8:	4b05      	ldr	r3, [pc, #20]	; (3400 <nrf52_errata_103+0x20>)
    33ea:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    33ec:	2b05      	cmp	r3, #5
    33ee:	d802      	bhi.n	33f6 <nrf52_errata_103+0x16>
    33f0:	4a04      	ldr	r2, [pc, #16]	; (3404 <nrf52_errata_103+0x24>)
    33f2:	5cd0      	ldrb	r0, [r2, r3]
    33f4:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    33f6:	2000      	movs	r0, #0
    #endif
}
    33f8:	4770      	bx	lr
    33fa:	bf00      	nop
    33fc:	10000130 	.word	0x10000130
    3400:	10000134 	.word	0x10000134
    3404:	000071c5 	.word	0x000071c5

00003408 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3408:	4a02      	ldr	r2, [pc, #8]	; (3414 <nvmc_wait+0xc>)
    340a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    340e:	2b00      	cmp	r3, #0
    3410:	d0fb      	beq.n	340a <nvmc_wait+0x2>
}
    3412:	4770      	bx	lr
    3414:	4001e000 	.word	0x4001e000

00003418 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    3418:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    341a:	f7ff ffcd 	bl	33b8 <nrf52_errata_136>
    341e:	b140      	cbz	r0, 3432 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    3420:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3424:	2200      	movs	r2, #0
    3426:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    342a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    342e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    3432:	f7ff ffc1 	bl	33b8 <nrf52_errata_136>
    3436:	2800      	cmp	r0, #0
    3438:	d046      	beq.n	34c8 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    343a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    343e:	4b52      	ldr	r3, [pc, #328]	; (3588 <SystemInit+0x170>)
    3440:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    3444:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    3448:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    344c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    3450:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    3454:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    3458:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    345c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    3460:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    3464:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    3468:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    346c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    3470:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    3474:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    3478:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    347c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    3480:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    3484:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    3488:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    348c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    3490:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    3494:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    3498:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    349c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    34a0:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    34a4:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    34a8:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    34ac:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    34b0:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    34b4:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    34b8:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    34bc:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    34c0:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    34c4:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    34c8:	f7ff ff8a 	bl	33e0 <nrf52_errata_103>
    34cc:	b110      	cbz	r0, 34d4 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    34ce:	4b2f      	ldr	r3, [pc, #188]	; (358c <SystemInit+0x174>)
    34d0:	4a2f      	ldr	r2, [pc, #188]	; (3590 <SystemInit+0x178>)
    34d2:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    34d4:	f7ff ff84 	bl	33e0 <nrf52_errata_103>
    34d8:	b118      	cbz	r0, 34e2 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    34da:	4b2e      	ldr	r3, [pc, #184]	; (3594 <SystemInit+0x17c>)
    34dc:	22fb      	movs	r2, #251	; 0xfb
    34de:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    34e2:	f7ff ff7d 	bl	33e0 <nrf52_errata_103>
    34e6:	b148      	cbz	r0, 34fc <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    34e8:	492b      	ldr	r1, [pc, #172]	; (3598 <SystemInit+0x180>)
    34ea:	4b2c      	ldr	r3, [pc, #176]	; (359c <SystemInit+0x184>)
    34ec:	680a      	ldr	r2, [r1, #0]
    34ee:	681b      	ldr	r3, [r3, #0]
    34f0:	f022 020f 	bic.w	r2, r2, #15
    34f4:	f003 030f 	and.w	r3, r3, #15
    34f8:	4313      	orrs	r3, r2
    34fa:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    34fc:	f7ff ff70 	bl	33e0 <nrf52_errata_103>
    3500:	b118      	cbz	r0, 350a <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    3502:	4b27      	ldr	r3, [pc, #156]	; (35a0 <SystemInit+0x188>)
    3504:	f44f 7200 	mov.w	r2, #512	; 0x200
    3508:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    350a:	f7ff ff55 	bl	33b8 <nrf52_errata_136>
    350e:	b148      	cbz	r0, 3524 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    3510:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3514:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3518:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    351a:	bf44      	itt	mi
    351c:	f06f 0201 	mvnmi.w	r2, #1
    3520:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3524:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3528:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    352c:	2a00      	cmp	r2, #0
    352e:	db03      	blt.n	3538 <SystemInit+0x120>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    3530:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3534:	2b00      	cmp	r3, #0
    3536:	da22      	bge.n	357e <SystemInit+0x166>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3538:	491a      	ldr	r1, [pc, #104]	; (35a4 <SystemInit+0x18c>)
    353a:	2301      	movs	r3, #1
    353c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    3540:	f7ff ff62 	bl	3408 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3544:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    3548:	2412      	movs	r4, #18
    354a:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    354e:	f7ff ff5b 	bl	3408 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    3552:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    3556:	f7ff ff57 	bl	3408 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    355a:	2300      	movs	r3, #0
    355c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    3560:	f7ff ff52 	bl	3408 <nvmc_wait>
    3564:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3568:	490f      	ldr	r1, [pc, #60]	; (35a8 <SystemInit+0x190>)
    356a:	4b10      	ldr	r3, [pc, #64]	; (35ac <SystemInit+0x194>)
    356c:	68ca      	ldr	r2, [r1, #12]
    356e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3572:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3574:	60cb      	str	r3, [r1, #12]
    3576:	f3bf 8f4f 	dsb	sy
    __NOP();
    357a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    357c:	e7fd      	b.n	357a <SystemInit+0x162>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    357e:	4b0c      	ldr	r3, [pc, #48]	; (35b0 <SystemInit+0x198>)
    3580:	4a0c      	ldr	r2, [pc, #48]	; (35b4 <SystemInit+0x19c>)
    3582:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    3584:	bd10      	pop	{r4, pc}
    3586:	bf00      	nop
    3588:	4000c000 	.word	0x4000c000
    358c:	4000568c 	.word	0x4000568c
    3590:	00038148 	.word	0x00038148
    3594:	4000f000 	.word	0x4000f000
    3598:	40000ee4 	.word	0x40000ee4
    359c:	10000258 	.word	0x10000258
    35a0:	40029640 	.word	0x40029640
    35a4:	4001e000 	.word	0x4001e000
    35a8:	e000ed00 	.word	0xe000ed00
    35ac:	05fa0004 	.word	0x05fa0004
    35b0:	20000084 	.word	0x20000084
    35b4:	03d09000 	.word	0x03d09000

000035b8 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    35b8:	4b04      	ldr	r3, [pc, #16]	; (35cc <nrfx_clock_init+0x14>)
    35ba:	791a      	ldrb	r2, [r3, #4]
    35bc:	b922      	cbnz	r2, 35c8 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    35be:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    35c0:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    35c2:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    35c4:	4802      	ldr	r0, [pc, #8]	; (35d0 <nrfx_clock_init+0x18>)
    35c6:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    35c8:	4802      	ldr	r0, [pc, #8]	; (35d4 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    35ca:	4770      	bx	lr
    35cc:	20000a88 	.word	0x20000a88
    35d0:	0bad0000 	.word	0x0bad0000
    35d4:	0bad000c 	.word	0x0bad000c

000035d8 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    35d8:	b110      	cbz	r0, 35e0 <nrfx_clock_start+0x8>
    35da:	2801      	cmp	r0, #1
    35dc:	d020      	beq.n	3620 <nrfx_clock_start+0x48>
    35de:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    35e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    35e4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    35e8:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    35ec:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    35f0:	4619      	mov	r1, r3
    35f2:	d011      	beq.n	3618 <nrfx_clock_start+0x40>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    35f4:	f002 0203 	and.w	r2, r2, #3
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    35f8:	2a01      	cmp	r2, #1
    35fa:	d10d      	bne.n	3618 <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
    35fc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3600:	4b0c      	ldr	r3, [pc, #48]	; (3634 <nrfx_clock_start+0x5c>)
    3602:	2200      	movs	r2, #0
    3604:	601a      	str	r2, [r3, #0]
    3606:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3608:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    360c:	2202      	movs	r2, #2
    360e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3612:	2201      	movs	r2, #1
    3614:	609a      	str	r2, [r3, #8]
}
    3616:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    3618:	2300      	movs	r3, #0
    361a:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
    361e:	e7ef      	b.n	3600 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3620:	4b05      	ldr	r3, [pc, #20]	; (3638 <nrfx_clock_start+0x60>)
    3622:	2200      	movs	r2, #0
    3624:	601a      	str	r2, [r3, #0]
    3626:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3628:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    362c:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3630:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    3632:	4770      	bx	lr
    3634:	40000104 	.word	0x40000104
    3638:	40000100 	.word	0x40000100

0000363c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    363c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    363e:	b110      	cbz	r0, 3646 <nrfx_clock_stop+0xa>
    3640:	2801      	cmp	r0, #1
    3642:	d018      	beq.n	3676 <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3644:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    3646:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    364a:	2202      	movs	r2, #2
    364c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3650:	4a18      	ldr	r2, [pc, #96]	; (36b4 <nrfx_clock_stop+0x78>)
    3652:	6010      	str	r0, [r2, #0]
    3654:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3656:	4a18      	ldr	r2, [pc, #96]	; (36b8 <nrfx_clock_stop+0x7c>)
    3658:	2101      	movs	r1, #1
    365a:	6011      	str	r1, [r2, #0]
    365c:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3660:	461c      	mov	r4, r3
    3662:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    3666:	03db      	lsls	r3, r3, #15
    3668:	d5ec      	bpl.n	3644 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    366a:	2001      	movs	r0, #1
    366c:	f002 fd05 	bl	607a <nrfx_busy_wait>
    3670:	3d01      	subs	r5, #1
    3672:	d1f6      	bne.n	3662 <nrfx_clock_stop+0x26>
    3674:	e7e6      	b.n	3644 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3676:	4b11      	ldr	r3, [pc, #68]	; (36bc <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
    3678:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    367c:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    367e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3682:	601a      	str	r2, [r3, #0]
    3684:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3686:	4b0e      	ldr	r3, [pc, #56]	; (36c0 <nrfx_clock_stop+0x84>)
    3688:	f242 7510 	movw	r5, #10000	; 0x2710
    368c:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    368e:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3692:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    3696:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3698:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    369c:	d505      	bpl.n	36aa <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    369e:	b123      	cbz	r3, 36aa <nrfx_clock_stop+0x6e>
    36a0:	2001      	movs	r0, #1
    36a2:	f002 fcea 	bl	607a <nrfx_busy_wait>
    36a6:	3d01      	subs	r5, #1
    36a8:	d1f1      	bne.n	368e <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
    36aa:	4b06      	ldr	r3, [pc, #24]	; (36c4 <nrfx_clock_stop+0x88>)
    36ac:	2200      	movs	r2, #0
    36ae:	715a      	strb	r2, [r3, #5]
    36b0:	e7c8      	b.n	3644 <nrfx_clock_stop+0x8>
    36b2:	bf00      	nop
    36b4:	40000104 	.word	0x40000104
    36b8:	4000000c 	.word	0x4000000c
    36bc:	40000100 	.word	0x40000100
    36c0:	40000004 	.word	0x40000004
    36c4:	20000a88 	.word	0x20000a88

000036c8 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    36c8:	4b16      	ldr	r3, [pc, #88]	; (3724 <nrfx_power_clock_irq_handler+0x5c>)
    36ca:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    36cc:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    36ce:	b16a      	cbz	r2, 36ec <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    36d0:	2200      	movs	r2, #0
    36d2:	601a      	str	r2, [r3, #0]
    36d4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    36d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    36da:	2201      	movs	r2, #1
    36dc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    36e0:	4b11      	ldr	r3, [pc, #68]	; (3728 <nrfx_power_clock_irq_handler+0x60>)
    36e2:	7958      	ldrb	r0, [r3, #5]
    36e4:	b910      	cbnz	r0, 36ec <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    36e6:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    36e8:	681b      	ldr	r3, [r3, #0]
    36ea:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    36ec:	4b0f      	ldr	r3, [pc, #60]	; (372c <nrfx_power_clock_irq_handler+0x64>)
    36ee:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    36f0:	b172      	cbz	r2, 3710 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    36f2:	2200      	movs	r2, #0
    36f4:	601a      	str	r2, [r3, #0]
    36f6:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    36f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    36fc:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3700:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3704:	0792      	lsls	r2, r2, #30
    3706:	d104      	bne.n	3712 <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3708:	2201      	movs	r2, #1
    370a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    370e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3710:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    3712:	2202      	movs	r2, #2
    3714:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3718:	4b03      	ldr	r3, [pc, #12]	; (3728 <nrfx_power_clock_irq_handler+0x60>)
}
    371a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    371e:	681b      	ldr	r3, [r3, #0]
    3720:	2001      	movs	r0, #1
    3722:	4718      	bx	r3
    3724:	40000100 	.word	0x40000100
    3728:	20000a88 	.word	0x20000a88
    372c:	40000104 	.word	0x40000104

00003730 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    3730:	2301      	movs	r3, #1
    3732:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    3736:	f010 0fff 	tst.w	r0, #255	; 0xff
    373a:	d012      	beq.n	3762 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
    373c:	f04f 0320 	mov.w	r3, #32
    3740:	f3ef 8111 	mrs	r1, BASEPRI
    3744:	f383 8811 	msr	BASEPRI, r3
    3748:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    374c:	4a06      	ldr	r2, [pc, #24]	; (3768 <nrfx_gpiote_channel_free+0x38>)
    374e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    3750:	ea23 0000 	bic.w	r0, r3, r0
    3754:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
    3756:	f381 8811 	msr	BASEPRI, r1
    375a:	f3bf 8f6f 	isb	sy
    375e:	4803      	ldr	r0, [pc, #12]	; (376c <nrfx_gpiote_channel_free+0x3c>)
    3760:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    3762:	4803      	ldr	r0, [pc, #12]	; (3770 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3764:	4770      	bx	lr
    3766:	bf00      	nop
    3768:	20000a90 	.word	0x20000a90
    376c:	0bad0000 	.word	0x0bad0000
    3770:	0bad0004 	.word	0x0bad0004

00003774 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    3774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3778:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    377a:	f8df e060 	ldr.w	lr, [pc, #96]	; 37dc <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    377e:	4816      	ldr	r0, [pc, #88]	; (37d8 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    3780:	f8df 805c 	ldr.w	r8, [pc, #92]	; 37e0 <nrfx_gpiote_channel_alloc+0x6c>
{
    3784:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    3786:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
    3788:	2601      	movs	r6, #1
    378a:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    378c:	f04f 0120 	mov.w	r1, #32
    3790:	f3ef 8c11 	mrs	ip, BASEPRI
    3794:	f381 8811 	msr	BASEPRI, r1
    3798:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    379c:	fa22 f103 	lsr.w	r1, r2, r3
    37a0:	07c9      	lsls	r1, r1, #31
    37a2:	d50a      	bpl.n	37ba <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    37a4:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
    37a8:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    37ac:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
    37ae:	bf01      	itttt	eq
    37b0:	4339      	orreq	r1, r7
    37b2:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
    37b6:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
    37b8:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    37ba:	f38c 8811 	msr	BASEPRI, ip
    37be:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    37c2:	4540      	cmp	r0, r8
    37c4:	d005      	beq.n	37d2 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    37c6:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    37ca:	439a      	bics	r2, r3
    37cc:	f104 0401 	add.w	r4, r4, #1
    37d0:	d1db      	bne.n	378a <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    37d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    37d6:	bf00      	nop
    37d8:	0bad0002 	.word	0x0bad0002
    37dc:	20000a90 	.word	0x20000a90
    37e0:	0bad0000 	.word	0x0bad0000

000037e4 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    37e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    37e8:	4a14      	ldr	r2, [pc, #80]	; (383c <nrfx_ppi_channel_alloc+0x58>)
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    37ea:	4e15      	ldr	r6, [pc, #84]	; (3840 <nrfx_ppi_channel_alloc+0x5c>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
    37ec:	4f15      	ldr	r7, [pc, #84]	; (3844 <nrfx_ppi_channel_alloc+0x60>)
{
    37ee:	4605      	mov	r5, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    37f0:	4815      	ldr	r0, [pc, #84]	; (3848 <nrfx_ppi_channel_alloc+0x64>)
{
    37f2:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    37f4:	f04f 0e01 	mov.w	lr, #1
    37f8:	fa5f fc84 	uxtb.w	ip, r4
	__asm__ volatile(
    37fc:	f04f 0320 	mov.w	r3, #32
    3800:	f3ef 8811 	mrs	r8, BASEPRI
    3804:	f383 8811 	msr	BASEPRI, r3
    3808:	f3bf 8f6f 	isb	sy
    380c:	fa0e f30c 	lsl.w	r3, lr, ip
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    3810:	4213      	tst	r3, r2
    3812:	d007      	beq.n	3824 <nrfx_ppi_channel_alloc+0x40>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    3814:	6831      	ldr	r1, [r6, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    3816:	420b      	tst	r3, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    3818:	bf01      	itttt	eq
    381a:	4319      	orreq	r1, r3
    381c:	6031      	streq	r1, [r6, #0]
            *p_channel = channel;
    381e:	f885 c000 	strbeq.w	ip, [r5]
            err_code   = NRFX_SUCCESS;
    3822:	4638      	moveq	r0, r7
	__asm__ volatile(
    3824:	f388 8811 	msr	BASEPRI, r8
    3828:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    382c:	42b8      	cmp	r0, r7
    382e:	d003      	beq.n	3838 <nrfx_ppi_channel_alloc+0x54>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    3830:	439a      	bics	r2, r3
    3832:	f104 0401 	add.w	r4, r4, #1
    3836:	d1df      	bne.n	37f8 <nrfx_ppi_channel_alloc+0x14>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    383c:	000fffff 	.word	0x000fffff
    3840:	20000af0 	.word	0x20000af0
    3844:	0bad0000 	.word	0x0bad0000
    3848:	0bad0002 	.word	0x0bad0002

0000384c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    384c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    384e:	4b10      	ldr	r3, [pc, #64]	; (3890 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
    3850:	4f10      	ldr	r7, [pc, #64]	; (3894 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3852:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    3856:	3001      	adds	r0, #1
    3858:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    385c:	42ae      	cmp	r6, r5
    385e:	d800      	bhi.n	3862 <z_sys_init_run_level+0x16>
		}
	}
}
    3860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
    3862:	e9d5 3400 	ldrd	r3, r4, [r5]
    3866:	4620      	mov	r0, r4
    3868:	4798      	blx	r3
    386a:	b170      	cbz	r0, 388a <z_sys_init_run_level+0x3e>
    386c:	b16c      	cbz	r4, 388a <z_sys_init_run_level+0x3e>
				(dev - __device_start));
    386e:	1be4      	subs	r4, r4, r7
    3870:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    3872:	0961      	lsrs	r1, r4, #5
    3874:	4a08      	ldr	r2, [pc, #32]	; (3898 <z_sys_init_run_level+0x4c>)
    3876:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
    387a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
    387e:	2301      	movs	r3, #1
    3880:	fa03 f404 	lsl.w	r4, r3, r4
    3884:	4304      	orrs	r4, r0
    3886:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    388a:	3508      	adds	r5, #8
    388c:	e7e6      	b.n	385c <z_sys_init_run_level+0x10>
    388e:	bf00      	nop
    3890:	00006880 	.word	0x00006880
    3894:	200000f0 	.word	0x200000f0
    3898:	20000160 	.word	0x20000160

0000389c <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
    389c:	4b08      	ldr	r3, [pc, #32]	; (38c0 <z_device_ready+0x24>)
    389e:	1ac0      	subs	r0, r0, r3
    38a0:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    38a2:	4b08      	ldr	r3, [pc, #32]	; (38c4 <z_device_ready+0x28>)
    38a4:	0942      	lsrs	r2, r0, #5
    38a6:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
    38aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
    38ae:	2301      	movs	r3, #1
    38b0:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
    38b4:	4210      	tst	r0, r2
}
    38b6:	bf0c      	ite	eq
    38b8:	4618      	moveq	r0, r3
    38ba:	2000      	movne	r0, #0
    38bc:	4770      	bx	lr
    38be:	bf00      	nop
    38c0:	200000f0 	.word	0x200000f0
    38c4:	20000160 	.word	0x20000160

000038c8 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
    38c8:	4911      	ldr	r1, [pc, #68]	; (3910 <z_impl_device_get_binding+0x48>)
{
    38ca:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
    38cc:	4c11      	ldr	r4, [pc, #68]	; (3914 <z_impl_device_get_binding+0x4c>)
{
    38ce:	4605      	mov	r5, r0
    38d0:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
    38d2:	428c      	cmp	r4, r1
    38d4:	d104      	bne.n	38e0 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
    38d6:	4c0f      	ldr	r4, [pc, #60]	; (3914 <z_impl_device_get_binding+0x4c>)
    38d8:	42b4      	cmp	r4, r6
    38da:	d10a      	bne.n	38f2 <z_impl_device_get_binding+0x2a>
	return NULL;
    38dc:	2400      	movs	r4, #0
    38de:	e014      	b.n	390a <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
    38e0:	4620      	mov	r0, r4
    38e2:	f7ff ffdb 	bl	389c <z_device_ready>
    38e6:	b110      	cbz	r0, 38ee <z_impl_device_get_binding+0x26>
    38e8:	6823      	ldr	r3, [r4, #0]
    38ea:	42ab      	cmp	r3, r5
    38ec:	d00d      	beq.n	390a <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
    38ee:	3410      	adds	r4, #16
    38f0:	e7ef      	b.n	38d2 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    38f2:	4620      	mov	r0, r4
    38f4:	f7ff ffd2 	bl	389c <z_device_ready>
    38f8:	b908      	cbnz	r0, 38fe <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
    38fa:	3410      	adds	r4, #16
    38fc:	e7ec      	b.n	38d8 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    38fe:	6821      	ldr	r1, [r4, #0]
    3900:	4628      	mov	r0, r5
    3902:	f002 f956 	bl	5bb2 <strcmp>
    3906:	2800      	cmp	r0, #0
    3908:	d1f7      	bne.n	38fa <z_impl_device_get_binding+0x32>
}
    390a:	4620      	mov	r0, r4
    390c:	bd70      	pop	{r4, r5, r6, pc}
    390e:	bf00      	nop
    3910:	20000160 	.word	0x20000160
    3914:	200000f0 	.word	0x200000f0

00003918 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3918:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    391c:	4606      	mov	r6, r0
    391e:	460f      	mov	r7, r1
	__asm__ volatile(
    3920:	f04f 0320 	mov.w	r3, #32
    3924:	f3ef 8811 	mrs	r8, BASEPRI
    3928:	f383 8811 	msr	BASEPRI, r3
    392c:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    3930:	f000 fdfc 	bl	452c <z_impl_k_current_get>
    3934:	4c1f      	ldr	r4, [pc, #124]	; (39b4 <z_fatal_error+0x9c>)
    3936:	4b20      	ldr	r3, [pc, #128]	; (39b8 <z_fatal_error+0xa0>)
    3938:	1ae4      	subs	r4, r4, r3
    393a:	2e04      	cmp	r6, #4
    393c:	ea4f 04d4 	mov.w	r4, r4, lsr #3
    3940:	bf96      	itet	ls
    3942:	4a1e      	ldrls	r2, [pc, #120]	; (39bc <z_fatal_error+0xa4>)
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    3944:	4a1e      	ldrhi	r2, [pc, #120]	; (39c0 <z_fatal_error+0xa8>)
    3946:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
    394a:	01a4      	lsls	r4, r4, #6
    394c:	f044 0301 	orr.w	r3, r4, #1
    3950:	4605      	mov	r5, r0
    3952:	f8ad 3000 	strh.w	r3, [sp]
    3956:	481b      	ldr	r0, [pc, #108]	; (39c4 <z_fatal_error+0xac>)
    3958:	2300      	movs	r3, #0
    395a:	4631      	mov	r1, r6
    395c:	f001 fdb0 	bl	54c0 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    3960:	b147      	cbz	r7, 3974 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    3962:	69fb      	ldr	r3, [r7, #28]
    3964:	f3c3 0308 	ubfx	r3, r3, #0, #9
    3968:	b123      	cbz	r3, 3974 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
    396a:	4817      	ldr	r0, [pc, #92]	; (39c8 <z_fatal_error+0xb0>)
    396c:	f044 0101 	orr.w	r1, r4, #1
    3970:	f001 fd6c 	bl	544c <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    3974:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
    3978:	b12d      	cbz	r5, 3986 <z_fatal_error+0x6e>
    397a:	4628      	mov	r0, r5
    397c:	f002 fc86 	bl	628c <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
    3980:	b108      	cbz	r0, 3986 <z_fatal_error+0x6e>
    3982:	7803      	ldrb	r3, [r0, #0]
    3984:	b903      	cbnz	r3, 3988 <z_fatal_error+0x70>
		thread_name = "unknown";
    3986:	4811      	ldr	r0, [pc, #68]	; (39cc <z_fatal_error+0xb4>)
	LOG_ERR("Current thread: %p (%s)", thread,
    3988:	f7fd fb9c 	bl	10c4 <log_strdup>
    398c:	4623      	mov	r3, r4
    398e:	4602      	mov	r2, r0
    3990:	4629      	mov	r1, r5
    3992:	480f      	ldr	r0, [pc, #60]	; (39d0 <z_fatal_error+0xb8>)
    3994:	f001 fd7b 	bl	548e <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    3998:	4639      	mov	r1, r7
    399a:	4630      	mov	r0, r6
    399c:	f7ff fcf6 	bl	338c <k_sys_fatal_error_handler>
	__asm__ volatile(
    39a0:	f388 8811 	msr	BASEPRI, r8
    39a4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    39a8:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    39aa:	b002      	add	sp, #8
    39ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    39b0:	f7fe bf66 	b.w	2880 <z_impl_k_thread_abort>
    39b4:	000065c8 	.word	0x000065c8
    39b8:	00006580 	.word	0x00006580
    39bc:	00006898 	.word	0x00006898
    39c0:	000071cb 	.word	0x000071cb
    39c4:	000071e1 	.word	0x000071e1
    39c8:	00007209 	.word	0x00007209
    39cc:	000071d9 	.word	0x000071d9
    39d0:	0000722a 	.word	0x0000722a

000039d4 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
    39d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
    39d6:	4e16      	ldr	r6, [pc, #88]	; (3a30 <idle+0x5c>)
{
    39d8:	4605      	mov	r5, r0
			cpu->pending_abort = NULL;
    39da:	2700      	movs	r7, #0
	__asm__ volatile(
    39dc:	f04f 0220 	mov.w	r2, #32
    39e0:	f3ef 8311 	mrs	r3, BASEPRI
    39e4:	f382 8811 	msr	BASEPRI, r2
    39e8:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
    39ec:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
    39ee:	b188      	cbz	r0, 3a14 <idle+0x40>
			cpu->pending_abort = NULL;
    39f0:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
    39f2:	f383 8811 	msr	BASEPRI, r3
    39f6:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
    39fa:	f000 fbc7 	bl	418c <z_thread_single_abort>
	__asm__ volatile(
    39fe:	f04f 0320 	mov.w	r3, #32
    3a02:	f3ef 8011 	mrs	r0, BASEPRI
    3a06:	f383 8811 	msr	BASEPRI, r3
    3a0a:	f3bf 8f6f 	isb	sy
    3a0e:	f002 fb84 	bl	611a <z_reschedule_irqlock>
			continue;
    3a12:	e7e3      	b.n	39dc <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
    3a14:	f002 fc52 	bl	62bc <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    3a18:	2101      	movs	r1, #1
    3a1a:	2802      	cmp	r0, #2
		int32_t ticks = z_get_next_timeout_expiry();
    3a1c:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    3a1e:	bfd8      	it	le
    3a20:	4608      	movle	r0, r1
    3a22:	f002 fc5b 	bl	62dc <z_set_timeout_expiry>
		_kernel.idle = ticks;
    3a26:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
    3a28:	f7fe fc36 	bl	2298 <arch_cpu_idle>
}
    3a2c:	e7d6      	b.n	39dc <idle+0x8>
    3a2e:	bf00      	nop
    3a30:	20000af4 	.word	0x20000af4

00003a34 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    3a34:	4802      	ldr	r0, [pc, #8]	; (3a40 <z_bss_zero+0xc>)
    3a36:	4a03      	ldr	r2, [pc, #12]	; (3a44 <z_bss_zero+0x10>)
    3a38:	2100      	movs	r1, #0
    3a3a:	1a12      	subs	r2, r2, r0
    3a3c:	f002 b8f0 	b.w	5c20 <memset>
    3a40:	200001f8 	.word	0x200001f8
    3a44:	20000f9c 	.word	0x20000f9c

00003a48 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    3a48:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
    3a4a:	4b0a      	ldr	r3, [pc, #40]	; (3a74 <bg_thread_main+0x2c>)
    3a4c:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3a4e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    3a50:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3a52:	f7ff fefb 	bl	384c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    3a56:	f000 fe89 	bl	476c <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    3a5a:	2003      	movs	r0, #3
    3a5c:	f7ff fef6 	bl	384c <z_sys_init_run_level>

	z_init_static_threads();
    3a60:	f000 fe12 	bl	4688 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    3a64:	f7fc fcc6 	bl	3f4 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3a68:	4a03      	ldr	r2, [pc, #12]	; (3a78 <bg_thread_main+0x30>)
    3a6a:	7b13      	ldrb	r3, [r2, #12]
    3a6c:	f023 0301 	bic.w	r3, r3, #1
    3a70:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3a72:	bd08      	pop	{r3, pc}
    3a74:	20000f9b 	.word	0x20000f9b
    3a78:	200003b0 	.word	0x200003b0

00003a7c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    3a7c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    3a80:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    3a82:	f7fd fa77 	bl	f74 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    3a86:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 3b7c <z_cstart+0x100>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3a8a:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    3a8e:	4d33      	ldr	r5, [pc, #204]	; (3b5c <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
    3a90:	4e33      	ldr	r6, [pc, #204]	; (3b60 <z_cstart+0xe4>)
    3a92:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3a94:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 3b80 <z_cstart+0x104>
	z_setup_new_thread(thread, stack,
    3a98:	4f32      	ldr	r7, [pc, #200]	; (3b64 <z_cstart+0xe8>)
    3a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3a9e:	2400      	movs	r4, #0
    3aa0:	616b      	str	r3, [r5, #20]
    3aa2:	23e0      	movs	r3, #224	; 0xe0
    3aa4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    3aa8:	77ec      	strb	r4, [r5, #31]
    3aaa:	762c      	strb	r4, [r5, #24]
    3aac:	766c      	strb	r4, [r5, #25]
    3aae:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3ab0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3ab2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3ab6:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3ab8:	f7fe fec0 	bl	283c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3abc:	f7fe fbe6 	bl	228c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3ac0:	f04f 33ff 	mov.w	r3, #4294967295
    3ac4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3ac6:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    3ac8:	4d27      	ldr	r5, [pc, #156]	; (3b68 <z_cstart+0xec>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    3aca:	f240 1301 	movw	r3, #257	; 0x101
    3ace:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    3ad2:	ab06      	add	r3, sp, #24
    3ad4:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3ad6:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    3ad8:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
    3adc:	f7ff feb6 	bl	384c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3ae0:	2001      	movs	r0, #1
    3ae2:	f7ff feb3 	bl	384c <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3ae6:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
    3aea:	f000 fca3 	bl	4434 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3aee:	4b1f      	ldr	r3, [pc, #124]	; (3b6c <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
    3af0:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3af2:	491f      	ldr	r1, [pc, #124]	; (3b70 <z_cstart+0xf4>)
    3af4:	9305      	str	r3, [sp, #20]
    3af6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3afa:	4653      	mov	r3, sl
    3afc:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    3b00:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3b04:	9400      	str	r4, [sp, #0]
    3b06:	4630      	mov	r0, r6
    3b08:	f000 fd60 	bl	45cc <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3b0c:	7b73      	ldrb	r3, [r6, #13]
    3b0e:	4680      	mov	r8, r0
    3b10:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    3b14:	4630      	mov	r0, r6
    3b16:	7373      	strb	r3, [r6, #13]
    3b18:	f002 fb2b 	bl	6172 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    3b1c:	230f      	movs	r3, #15
    3b1e:	e9cd 4302 	strd	r4, r3, [sp, #8]
    3b22:	4914      	ldr	r1, [pc, #80]	; (3b74 <z_cstart+0xf8>)
    3b24:	4b14      	ldr	r3, [pc, #80]	; (3b78 <z_cstart+0xfc>)
    3b26:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3b2a:	e9cd b404 	strd	fp, r4, [sp, #16]
    3b2e:	e9cd 5400 	strd	r5, r4, [sp]
    3b32:	4638      	mov	r0, r7
    3b34:	f000 fd4a 	bl	45cc <z_setup_new_thread>
    3b38:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    3b3a:	60ef      	str	r7, [r5, #12]
    3b3c:	f023 0304 	bic.w	r3, r3, #4
    3b40:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    3b42:	f105 031c 	add.w	r3, r5, #28
	list->tail = (sys_dnode_t *)list;
    3b46:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].id = i;
    3b4a:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
    3b4c:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3b50:	4652      	mov	r2, sl
    3b52:	4641      	mov	r1, r8
    3b54:	4630      	mov	r0, r6
    3b56:	f7fe fb7f 	bl	2258 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3b5a:	bf00      	nop
    3b5c:	e000ed00 	.word	0xe000ed00
    3b60:	200003b0 	.word	0x200003b0
    3b64:	20000330 	.word	0x20000330
    3b68:	20000af4 	.word	0x20000af4
    3b6c:	0000696d 	.word	0x0000696d
    3b70:	200016e0 	.word	0x200016e0
    3b74:	20001b00 	.word	0x20001b00
    3b78:	000039d5 	.word	0x000039d5
    3b7c:	20002480 	.word	0x20002480
    3b80:	00003a49 	.word	0x00003a49

00003b84 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    3b84:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3b86:	4b0e      	ldr	r3, [pc, #56]	; (3bc0 <init_mem_slab_module+0x3c>)
    3b88:	4c0e      	ldr	r4, [pc, #56]	; (3bc4 <init_mem_slab_module+0x40>)
    3b8a:	42a3      	cmp	r3, r4
    3b8c:	d301      	bcc.n	3b92 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    3b8e:	2000      	movs	r0, #0
	return rc;
}
    3b90:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    3b92:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    3b96:	ea41 0200 	orr.w	r2, r1, r0
    3b9a:	f012 0203 	ands.w	r2, r2, #3
    3b9e:	d10b      	bne.n	3bb8 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    3ba0:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    3ba2:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    3ba4:	42aa      	cmp	r2, r5
    3ba6:	d101      	bne.n	3bac <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3ba8:	331c      	adds	r3, #28
    3baa:	e7ee      	b.n	3b8a <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    3bac:	695e      	ldr	r6, [r3, #20]
    3bae:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    3bb0:	3201      	adds	r2, #1
		slab->free_list = p;
    3bb2:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    3bb4:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    3bb6:	e7f5      	b.n	3ba4 <init_mem_slab_module+0x20>
		return -EINVAL;
    3bb8:	f06f 0015 	mvn.w	r0, #21
	return rc;
    3bbc:	e7e8      	b.n	3b90 <init_mem_slab_module+0xc>
    3bbe:	bf00      	nop
    3bc0:	20000194 	.word	0x20000194
    3bc4:	20000194 	.word	0x20000194

00003bc8 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    3bc8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    3bca:	460c      	mov	r4, r1
    3bcc:	4616      	mov	r6, r2
    3bce:	461f      	mov	r7, r3
    3bd0:	f04f 0320 	mov.w	r3, #32
    3bd4:	f3ef 8111 	mrs	r1, BASEPRI
    3bd8:	f383 8811 	msr	BASEPRI, r3
    3bdc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    3be0:	6943      	ldr	r3, [r0, #20]
    3be2:	b15b      	cbz	r3, 3bfc <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    3be4:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    3be6:	681b      	ldr	r3, [r3, #0]
    3be8:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    3bea:	6983      	ldr	r3, [r0, #24]
    3bec:	3301      	adds	r3, #1
    3bee:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    3bf0:	2000      	movs	r0, #0
	__asm__ volatile(
    3bf2:	f381 8811 	msr	BASEPRI, r1
    3bf6:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    3bfa:	e011      	b.n	3c20 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3bfc:	ea56 0207 	orrs.w	r2, r6, r7
    3c00:	d103      	bne.n	3c0a <k_mem_slab_alloc+0x42>
		*mem = NULL;
    3c02:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    3c04:	f06f 000b 	mvn.w	r0, #11
    3c08:	e7f3      	b.n	3bf2 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    3c0a:	4602      	mov	r2, r0
    3c0c:	e9cd 6700 	strd	r6, r7, [sp]
    3c10:	4804      	ldr	r0, [pc, #16]	; (3c24 <k_mem_slab_alloc+0x5c>)
    3c12:	f000 fb7d 	bl	4310 <z_pend_curr>
		if (result == 0) {
    3c16:	b918      	cbnz	r0, 3c20 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    3c18:	4b03      	ldr	r3, [pc, #12]	; (3c28 <k_mem_slab_alloc+0x60>)
    3c1a:	689b      	ldr	r3, [r3, #8]
    3c1c:	695b      	ldr	r3, [r3, #20]
    3c1e:	6023      	str	r3, [r4, #0]
}
    3c20:	b002      	add	sp, #8
    3c22:	bdd0      	pop	{r4, r6, r7, pc}
    3c24:	20000f9c 	.word	0x20000f9c
    3c28:	20000af4 	.word	0x20000af4

00003c2c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    3c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c2e:	4604      	mov	r4, r0
    3c30:	460d      	mov	r5, r1
	__asm__ volatile(
    3c32:	f04f 0320 	mov.w	r3, #32
    3c36:	f3ef 8611 	mrs	r6, BASEPRI
    3c3a:	f383 8811 	msr	BASEPRI, r3
    3c3e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
    3c42:	6947      	ldr	r7, [r0, #20]
    3c44:	b96f      	cbnz	r7, 3c62 <k_mem_slab_free+0x36>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    3c46:	f002 faef 	bl	6228 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    3c4a:	b150      	cbz	r0, 3c62 <k_mem_slab_free+0x36>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    3c4c:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    3c4e:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3c50:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
    3c52:	f002 fa8e 	bl	6172 <z_ready_thread>
			z_reschedule(&lock, key);
    3c56:	4631      	mov	r1, r6
    3c58:	4808      	ldr	r0, [pc, #32]	; (3c7c <k_mem_slab_free+0x50>)
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
    3c5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
    3c5e:	f000 b90f 	b.w	3e80 <z_reschedule>
	**(char ***) mem = slab->free_list;
    3c62:	682b      	ldr	r3, [r5, #0]
    3c64:	6962      	ldr	r2, [r4, #20]
    3c66:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    3c68:	682b      	ldr	r3, [r5, #0]
    3c6a:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    3c6c:	69a3      	ldr	r3, [r4, #24]
    3c6e:	3b01      	subs	r3, #1
    3c70:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    3c72:	f386 8811 	msr	BASEPRI, r6
    3c76:	f3bf 8f6f 	isb	sy
}
    3c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c7c:	20000f9c 	.word	0x20000f9c

00003c80 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    3c80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3c84:	4604      	mov	r4, r0
    3c86:	4616      	mov	r6, r2
    3c88:	461f      	mov	r7, r3
	__asm__ volatile(
    3c8a:	f04f 0320 	mov.w	r3, #32
    3c8e:	f3ef 8811 	mrs	r8, BASEPRI
    3c92:	f383 8811 	msr	BASEPRI, r3
    3c96:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3c9a:	68c3      	ldr	r3, [r0, #12]
    3c9c:	4a32      	ldr	r2, [pc, #200]	; (3d68 <z_impl_k_mutex_lock+0xe8>)
    3c9e:	b16b      	cbz	r3, 3cbc <z_impl_k_mutex_lock+0x3c>
    3ca0:	6880      	ldr	r0, [r0, #8]
    3ca2:	6891      	ldr	r1, [r2, #8]
    3ca4:	4288      	cmp	r0, r1
    3ca6:	d019      	beq.n	3cdc <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    3ca8:	ea56 0307 	orrs.w	r3, r6, r7
    3cac:	d118      	bne.n	3ce0 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    3cae:	f388 8811 	msr	BASEPRI, r8
    3cb2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    3cb6:	f06f 000f 	mvn.w	r0, #15
    3cba:	e00c      	b.n	3cd6 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    3cbc:	6891      	ldr	r1, [r2, #8]
    3cbe:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    3cc2:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    3cc4:	3301      	adds	r3, #1
    3cc6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    3cc8:	6893      	ldr	r3, [r2, #8]
    3cca:	60a3      	str	r3, [r4, #8]
    3ccc:	f388 8811 	msr	BASEPRI, r8
    3cd0:	f3bf 8f6f 	isb	sy
		return 0;
    3cd4:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    3cd6:	b002      	add	sp, #8
    3cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    3cdc:	6921      	ldr	r1, [r4, #16]
    3cde:	e7f0      	b.n	3cc2 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    3ce0:	f990 300e 	ldrsb.w	r3, [r0, #14]
    3ce4:	f991 100e 	ldrsb.w	r1, [r1, #14]
    3ce8:	4299      	cmp	r1, r3
    3cea:	bfa8      	it	ge
    3cec:	4619      	movge	r1, r3
    3cee:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3cf2:	428b      	cmp	r3, r1
    3cf4:	dd2c      	ble.n	3d50 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
    3cf6:	f000 fb59 	bl	43ac <z_set_prio>
    3cfa:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    3cfc:	e9cd 6700 	strd	r6, r7, [sp]
    3d00:	481a      	ldr	r0, [pc, #104]	; (3d6c <z_impl_k_mutex_lock+0xec>)
    3d02:	4622      	mov	r2, r4
    3d04:	4641      	mov	r1, r8
    3d06:	f000 fb03 	bl	4310 <z_pend_curr>
	if (got_mutex == 0) {
    3d0a:	2800      	cmp	r0, #0
    3d0c:	d0e3      	beq.n	3cd6 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    3d0e:	f04f 0320 	mov.w	r3, #32
    3d12:	f3ef 8611 	mrs	r6, BASEPRI
    3d16:	f383 8811 	msr	BASEPRI, r3
    3d1a:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3d1e:	6823      	ldr	r3, [r4, #0]
    3d20:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3d22:	42a3      	cmp	r3, r4
    3d24:	d007      	beq.n	3d36 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    3d26:	b133      	cbz	r3, 3d36 <z_impl_k_mutex_lock+0xb6>
    3d28:	f993 300e 	ldrsb.w	r3, [r3, #14]
    3d2c:	4299      	cmp	r1, r3
    3d2e:	bfa8      	it	ge
    3d30:	4619      	movge	r1, r3
    3d32:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    3d36:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    3d38:	f990 300e 	ldrsb.w	r3, [r0, #14]
    3d3c:	4299      	cmp	r1, r3
    3d3e:	d109      	bne.n	3d54 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
    3d40:	b16d      	cbz	r5, 3d5e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    3d42:	480a      	ldr	r0, [pc, #40]	; (3d6c <z_impl_k_mutex_lock+0xec>)
    3d44:	4631      	mov	r1, r6
    3d46:	f000 f89b 	bl	3e80 <z_reschedule>
	return -EAGAIN;
    3d4a:	f06f 000a 	mvn.w	r0, #10
    3d4e:	e7c2      	b.n	3cd6 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    3d50:	2500      	movs	r5, #0
    3d52:	e7d3      	b.n	3cfc <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
    3d54:	f000 fb2a 	bl	43ac <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    3d58:	2800      	cmp	r0, #0
    3d5a:	d1f2      	bne.n	3d42 <z_impl_k_mutex_lock+0xc2>
    3d5c:	e7f0      	b.n	3d40 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
    3d5e:	f386 8811 	msr	BASEPRI, r6
    3d62:	f3bf 8f6f 	isb	sy
    3d66:	e7f0      	b.n	3d4a <z_impl_k_mutex_lock+0xca>
    3d68:	20000af4 	.word	0x20000af4
    3d6c:	20000f9c 	.word	0x20000f9c

00003d70 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    3d70:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
    3d72:	6883      	ldr	r3, [r0, #8]
{
    3d74:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    3d76:	2b00      	cmp	r3, #0
    3d78:	d036      	beq.n	3de8 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    3d7a:	4a1e      	ldr	r2, [pc, #120]	; (3df4 <z_impl_k_mutex_unlock+0x84>)
    3d7c:	6892      	ldr	r2, [r2, #8]
    3d7e:	4293      	cmp	r3, r2
    3d80:	d135      	bne.n	3dee <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    3d82:	7bda      	ldrb	r2, [r3, #15]
    3d84:	3a01      	subs	r2, #1
    3d86:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    3d88:	68c3      	ldr	r3, [r0, #12]
    3d8a:	2b01      	cmp	r3, #1
    3d8c:	d005      	beq.n	3d9a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    3d8e:	3b01      	subs	r3, #1
    3d90:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    3d92:	f000 f8d9 	bl	3f48 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    3d96:	2000      	movs	r0, #0
}
    3d98:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    3d9a:	f04f 0320 	mov.w	r3, #32
    3d9e:	f3ef 8511 	mrs	r5, BASEPRI
    3da2:	f383 8811 	msr	BASEPRI, r3
    3da6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    3daa:	6901      	ldr	r1, [r0, #16]
    3dac:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    3dae:	f990 300e 	ldrsb.w	r3, [r0, #14]
    3db2:	4299      	cmp	r1, r3
    3db4:	d001      	beq.n	3dba <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    3db6:	f000 faf9 	bl	43ac <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    3dba:	4620      	mov	r0, r4
    3dbc:	f002 fa34 	bl	6228 <z_unpend_first_thread>
	mutex->owner = new_owner;
    3dc0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    3dc2:	b158      	cbz	r0, 3ddc <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    3dc4:	f990 200e 	ldrsb.w	r2, [r0, #14]
    3dc8:	6122      	str	r2, [r4, #16]
    3dca:	2200      	movs	r2, #0
    3dcc:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    3dce:	f002 f9d0 	bl	6172 <z_ready_thread>
		z_reschedule(&lock, key);
    3dd2:	4809      	ldr	r0, [pc, #36]	; (3df8 <z_impl_k_mutex_unlock+0x88>)
    3dd4:	4629      	mov	r1, r5
    3dd6:	f000 f853 	bl	3e80 <z_reschedule>
    3dda:	e7da      	b.n	3d92 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    3ddc:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    3dde:	f385 8811 	msr	BASEPRI, r5
    3de2:	f3bf 8f6f 	isb	sy
    3de6:	e7d4      	b.n	3d92 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    3de8:	f06f 0015 	mvn.w	r0, #21
    3dec:	e7d4      	b.n	3d98 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    3dee:	f04f 30ff 	mov.w	r0, #4294967295
    3df2:	e7d1      	b.n	3d98 <z_impl_k_mutex_unlock+0x28>
    3df4:	20000af4 	.word	0x20000af4
    3df8:	20000f9c 	.word	0x20000f9c

00003dfc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    3dfc:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    3dfe:	4c08      	ldr	r4, [pc, #32]	; (3e20 <z_reset_time_slice+0x24>)
    3e00:	6823      	ldr	r3, [r4, #0]
    3e02:	b15b      	cbz	r3, 3e1c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    3e04:	f7fe f86a 	bl	1edc <z_clock_elapsed>
    3e08:	4603      	mov	r3, r0
    3e0a:	6820      	ldr	r0, [r4, #0]
    3e0c:	4a05      	ldr	r2, [pc, #20]	; (3e24 <z_reset_time_slice+0x28>)
    3e0e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    3e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    3e14:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
    3e16:	2100      	movs	r1, #0
    3e18:	f002 ba60 	b.w	62dc <z_set_timeout_expiry>
}
    3e1c:	bd10      	pop	{r4, pc}
    3e1e:	bf00      	nop
    3e20:	20000b30 	.word	0x20000b30
    3e24:	20000af4 	.word	0x20000af4

00003e28 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    3e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e2a:	4605      	mov	r5, r0
    3e2c:	460c      	mov	r4, r1
	__asm__ volatile(
    3e2e:	f04f 0320 	mov.w	r3, #32
    3e32:	f3ef 8611 	mrs	r6, BASEPRI
    3e36:	f383 8811 	msr	BASEPRI, r3
    3e3a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    3e3e:	4b0d      	ldr	r3, [pc, #52]	; (3e74 <k_sched_time_slice_set+0x4c>)
    3e40:	2200      	movs	r2, #0
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    3e42:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    3e46:	f240 30e7 	movw	r0, #999	; 0x3e7
    3e4a:	2100      	movs	r1, #0
    3e4c:	615a      	str	r2, [r3, #20]
    3e4e:	fbe7 0105 	umlal	r0, r1, r7, r5
    3e52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3e56:	2300      	movs	r3, #0
    3e58:	f7fc f952 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    3e5c:	4b06      	ldr	r3, [pc, #24]	; (3e78 <k_sched_time_slice_set+0x50>)
    3e5e:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    3e60:	4b06      	ldr	r3, [pc, #24]	; (3e7c <k_sched_time_slice_set+0x54>)
    3e62:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    3e64:	f7ff ffca 	bl	3dfc <z_reset_time_slice>
	__asm__ volatile(
    3e68:	f386 8811 	msr	BASEPRI, r6
    3e6c:	f3bf 8f6f 	isb	sy
	}
}
    3e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e72:	bf00      	nop
    3e74:	20000af4 	.word	0x20000af4
    3e78:	20000b30 	.word	0x20000b30
    3e7c:	20000b2c 	.word	0x20000b2c

00003e80 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3e80:	b949      	cbnz	r1, 3e96 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3e82:	f3ef 8005 	mrs	r0, IPSR
    3e86:	b930      	cbnz	r0, 3e96 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
    3e88:	4b05      	ldr	r3, [pc, #20]	; (3ea0 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    3e8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3e8c:	689b      	ldr	r3, [r3, #8]
    3e8e:	429a      	cmp	r2, r3
    3e90:	d001      	beq.n	3e96 <z_reschedule+0x16>
	ret = arch_swap(key);
    3e92:	f7fe b921 	b.w	20d8 <arch_swap>
    3e96:	f381 8811 	msr	BASEPRI, r1
    3e9a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    3e9e:	4770      	bx	lr
    3ea0:	20000af4 	.word	0x20000af4

00003ea4 <k_sched_lock>:
	__asm__ volatile(
    3ea4:	f04f 0320 	mov.w	r3, #32
    3ea8:	f3ef 8111 	mrs	r1, BASEPRI
    3eac:	f383 8811 	msr	BASEPRI, r3
    3eb0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    3eb4:	4b04      	ldr	r3, [pc, #16]	; (3ec8 <k_sched_lock+0x24>)
    3eb6:	689a      	ldr	r2, [r3, #8]
    3eb8:	7bd3      	ldrb	r3, [r2, #15]
    3eba:	3b01      	subs	r3, #1
    3ebc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    3ebe:	f381 8811 	msr	BASEPRI, r1
    3ec2:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    3ec6:	4770      	bx	lr
    3ec8:	20000af4 	.word	0x20000af4

00003ecc <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    3ecc:	4b09      	ldr	r3, [pc, #36]	; (3ef4 <z_priq_dumb_remove+0x28>)
    3ece:	f103 022c 	add.w	r2, r3, #44	; 0x2c
    3ed2:	4282      	cmp	r2, r0
    3ed4:	d105      	bne.n	3ee2 <z_priq_dumb_remove+0x16>
    3ed6:	689b      	ldr	r3, [r3, #8]
    3ed8:	428b      	cmp	r3, r1
    3eda:	d102      	bne.n	3ee2 <z_priq_dumb_remove+0x16>
    3edc:	7b4b      	ldrb	r3, [r1, #13]
    3ede:	06db      	lsls	r3, r3, #27
    3ee0:	d106      	bne.n	3ef0 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    3ee2:	e9d1 3200 	ldrd	r3, r2, [r1]
    3ee6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    3ee8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3eea:	2300      	movs	r3, #0
	node->prev = NULL;
    3eec:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    3ef0:	4770      	bx	lr
    3ef2:	bf00      	nop
    3ef4:	20000af4 	.word	0x20000af4

00003ef8 <update_cache>:
{
    3ef8:	b538      	push	{r3, r4, r5, lr}
    3efa:	4c12      	ldr	r4, [pc, #72]	; (3f44 <update_cache+0x4c>)
	if (_current_cpu->pending_abort != NULL) {
    3efc:	6923      	ldr	r3, [r4, #16]
    3efe:	68a2      	ldr	r2, [r4, #8]
{
    3f00:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
    3f02:	b10b      	cbz	r3, 3f08 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
    3f04:	68e5      	ldr	r5, [r4, #12]
    3f06:	e00c      	b.n	3f22 <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
    3f08:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    3f0c:	f002 f927 	bl	615e <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
    3f10:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
    3f12:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    3f14:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
    3f16:	bf44      	itt	mi
    3f18:	f043 0308 	orrmi.w	r3, r3, #8
    3f1c:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
    3f1e:	2d00      	cmp	r5, #0
    3f20:	d0f0      	beq.n	3f04 <update_cache+0xc>
	if (preempt_ok != 0) {
    3f22:	b949      	cbnz	r1, 3f38 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
    3f24:	7b53      	ldrb	r3, [r2, #13]
    3f26:	06db      	lsls	r3, r3, #27
    3f28:	d106      	bne.n	3f38 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3f2a:	69ab      	ldr	r3, [r5, #24]
    3f2c:	b923      	cbnz	r3, 3f38 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
    3f2e:	89d3      	ldrh	r3, [r2, #14]
    3f30:	2b7f      	cmp	r3, #127	; 0x7f
    3f32:	d901      	bls.n	3f38 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
    3f34:	62a2      	str	r2, [r4, #40]	; 0x28
}
    3f36:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    3f38:	4295      	cmp	r5, r2
    3f3a:	d001      	beq.n	3f40 <update_cache+0x48>
			z_reset_time_slice();
    3f3c:	f7ff ff5e 	bl	3dfc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    3f40:	62a5      	str	r5, [r4, #40]	; 0x28
}
    3f42:	e7f8      	b.n	3f36 <update_cache+0x3e>
    3f44:	20000af4 	.word	0x20000af4

00003f48 <k_sched_unlock>:
{
    3f48:	b510      	push	{r4, lr}
	__asm__ volatile(
    3f4a:	f04f 0320 	mov.w	r3, #32
    3f4e:	f3ef 8411 	mrs	r4, BASEPRI
    3f52:	f383 8811 	msr	BASEPRI, r3
    3f56:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    3f5a:	4b08      	ldr	r3, [pc, #32]	; (3f7c <k_sched_unlock+0x34>)
    3f5c:	689a      	ldr	r2, [r3, #8]
    3f5e:	7bd3      	ldrb	r3, [r2, #15]
    3f60:	3301      	adds	r3, #1
    3f62:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    3f64:	2000      	movs	r0, #0
    3f66:	f7ff ffc7 	bl	3ef8 <update_cache>
	__asm__ volatile(
    3f6a:	f384 8811 	msr	BASEPRI, r4
    3f6e:	f3bf 8f6f 	isb	sy
}
    3f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    3f76:	f002 b8dc 	b.w	6132 <z_reschedule_unlocked>
    3f7a:	bf00      	nop
    3f7c:	20000af4 	.word	0x20000af4

00003f80 <ready_thread>:
{
    3f80:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3f82:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    3f86:	7b43      	ldrb	r3, [r0, #13]
    3f88:	2a00      	cmp	r2, #0
    3f8a:	db2c      	blt.n	3fe6 <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3f8c:	06db      	lsls	r3, r3, #27
    3f8e:	d12a      	bne.n	3fe6 <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
    3f90:	6983      	ldr	r3, [r0, #24]
    3f92:	bb43      	cbnz	r3, 3fe6 <ready_thread+0x66>
	return list->head == list;
    3f94:	4a15      	ldr	r2, [pc, #84]	; (3fec <ready_thread+0x6c>)
    3f96:	4611      	mov	r1, r2
    3f98:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3f9c:	428c      	cmp	r4, r1
    3f9e:	bf18      	it	ne
    3fa0:	4623      	movne	r3, r4
    3fa2:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3fa4:	6b14      	ldr	r4, [r2, #48]	; 0x30
    3fa6:	bf38      	it	cc
    3fa8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3faa:	b1b3      	cbz	r3, 3fda <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
    3fac:	f990 600e 	ldrsb.w	r6, [r0, #14]
    3fb0:	f993 500e 	ldrsb.w	r5, [r3, #14]
    3fb4:	42ae      	cmp	r6, r5
    3fb6:	db03      	blt.n	3fc0 <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
    3fb8:	42a3      	cmp	r3, r4
    3fba:	d00e      	beq.n	3fda <ready_thread+0x5a>
    3fbc:	681b      	ldr	r3, [r3, #0]
    3fbe:	e7f4      	b.n	3faa <ready_thread+0x2a>
	node->prev = successor->prev;
    3fc0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3fc2:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    3fc6:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    3fc8:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    3fca:	7b43      	ldrb	r3, [r0, #13]
    3fcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3fd0:	7343      	strb	r3, [r0, #13]
}
    3fd2:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    3fd4:	2000      	movs	r0, #0
    3fd6:	f7ff bf8f 	b.w	3ef8 <update_cache>
	node->prev = list->tail;
    3fda:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    3fde:	6b13      	ldr	r3, [r2, #48]	; 0x30
    3fe0:	6018      	str	r0, [r3, #0]
	list->tail = node;
    3fe2:	6310      	str	r0, [r2, #48]	; 0x30
}
    3fe4:	e7f1      	b.n	3fca <ready_thread+0x4a>
}
    3fe6:	bc70      	pop	{r4, r5, r6}
    3fe8:	4770      	bx	lr
    3fea:	bf00      	nop
    3fec:	20000af4 	.word	0x20000af4

00003ff0 <z_sched_start>:
{
    3ff0:	b510      	push	{r4, lr}
	__asm__ volatile(
    3ff2:	f04f 0220 	mov.w	r2, #32
    3ff6:	f3ef 8411 	mrs	r4, BASEPRI
    3ffa:	f382 8811 	msr	BASEPRI, r2
    3ffe:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    4002:	7b42      	ldrb	r2, [r0, #13]
    4004:	0751      	lsls	r1, r2, #29
    4006:	d404      	bmi.n	4012 <z_sched_start+0x22>
	__asm__ volatile(
    4008:	f384 8811 	msr	BASEPRI, r4
    400c:	f3bf 8f6f 	isb	sy
}
    4010:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4012:	f022 0204 	bic.w	r2, r2, #4
    4016:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    4018:	f7ff ffb2 	bl	3f80 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    401c:	4621      	mov	r1, r4
    401e:	4802      	ldr	r0, [pc, #8]	; (4028 <z_sched_start+0x38>)
}
    4020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    4024:	f7ff bf2c 	b.w	3e80 <z_reschedule>
    4028:	20000f9c 	.word	0x20000f9c

0000402c <move_thread_to_end_of_prio_q>:
{
    402c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    402e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4032:	2b00      	cmp	r3, #0
{
    4034:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4036:	da02      	bge.n	403e <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    4038:	4817      	ldr	r0, [pc, #92]	; (4098 <move_thread_to_end_of_prio_q+0x6c>)
    403a:	f7ff ff47 	bl	3ecc <z_priq_dumb_remove>
	return list->head == list;
    403e:	4a17      	ldr	r2, [pc, #92]	; (409c <move_thread_to_end_of_prio_q+0x70>)
    4040:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4042:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return list->head == list;
    4044:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4048:	4283      	cmp	r3, r0
    404a:	bf08      	it	eq
    404c:	2300      	moveq	r3, #0
    404e:	2b00      	cmp	r3, #0
    4050:	bf38      	it	cc
    4052:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4054:	b1d3      	cbz	r3, 408c <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
    4056:	f991 600e 	ldrsb.w	r6, [r1, #14]
    405a:	f993 500e 	ldrsb.w	r5, [r3, #14]
    405e:	42ae      	cmp	r6, r5
    4060:	db03      	blt.n	406a <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    4062:	42a3      	cmp	r3, r4
    4064:	d012      	beq.n	408c <move_thread_to_end_of_prio_q+0x60>
    4066:	681b      	ldr	r3, [r3, #0]
    4068:	e7f4      	b.n	4054 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
    406a:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
    406c:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
    4070:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    4072:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
    4074:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
    4076:	6890      	ldr	r0, [r2, #8]
    4078:	f063 037f 	orn	r3, r3, #127	; 0x7f
    407c:	734b      	strb	r3, [r1, #13]
    407e:	1a43      	subs	r3, r0, r1
    4080:	4258      	negs	r0, r3
}
    4082:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    4086:	4158      	adcs	r0, r3
    4088:	f7ff bf36 	b.w	3ef8 <update_cache>
	node->prev = list->tail;
    408c:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
    4090:	6b13      	ldr	r3, [r2, #48]	; 0x30
    4092:	6019      	str	r1, [r3, #0]
	list->tail = node;
    4094:	6311      	str	r1, [r2, #48]	; 0x30
}
    4096:	e7ed      	b.n	4074 <move_thread_to_end_of_prio_q+0x48>
    4098:	20000b20 	.word	0x20000b20
    409c:	20000af4 	.word	0x20000af4

000040a0 <z_time_slice>:
{
    40a0:	b570      	push	{r4, r5, r6, lr}
    40a2:	4601      	mov	r1, r0
	__asm__ volatile(
    40a4:	f04f 0320 	mov.w	r3, #32
    40a8:	f3ef 8411 	mrs	r4, BASEPRI
    40ac:	f383 8811 	msr	BASEPRI, r3
    40b0:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    40b4:	4b16      	ldr	r3, [pc, #88]	; (4110 <z_time_slice+0x70>)
    40b6:	4a17      	ldr	r2, [pc, #92]	; (4114 <z_time_slice+0x74>)
    40b8:	6898      	ldr	r0, [r3, #8]
    40ba:	6815      	ldr	r5, [r2, #0]
    40bc:	42a8      	cmp	r0, r5
    40be:	461d      	mov	r5, r3
    40c0:	d106      	bne.n	40d0 <z_time_slice+0x30>
			z_reset_time_slice();
    40c2:	f7ff fe9b 	bl	3dfc <z_reset_time_slice>
	__asm__ volatile(
    40c6:	f384 8811 	msr	BASEPRI, r4
    40ca:	f3bf 8f6f 	isb	sy
}
    40ce:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    40d0:	2600      	movs	r6, #0
    40d2:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    40d4:	4a10      	ldr	r2, [pc, #64]	; (4118 <z_time_slice+0x78>)
    40d6:	6812      	ldr	r2, [r2, #0]
    40d8:	b1ba      	cbz	r2, 410a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    40da:	89c2      	ldrh	r2, [r0, #14]
    40dc:	2a7f      	cmp	r2, #127	; 0x7f
    40de:	d814      	bhi.n	410a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    40e0:	7b42      	ldrb	r2, [r0, #13]
    40e2:	06d2      	lsls	r2, r2, #27
    40e4:	d111      	bne.n	410a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    40e6:	4a0d      	ldr	r2, [pc, #52]	; (411c <z_time_slice+0x7c>)
    40e8:	f990 600e 	ldrsb.w	r6, [r0, #14]
    40ec:	6812      	ldr	r2, [r2, #0]
    40ee:	4296      	cmp	r6, r2
    40f0:	db0b      	blt.n	410a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    40f2:	4a0b      	ldr	r2, [pc, #44]	; (4120 <z_time_slice+0x80>)
    40f4:	4290      	cmp	r0, r2
    40f6:	d008      	beq.n	410a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    40f8:	695a      	ldr	r2, [r3, #20]
    40fa:	428a      	cmp	r2, r1
    40fc:	dc02      	bgt.n	4104 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
    40fe:	f7ff ff95 	bl	402c <move_thread_to_end_of_prio_q>
    4102:	e7de      	b.n	40c2 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
    4104:	1a52      	subs	r2, r2, r1
    4106:	615a      	str	r2, [r3, #20]
    4108:	e7dd      	b.n	40c6 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
    410a:	2300      	movs	r3, #0
    410c:	616b      	str	r3, [r5, #20]
    410e:	e7da      	b.n	40c6 <z_time_slice+0x26>
    4110:	20000af4 	.word	0x20000af4
    4114:	20000b28 	.word	0x20000b28
    4118:	20000b30 	.word	0x20000b30
    411c:	20000b2c 	.word	0x20000b2c
    4120:	20000330 	.word	0x20000330

00004124 <z_impl_k_thread_suspend>:
{
    4124:	b570      	push	{r4, r5, r6, lr}
    4126:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4128:	3018      	adds	r0, #24
    412a:	f002 f8b1 	bl	6290 <z_abort_timeout>
	__asm__ volatile(
    412e:	f04f 0320 	mov.w	r3, #32
    4132:	f3ef 8611 	mrs	r6, BASEPRI
    4136:	f383 8811 	msr	BASEPRI, r3
    413a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    413e:	f994 300d 	ldrsb.w	r3, [r4, #13]
    4142:	2b00      	cmp	r3, #0
    4144:	da07      	bge.n	4156 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    4146:	480f      	ldr	r0, [pc, #60]	; (4184 <z_impl_k_thread_suspend+0x60>)
    4148:	4621      	mov	r1, r4
    414a:	f7ff febf 	bl	3ecc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    414e:	7b63      	ldrb	r3, [r4, #13]
    4150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4154:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    4156:	4d0c      	ldr	r5, [pc, #48]	; (4188 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4158:	7b63      	ldrb	r3, [r4, #13]
    415a:	68a8      	ldr	r0, [r5, #8]
    415c:	f043 0310 	orr.w	r3, r3, #16
    4160:	7363      	strb	r3, [r4, #13]
    4162:	1b03      	subs	r3, r0, r4
    4164:	4258      	negs	r0, r3
    4166:	4158      	adcs	r0, r3
    4168:	f7ff fec6 	bl	3ef8 <update_cache>
	__asm__ volatile(
    416c:	f386 8811 	msr	BASEPRI, r6
    4170:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    4174:	68ab      	ldr	r3, [r5, #8]
    4176:	42a3      	cmp	r3, r4
    4178:	d103      	bne.n	4182 <z_impl_k_thread_suspend+0x5e>
}
    417a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    417e:	f001 bfd8 	b.w	6132 <z_reschedule_unlocked>
}
    4182:	bd70      	pop	{r4, r5, r6, pc}
    4184:	20000b20 	.word	0x20000b20
    4188:	20000af4 	.word	0x20000af4

0000418c <z_thread_single_abort>:
{
    418c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4190:	4604      	mov	r4, r0
	__asm__ volatile(
    4192:	f04f 0320 	mov.w	r3, #32
    4196:	f3ef 8211 	mrs	r2, BASEPRI
    419a:	f383 8811 	msr	BASEPRI, r3
    419e:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
    41a2:	7b43      	ldrb	r3, [r0, #13]
    41a4:	f013 0f28 	tst.w	r3, #40	; 0x28
    41a8:	d005      	beq.n	41b6 <z_thread_single_abort+0x2a>
	__asm__ volatile(
    41aa:	f382 8811 	msr	BASEPRI, r2
    41ae:	f3bf 8f6f 	isb	sy
}
    41b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
    41b6:	f043 0320 	orr.w	r3, r3, #32
    41ba:	7343      	strb	r3, [r0, #13]
    41bc:	f382 8811 	msr	BASEPRI, r2
    41c0:	f3bf 8f6f 	isb	sy
    41c4:	3018      	adds	r0, #24
    41c6:	f002 f863 	bl	6290 <z_abort_timeout>
	__asm__ volatile(
    41ca:	f04f 0320 	mov.w	r3, #32
    41ce:	f3ef 8611 	mrs	r6, BASEPRI
    41d2:	f383 8811 	msr	BASEPRI, r3
    41d6:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    41da:	7b63      	ldrb	r3, [r4, #13]
    41dc:	06d8      	lsls	r0, r3, #27
    41de:	d116      	bne.n	420e <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
    41e0:	69a2      	ldr	r2, [r4, #24]
    41e2:	b9a2      	cbnz	r2, 420e <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
    41e4:	0619      	lsls	r1, r3, #24
    41e6:	d507      	bpl.n	41f8 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
    41e8:	4826      	ldr	r0, [pc, #152]	; (4284 <z_thread_single_abort+0xf8>)
    41ea:	4621      	mov	r1, r4
    41ec:	f7ff fe6e 	bl	3ecc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    41f0:	7b63      	ldrb	r3, [r4, #13]
    41f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    41f6:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    41f8:	4b23      	ldr	r3, [pc, #140]	; (4288 <z_thread_single_abort+0xfc>)
    41fa:	6898      	ldr	r0, [r3, #8]
    41fc:	1b02      	subs	r2, r0, r4
    41fe:	4250      	negs	r0, r2
    4200:	4150      	adcs	r0, r2
    4202:	f7ff fe79 	bl	3ef8 <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    4206:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
    420a:	2700      	movs	r7, #0
    420c:	e01d      	b.n	424a <z_thread_single_abort+0xbe>
			if (z_is_thread_pending(thread)) {
    420e:	079b      	lsls	r3, r3, #30
    4210:	d5f9      	bpl.n	4206 <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
    4212:	68a0      	ldr	r0, [r4, #8]
    4214:	4621      	mov	r1, r4
    4216:	f7ff fe59 	bl	3ecc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    421a:	7b63      	ldrb	r3, [r4, #13]
    421c:	f023 0302 	bic.w	r3, r3, #2
    4220:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    4222:	2300      	movs	r3, #0
    4224:	60a3      	str	r3, [r4, #8]
    4226:	e7ee      	b.n	4206 <z_thread_single_abort+0x7a>
    4228:	f105 0018 	add.w	r0, r5, #24
    422c:	f002 f830 	bl	6290 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    4230:	68a8      	ldr	r0, [r5, #8]
    4232:	4629      	mov	r1, r5
    4234:	f7ff fe4a 	bl	3ecc <z_priq_dumb_remove>
    4238:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    423a:	60af      	str	r7, [r5, #8]
    423c:	f023 0302 	bic.w	r3, r3, #2
    4240:	736b      	strb	r3, [r5, #13]
    4242:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
    4244:	4628      	mov	r0, r5
    4246:	f7ff fe9b 	bl	3f80 <ready_thread>
	return list->head == list;
    424a:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    424c:	4545      	cmp	r5, r8
    424e:	d001      	beq.n	4254 <z_thread_single_abort+0xc8>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    4250:	2d00      	cmp	r5, #0
    4252:	d1e9      	bne.n	4228 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
    4254:	4b0c      	ldr	r3, [pc, #48]	; (4288 <z_thread_single_abort+0xfc>)
    4256:	689a      	ldr	r2, [r3, #8]
    4258:	4b0c      	ldr	r3, [pc, #48]	; (428c <z_thread_single_abort+0x100>)
    425a:	429a      	cmp	r2, r3
    425c:	d102      	bne.n	4264 <z_thread_single_abort+0xd8>
			update_cache(1);
    425e:	2001      	movs	r0, #1
    4260:	f7ff fe4a 	bl	3ef8 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
    4264:	7b63      	ldrb	r3, [r4, #13]
    4266:	f043 0308 	orr.w	r3, r3, #8
    426a:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
    426c:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
    426e:	f386 8811 	msr	BASEPRI, r6
    4272:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
    4276:	2b00      	cmp	r3, #0
    4278:	d09b      	beq.n	41b2 <z_thread_single_abort+0x26>
		fn_abort(thread);
    427a:	4620      	mov	r0, r4
}
    427c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
    4280:	4718      	bx	r3
    4282:	bf00      	nop
    4284:	20000b20 	.word	0x20000b20
    4288:	20000af4 	.word	0x20000af4
    428c:	20000330 	.word	0x20000330

00004290 <unready_thread>:
{
    4290:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    4292:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4296:	2b00      	cmp	r3, #0
{
    4298:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    429a:	da06      	bge.n	42aa <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    429c:	4807      	ldr	r0, [pc, #28]	; (42bc <unready_thread+0x2c>)
    429e:	f7ff fe15 	bl	3ecc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    42a2:	7b4b      	ldrb	r3, [r1, #13]
    42a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    42a8:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
    42aa:	4b05      	ldr	r3, [pc, #20]	; (42c0 <unready_thread+0x30>)
    42ac:	6898      	ldr	r0, [r3, #8]
    42ae:	1a43      	subs	r3, r0, r1
    42b0:	4258      	negs	r0, r3
    42b2:	4158      	adcs	r0, r3
}
    42b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    42b8:	f7ff be1e 	b.w	3ef8 <update_cache>
    42bc:	20000b20 	.word	0x20000b20
    42c0:	20000af4 	.word	0x20000af4

000042c4 <pend>:
{
    42c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42c8:	4606      	mov	r6, r0
    42ca:	4614      	mov	r4, r2
    42cc:	461d      	mov	r5, r3
	__asm__ volatile(
    42ce:	f04f 0320 	mov.w	r3, #32
    42d2:	f3ef 8711 	mrs	r7, BASEPRI
    42d6:	f383 8811 	msr	BASEPRI, r3
    42da:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    42de:	f001 ff78 	bl	61d2 <add_to_waitq_locked>
	__asm__ volatile(
    42e2:	f387 8811 	msr	BASEPRI, r7
    42e6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    42ea:	1c6b      	adds	r3, r5, #1
    42ec:	bf08      	it	eq
    42ee:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    42f2:	d008      	beq.n	4306 <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    42f4:	4622      	mov	r2, r4
    42f6:	462b      	mov	r3, r5
    42f8:	f106 0018 	add.w	r0, r6, #24
    42fc:	4903      	ldr	r1, [pc, #12]	; (430c <pend+0x48>)
}
    42fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4302:	f000 baa9 	b.w	4858 <z_add_timeout>
    4306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    430a:	bf00      	nop
    430c:	00006193 	.word	0x00006193

00004310 <z_pend_curr>:
{
    4310:	b510      	push	{r4, lr}
	pending_current = _current;
    4312:	4b07      	ldr	r3, [pc, #28]	; (4330 <z_pend_curr+0x20>)
    4314:	6898      	ldr	r0, [r3, #8]
    4316:	4b07      	ldr	r3, [pc, #28]	; (4334 <z_pend_curr+0x24>)
{
    4318:	460c      	mov	r4, r1
	pending_current = _current;
    431a:	6018      	str	r0, [r3, #0]
{
    431c:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    431e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4322:	f7ff ffcf 	bl	42c4 <pend>
    4326:	4620      	mov	r0, r4
}
    4328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    432c:	f7fd bed4 	b.w	20d8 <arch_swap>
    4330:	20000af4 	.word	0x20000af4
    4334:	20000b28 	.word	0x20000b28

00004338 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
    4338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    433c:	4605      	mov	r5, r0
    433e:	460f      	mov	r7, r1
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + z_tick_get_32();
    4340:	f001 ffe6 	bl	6310 <z_tick_get_32>
    4344:	4604      	mov	r4, r0
	__asm__ volatile(
    4346:	f04f 0320 	mov.w	r3, #32
    434a:	f3ef 8811 	mrs	r8, BASEPRI
    434e:	f383 8811 	msr	BASEPRI, r3
    4352:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    4356:	4e12      	ldr	r6, [pc, #72]	; (43a0 <z_tick_sleep.part.0+0x68>)
    4358:	4b12      	ldr	r3, [pc, #72]	; (43a4 <z_tick_sleep.part.0+0x6c>)
    435a:	68b0      	ldr	r0, [r6, #8]
    435c:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    435e:	f7ff ff97 	bl	4290 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    4362:	68b0      	ldr	r0, [r6, #8]
    4364:	4910      	ldr	r1, [pc, #64]	; (43a8 <z_tick_sleep.part.0+0x70>)
    4366:	462a      	mov	r2, r5
    4368:	463b      	mov	r3, r7
    436a:	3018      	adds	r0, #24
    436c:	f000 fa74 	bl	4858 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4370:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4372:	7b53      	ldrb	r3, [r2, #13]
    4374:	f043 0310 	orr.w	r3, r3, #16
    4378:	7353      	strb	r3, [r2, #13]
    437a:	4640      	mov	r0, r8
    437c:	f7fd feac 	bl	20d8 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
    4380:	f001 ffc6 	bl	6310 <z_tick_get_32>
	expected_wakeup_ticks = ticks + z_tick_get_32();
    4384:	442c      	add	r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
    4386:	1a24      	subs	r4, r4, r0
    4388:	f04f 0500 	mov.w	r5, #0
    438c:	f165 0500 	sbc.w	r5, r5, #0
    4390:	2c00      	cmp	r4, #0
    4392:	f175 0300 	sbcs.w	r3, r5, #0
    4396:	bfb8      	it	lt
    4398:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
    439a:	4620      	mov	r0, r4
    439c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    43a0:	20000af4 	.word	0x20000af4
    43a4:	20000b28 	.word	0x20000b28
    43a8:	00006193 	.word	0x00006193

000043ac <z_set_prio>:
{
    43ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43b0:	4604      	mov	r4, r0
    43b2:	f04f 0320 	mov.w	r3, #32
    43b6:	f3ef 8811 	mrs	r8, BASEPRI
    43ba:	f383 8811 	msr	BASEPRI, r3
    43be:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    43c2:	7b43      	ldrb	r3, [r0, #13]
    43c4:	06db      	lsls	r3, r3, #27
    43c6:	b24e      	sxtb	r6, r1
    43c8:	d12e      	bne.n	4428 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
    43ca:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    43cc:	bb65      	cbnz	r5, 4428 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    43ce:	4f18      	ldr	r7, [pc, #96]	; (4430 <z_set_prio+0x84>)
    43d0:	4621      	mov	r1, r4
    43d2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    43d6:	f7ff fd79 	bl	3ecc <z_priq_dumb_remove>
	return list->head == list;
    43da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    43dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
				thread->base.prio = prio;
    43de:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    43e0:	4283      	cmp	r3, r0
    43e2:	bf18      	it	ne
    43e4:	461d      	movne	r5, r3
    43e6:	2d00      	cmp	r5, #0
    43e8:	bf38      	it	cc
    43ea:	2500      	movcc	r5, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    43ec:	b1b5      	cbz	r5, 441c <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
    43ee:	f995 100e 	ldrsb.w	r1, [r5, #14]
    43f2:	42b1      	cmp	r1, r6
    43f4:	dc03      	bgt.n	43fe <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
    43f6:	42aa      	cmp	r2, r5
    43f8:	d010      	beq.n	441c <z_set_prio+0x70>
    43fa:	682d      	ldr	r5, [r5, #0]
    43fc:	e7f6      	b.n	43ec <z_set_prio+0x40>
	node->prev = successor->prev;
    43fe:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
    4400:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
    4404:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4406:	606c      	str	r4, [r5, #4]
			update_cache(1);
    4408:	2001      	movs	r0, #1
    440a:	f7ff fd75 	bl	3ef8 <update_cache>
    440e:	2001      	movs	r0, #1
	__asm__ volatile(
    4410:	f388 8811 	msr	BASEPRI, r8
    4414:	f3bf 8f6f 	isb	sy
}
    4418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
    441c:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
    4420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4422:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4424:	633c      	str	r4, [r7, #48]	; 0x30
}
    4426:	e7ef      	b.n	4408 <z_set_prio+0x5c>
			thread->base.prio = prio;
    4428:	73a6      	strb	r6, [r4, #14]
    442a:	2000      	movs	r0, #0
    442c:	e7f0      	b.n	4410 <z_set_prio+0x64>
    442e:	bf00      	nop
    4430:	20000af4 	.word	0x20000af4

00004434 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    4434:	4b04      	ldr	r3, [pc, #16]	; (4448 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    4436:	2100      	movs	r1, #0
    4438:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
    443c:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
    4440:	4608      	mov	r0, r1
    4442:	f7ff bcf1 	b.w	3e28 <k_sched_time_slice_set>
    4446:	bf00      	nop
    4448:	20000af4 	.word	0x20000af4

0000444c <z_impl_k_yield>:
{
    444c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    444e:	4c24      	ldr	r4, [pc, #144]	; (44e0 <z_impl_k_yield+0x94>)
    4450:	4b24      	ldr	r3, [pc, #144]	; (44e4 <z_impl_k_yield+0x98>)
    4452:	68a2      	ldr	r2, [r4, #8]
    4454:	429a      	cmp	r2, r3
    4456:	d030      	beq.n	44ba <z_impl_k_yield+0x6e>
	__asm__ volatile(
    4458:	f04f 0320 	mov.w	r3, #32
    445c:	f3ef 8511 	mrs	r5, BASEPRI
    4460:	f383 8811 	msr	BASEPRI, r3
    4464:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    4468:	68a1      	ldr	r1, [r4, #8]
    446a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    446e:	f7ff fd2d 	bl	3ecc <z_priq_dumb_remove>
	return list->head == list;
    4472:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
    4474:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4476:	6b21      	ldr	r1, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4478:	4283      	cmp	r3, r0
    447a:	bf08      	it	eq
    447c:	2300      	moveq	r3, #0
    447e:	2b00      	cmp	r3, #0
    4480:	bf38      	it	cc
    4482:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4484:	b32b      	cbz	r3, 44d2 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
    4486:	f992 700e 	ldrsb.w	r7, [r2, #14]
    448a:	f993 600e 	ldrsb.w	r6, [r3, #14]
    448e:	42b7      	cmp	r7, r6
    4490:	db03      	blt.n	449a <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
    4492:	428b      	cmp	r3, r1
    4494:	d01d      	beq.n	44d2 <z_impl_k_yield+0x86>
    4496:	681b      	ldr	r3, [r3, #0]
    4498:	e7f4      	b.n	4484 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
    449a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    449c:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
    44a0:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    44a2:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
    44a4:	7b53      	ldrb	r3, [r2, #13]
    44a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    44aa:	7353      	strb	r3, [r2, #13]
			update_cache(1);
    44ac:	2001      	movs	r0, #1
    44ae:	f7ff fd23 	bl	3ef8 <update_cache>
	__asm__ volatile(
    44b2:	f385 8811 	msr	BASEPRI, r5
    44b6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    44ba:	f04f 0320 	mov.w	r3, #32
    44be:	f3ef 8011 	mrs	r0, BASEPRI
    44c2:	f383 8811 	msr	BASEPRI, r3
    44c6:	f3bf 8f6f 	isb	sy
}
    44ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    44ce:	f7fd be03 	b.w	20d8 <arch_swap>
	node->prev = list->tail;
    44d2:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
    44d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    44d8:	601a      	str	r2, [r3, #0]
	list->tail = node;
    44da:	6322      	str	r2, [r4, #48]	; 0x30
}
    44dc:	e7e2      	b.n	44a4 <z_impl_k_yield+0x58>
    44de:	bf00      	nop
    44e0:	20000af4 	.word	0x20000af4
    44e4:	20000330 	.word	0x20000330

000044e8 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    44e8:	f1b1 3fff 	cmp.w	r1, #4294967295
    44ec:	bf08      	it	eq
    44ee:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    44f2:	b508      	push	{r3, lr}
    44f4:	4602      	mov	r2, r0
    44f6:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    44f8:	d106      	bne.n	4508 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
    44fa:	4b0b      	ldr	r3, [pc, #44]	; (4528 <z_impl_k_sleep+0x40>)
    44fc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    44fe:	f7ff fe11 	bl	4124 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    4502:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
    4506:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
    4508:	4313      	orrs	r3, r2
    450a:	d10a      	bne.n	4522 <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
    450c:	f7ff ff9e 	bl	444c <z_impl_k_yield>
		return 0;
    4510:	2000      	movs	r0, #0
		} else {
			return (t * to_hz + off) / from_hz;
    4512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4516:	fb80 2303 	smull	r2, r3, r0, r3
    451a:	0bd0      	lsrs	r0, r2, #15
    451c:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    4520:	e7f1      	b.n	4506 <z_impl_k_sleep+0x1e>
    4522:	f7ff ff09 	bl	4338 <z_tick_sleep.part.0>
    4526:	e7f4      	b.n	4512 <z_impl_k_sleep+0x2a>
    4528:	20000af4 	.word	0x20000af4

0000452c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    452c:	4b01      	ldr	r3, [pc, #4]	; (4534 <z_impl_k_current_get+0x8>)
    452e:	6898      	ldr	r0, [r3, #8]
    4530:	4770      	bx	lr
    4532:	bf00      	nop
    4534:	20000af4 	.word	0x20000af4

00004538 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4538:	b538      	push	{r3, r4, r5, lr}
    453a:	4604      	mov	r4, r0
    453c:	f04f 0320 	mov.w	r3, #32
    4540:	f3ef 8511 	mrs	r5, BASEPRI
    4544:	f383 8811 	msr	BASEPRI, r3
    4548:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
    454c:	f001 fe6c 	bl	6228 <z_unpend_first_thread>

	if (thread != NULL) {
    4550:	b148      	cbz	r0, 4566 <z_impl_k_sem_give+0x2e>
    4552:	2200      	movs	r2, #0
    4554:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    4556:	f001 fe0c 	bl	6172 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    455a:	4629      	mov	r1, r5
    455c:	4805      	ldr	r0, [pc, #20]	; (4574 <z_impl_k_sem_give+0x3c>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
    455e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    4562:	f7ff bc8d 	b.w	3e80 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4566:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    456a:	429a      	cmp	r2, r3
    456c:	bf18      	it	ne
    456e:	3301      	addne	r3, #1
    4570:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    4572:	e7f2      	b.n	455a <z_impl_k_sem_give+0x22>
    4574:	20000f9c 	.word	0x20000f9c

00004578 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4578:	b537      	push	{r0, r1, r2, r4, r5, lr}
    457a:	4614      	mov	r4, r2
    457c:	461d      	mov	r5, r3
    457e:	f04f 0320 	mov.w	r3, #32
    4582:	f3ef 8111 	mrs	r1, BASEPRI
    4586:	f383 8811 	msr	BASEPRI, r3
    458a:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
    458e:	6883      	ldr	r3, [r0, #8]
    4590:	b143      	cbz	r3, 45a4 <z_impl_k_sem_take+0x2c>
		sem->count--;
    4592:	3b01      	subs	r3, #1
    4594:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    4596:	f381 8811 	msr	BASEPRI, r1
    459a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    459e:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    45a0:	b003      	add	sp, #12
    45a2:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    45a4:	ea54 0305 	orrs.w	r3, r4, r5
    45a8:	d106      	bne.n	45b8 <z_impl_k_sem_take+0x40>
    45aa:	f381 8811 	msr	BASEPRI, r1
    45ae:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    45b2:	f06f 000f 	mvn.w	r0, #15
    45b6:	e7f3      	b.n	45a0 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    45b8:	4602      	mov	r2, r0
    45ba:	e9cd 4500 	strd	r4, r5, [sp]
    45be:	4802      	ldr	r0, [pc, #8]	; (45c8 <z_impl_k_sem_take+0x50>)
    45c0:	f7ff fea6 	bl	4310 <z_pend_curr>
	return ret;
    45c4:	e7ec      	b.n	45a0 <z_impl_k_sem_take+0x28>
    45c6:	bf00      	nop
    45c8:	20000f9c 	.word	0x20000f9c

000045cc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    45cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
    45d0:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
    45d4:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
    45d8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    45da:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    45dc:	2504      	movs	r5, #4
    45de:	7345      	strb	r5, [r0, #13]
{
    45e0:	460f      	mov	r7, r1

	thread_base->prio = priority;
    45e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    45e4:	7385      	strb	r5, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    45e6:	1dd6      	adds	r6, r2, #7

	thread_base->sched_locked = 0U;
    45e8:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    45ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
    45ec:	73c5      	strb	r5, [r0, #15]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    45ee:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    45f2:	3720      	adds	r7, #32
	node->prev = NULL;
    45f4:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    45f8:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	new_thread->stack_info.delta = delta;
    45fc:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    45fe:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4602:	9202      	str	r2, [sp, #8]
    4604:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4606:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    4608:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    460a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    460c:	9200      	str	r2, [sp, #0]
    460e:	4642      	mov	r2, r8
{
    4610:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4612:	f7fd fdeb 	bl	21ec <arch_new_thread>
	if (!_current) {
    4616:	4b05      	ldr	r3, [pc, #20]	; (462c <z_setup_new_thread+0x60>)
    4618:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
    461a:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
    461e:	b103      	cbz	r3, 4622 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    4620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
    4622:	6763      	str	r3, [r4, #116]	; 0x74
}
    4624:	4640      	mov	r0, r8
    4626:	b004      	add	sp, #16
    4628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    462c:	20000af4 	.word	0x20000af4

00004630 <z_impl_k_thread_create>:
{
    4630:	b5f0      	push	{r4, r5, r6, r7, lr}
    4632:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4634:	2500      	movs	r5, #0
    4636:	9505      	str	r5, [sp, #20]
    4638:	9d10      	ldr	r5, [sp, #64]	; 0x40
    463a:	9504      	str	r5, [sp, #16]
    463c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    463e:	9503      	str	r5, [sp, #12]
    4640:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4642:	9502      	str	r5, [sp, #8]
{
    4644:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4648:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    464a:	9501      	str	r5, [sp, #4]
    464c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    464e:	9500      	str	r5, [sp, #0]
{
    4650:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4652:	f7ff ffbb 	bl	45cc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    4656:	1c7b      	adds	r3, r7, #1
    4658:	bf08      	it	eq
    465a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    465e:	d005      	beq.n	466c <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4660:	ea56 0307 	orrs.w	r3, r6, r7
    4664:	d105      	bne.n	4672 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
    4666:	4620      	mov	r0, r4
    4668:	f7ff fcc2 	bl	3ff0 <z_sched_start>
}
    466c:	4620      	mov	r0, r4
    466e:	b007      	add	sp, #28
    4670:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    4672:	4904      	ldr	r1, [pc, #16]	; (4684 <z_impl_k_thread_create+0x54>)
    4674:	4632      	mov	r2, r6
    4676:	463b      	mov	r3, r7
    4678:	f104 0018 	add.w	r0, r4, #24
    467c:	f000 f8ec 	bl	4858 <z_add_timeout>
    4680:	e7f4      	b.n	466c <z_impl_k_thread_create+0x3c>
    4682:	bf00      	nop
    4684:	00006193 	.word	0x00006193

00004688 <z_init_static_threads>:
{
    4688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    468c:	4e2a      	ldr	r6, [pc, #168]	; (4738 <z_init_static_threads+0xb0>)
    468e:	4d2b      	ldr	r5, [pc, #172]	; (473c <z_init_static_threads+0xb4>)
{
    4690:	b086      	sub	sp, #24
    4692:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    4694:	42b5      	cmp	r5, r6
    4696:	f105 0430 	add.w	r4, r5, #48	; 0x30
    469a:	d310      	bcc.n	46be <z_init_static_threads+0x36>
	k_sched_lock();
    469c:	f7ff fc02 	bl	3ea4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    46a0:	4c26      	ldr	r4, [pc, #152]	; (473c <z_init_static_threads+0xb4>)
    46a2:	f8df a09c 	ldr.w	sl, [pc, #156]	; 4740 <z_init_static_threads+0xb8>
    46a6:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    46aa:	f240 36e7 	movw	r6, #999	; 0x3e7
    46ae:	2700      	movs	r7, #0
    46b0:	4544      	cmp	r4, r8
    46b2:	d321      	bcc.n	46f8 <z_init_static_threads+0x70>
}
    46b4:	b006      	add	sp, #24
    46b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    46ba:	f7ff bc45 	b.w	3f48 <k_sched_unlock>
		z_setup_new_thread(
    46be:	f854 3c04 	ldr.w	r3, [r4, #-4]
    46c2:	9305      	str	r3, [sp, #20]
    46c4:	f854 3c10 	ldr.w	r3, [r4, #-16]
    46c8:	9304      	str	r3, [sp, #16]
    46ca:	f854 3c14 	ldr.w	r3, [r4, #-20]
    46ce:	9303      	str	r3, [sp, #12]
    46d0:	f854 3c18 	ldr.w	r3, [r4, #-24]
    46d4:	9302      	str	r3, [sp, #8]
    46d6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    46da:	9301      	str	r3, [sp, #4]
    46dc:	f854 3c20 	ldr.w	r3, [r4, #-32]
    46e0:	9300      	str	r3, [sp, #0]
    46e2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    46e6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    46ea:	f7ff ff6f 	bl	45cc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    46ee:	f854 3c30 	ldr.w	r3, [r4, #-48]
    46f2:	65dd      	str	r5, [r3, #92]	; 0x5c
    46f4:	4625      	mov	r5, r4
    46f6:	e7cd      	b.n	4694 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    46f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    46fa:	1c5a      	adds	r2, r3, #1
    46fc:	d00d      	beq.n	471a <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
    46fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    4702:	4630      	mov	r0, r6
    4704:	4639      	mov	r1, r7
    4706:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    470a:	42b9      	cmp	r1, r7
    470c:	bf08      	it	eq
    470e:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    4710:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4712:	d104      	bne.n	471e <z_init_static_threads+0x96>
	z_sched_start(thread);
    4714:	4628      	mov	r0, r5
    4716:	f7ff fc6b 	bl	3ff0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    471a:	3430      	adds	r4, #48	; 0x30
    471c:	e7c8      	b.n	46b0 <z_init_static_threads+0x28>
    471e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4722:	2300      	movs	r3, #0
    4724:	f7fb fcec 	bl	100 <__aeabi_uldivmod>
    4728:	4602      	mov	r2, r0
    472a:	460b      	mov	r3, r1
    472c:	f105 0018 	add.w	r0, r5, #24
    4730:	4651      	mov	r1, sl
    4732:	f000 f891 	bl	4858 <z_add_timeout>
    4736:	e7f0      	b.n	471a <z_init_static_threads+0x92>
    4738:	20000194 	.word	0x20000194
    473c:	20000164 	.word	0x20000164
    4740:	00006193 	.word	0x00006193

00004744 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
    4744:	b508      	push	{r3, lr}
	__asm__ volatile(
    4746:	f04f 0320 	mov.w	r3, #32
    474a:	f3ef 8411 	mrs	r4, BASEPRI
    474e:	f383 8811 	msr	BASEPRI, r3
    4752:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
    4756:	4b04      	ldr	r3, [pc, #16]	; (4768 <z_self_abort+0x24>)
    4758:	6898      	ldr	r0, [r3, #8]
    475a:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
    475c:	f7ff fce2 	bl	4124 <z_impl_k_thread_suspend>
    4760:	4620      	mov	r0, r4
    4762:	f7fd fcb9 	bl	20d8 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4766:	bf00      	nop
    4768:	20000af4 	.word	0x20000af4

0000476c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    476c:	4a02      	ldr	r2, [pc, #8]	; (4778 <boot_banner+0xc>)
    476e:	4903      	ldr	r1, [pc, #12]	; (477c <boot_banner+0x10>)
    4770:	4803      	ldr	r0, [pc, #12]	; (4780 <boot_banner+0x14>)
    4772:	f000 bc1b 	b.w	4fac <printk>
    4776:	bf00      	nop
    4778:	00006a90 	.word	0x00006a90
    477c:	0000728f 	.word	0x0000728f
    4780:	0000729c 	.word	0x0000729c

00004784 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    4784:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    4786:	4806      	ldr	r0, [pc, #24]	; (47a0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    4788:	4a06      	ldr	r2, [pc, #24]	; (47a4 <z_data_copy+0x20>)
    478a:	4907      	ldr	r1, [pc, #28]	; (47a8 <z_data_copy+0x24>)
    478c:	1a12      	subs	r2, r2, r0
    478e:	f001 fa1c 	bl	5bca <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4792:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    4796:	4a05      	ldr	r2, [pc, #20]	; (47ac <z_data_copy+0x28>)
    4798:	4905      	ldr	r1, [pc, #20]	; (47b0 <z_data_copy+0x2c>)
    479a:	4806      	ldr	r0, [pc, #24]	; (47b4 <z_data_copy+0x30>)
    479c:	f001 ba15 	b.w	5bca <memcpy>
    47a0:	20000000 	.word	0x20000000
    47a4:	200001f4 	.word	0x200001f4
    47a8:	000072c4 	.word	0x000072c4
    47ac:	00000000 	.word	0x00000000
    47b0:	000072c4 	.word	0x000072c4
    47b4:	20000000 	.word	0x20000000

000047b8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
    47b8:	4b03      	ldr	r3, [pc, #12]	; (47c8 <elapsed+0x10>)
    47ba:	681b      	ldr	r3, [r3, #0]
    47bc:	b90b      	cbnz	r3, 47c2 <elapsed+0xa>
    47be:	f7fd bb8d 	b.w	1edc <z_clock_elapsed>
}
    47c2:	2000      	movs	r0, #0
    47c4:	4770      	bx	lr
    47c6:	bf00      	nop
    47c8:	20000b34 	.word	0x20000b34

000047cc <remove_timeout>:
{
    47cc:	b530      	push	{r4, r5, lr}
    47ce:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    47d0:	b168      	cbz	r0, 47ee <remove_timeout+0x22>
    47d2:	4a0a      	ldr	r2, [pc, #40]	; (47fc <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    47d4:	6852      	ldr	r2, [r2, #4]
    47d6:	4290      	cmp	r0, r2
    47d8:	d009      	beq.n	47ee <remove_timeout+0x22>
	if (next(t) != NULL) {
    47da:	b143      	cbz	r3, 47ee <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    47dc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    47e0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    47e4:	1912      	adds	r2, r2, r4
    47e6:	eb45 0101 	adc.w	r1, r5, r1
    47ea:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
    47ee:	6842      	ldr	r2, [r0, #4]
    47f0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    47f2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    47f4:	2300      	movs	r3, #0
	node->prev = NULL;
    47f6:	e9c0 3300 	strd	r3, r3, [r0]
}
    47fa:	bd30      	pop	{r4, r5, pc}
    47fc:	20000088 	.word	0x20000088

00004800 <next_timeout>:

static int32_t next_timeout(void)
{
    4800:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    4802:	4b13      	ldr	r3, [pc, #76]	; (4850 <next_timeout+0x50>)
    4804:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4806:	429c      	cmp	r4, r3
    4808:	bf08      	it	eq
    480a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    480c:	f7ff ffd4 	bl	47b8 <elapsed>
    4810:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    4812:	b1bc      	cbz	r4, 4844 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4814:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    4818:	1b40      	subs	r0, r0, r5
    481a:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    481e:	2801      	cmp	r0, #1
    4820:	f171 0300 	sbcs.w	r3, r1, #0
    4824:	db11      	blt.n	484a <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4826:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    482a:	2300      	movs	r3, #0
    482c:	4282      	cmp	r2, r0
    482e:	eb73 0401 	sbcs.w	r4, r3, r1
    4832:	da00      	bge.n	4836 <next_timeout+0x36>
    4834:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    4836:	4b07      	ldr	r3, [pc, #28]	; (4854 <next_timeout+0x54>)
    4838:	695b      	ldr	r3, [r3, #20]
    483a:	b113      	cbz	r3, 4842 <next_timeout+0x42>
    483c:	4298      	cmp	r0, r3
    483e:	bfa8      	it	ge
    4840:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    4842:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    4844:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    4848:	e7f5      	b.n	4836 <next_timeout+0x36>
    484a:	2000      	movs	r0, #0
    484c:	e7f3      	b.n	4836 <next_timeout+0x36>
    484e:	bf00      	nop
    4850:	20000088 	.word	0x20000088
    4854:	20000af4 	.word	0x20000af4

00004858 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    4858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    485c:	9101      	str	r1, [sp, #4]
    485e:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4860:	1c4b      	adds	r3, r1, #1
    4862:	bf08      	it	eq
    4864:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    4868:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    486a:	d071      	beq.n	4950 <z_add_timeout+0xf8>

#ifdef KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;
    486c:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    486e:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
    4872:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    4876:	f04f 3bff 	mov.w	fp, #4294967295
    487a:	ebb3 0804 	subs.w	r8, r3, r4
    487e:	eb6b 0905 	sbc.w	r9, fp, r5
    4882:	f1b8 0f00 	cmp.w	r8, #0
    4886:	f179 0300 	sbcs.w	r3, r9, #0
    488a:	db0f      	blt.n	48ac <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    488c:	f7ff ff94 	bl	47b8 <elapsed>
    4890:	4a36      	ldr	r2, [pc, #216]	; (496c <z_add_timeout+0x114>)
    4892:	e9d2 1c00 	ldrd	r1, ip, [r2]
    4896:	f06f 0301 	mvn.w	r3, #1
    489a:	1a5b      	subs	r3, r3, r1
    489c:	eb6b 020c 	sbc.w	r2, fp, ip
    48a0:	1b1e      	subs	r6, r3, r4
    48a2:	eb62 0705 	sbc.w	r7, r2, r5
    48a6:	1a34      	subs	r4, r6, r0
    48a8:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    48ac:	9b01      	ldr	r3, [sp, #4]
    48ae:	f8ca 3008 	str.w	r3, [sl, #8]
    48b2:	f04f 0320 	mov.w	r3, #32
    48b6:	f3ef 8611 	mrs	r6, BASEPRI
    48ba:	f383 8811 	msr	BASEPRI, r3
    48be:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    48c2:	f7ff ff79 	bl	47b8 <elapsed>
	ticks = MAX(1, ticks);
    48c6:	2c01      	cmp	r4, #1
    48c8:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
    48cc:	4b28      	ldr	r3, [pc, #160]	; (4970 <z_add_timeout+0x118>)
    48ce:	bfb8      	it	lt
    48d0:	2401      	movlt	r4, #1
    48d2:	681a      	ldr	r2, [r3, #0]
    48d4:	bfb8      	it	lt
    48d6:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
    48d8:	1824      	adds	r4, r4, r0
    48da:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    48de:	429a      	cmp	r2, r3
    48e0:	e9ca 4504 	strd	r4, r5, [sl, #16]
    48e4:	d001      	beq.n	48ea <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    48e6:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    48e8:	b952      	cbnz	r2, 4900 <z_add_timeout+0xa8>
	node->prev = list->tail;
    48ea:	685a      	ldr	r2, [r3, #4]
    48ec:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    48f0:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    48f2:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
    48f6:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    48fa:	f8c3 a004 	str.w	sl, [r3, #4]
}
    48fe:	e014      	b.n	492a <z_add_timeout+0xd2>
			if (t->dticks > to->dticks) {
    4900:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
    4904:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    4908:	4544      	cmp	r4, r8
    490a:	eb75 0109 	sbcs.w	r1, r5, r9
    490e:	da22      	bge.n	4956 <z_add_timeout+0xfe>
				t->dticks -= to->dticks;
    4910:	ebb8 0004 	subs.w	r0, r8, r4
    4914:	eb69 0105 	sbc.w	r1, r9, r5
    4918:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
    491c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    491e:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    4922:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    4926:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    492a:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    492c:	429a      	cmp	r2, r3
    492e:	d00b      	beq.n	4948 <z_add_timeout+0xf0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4930:	4592      	cmp	sl, r2
    4932:	d109      	bne.n	4948 <z_add_timeout+0xf0>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    4934:	f7ff ff64 	bl	4800 <next_timeout>

			if (next_time == 0 ||
    4938:	b118      	cbz	r0, 4942 <z_add_timeout+0xea>
			    _current_cpu->slice_ticks != next_time) {
    493a:	4b0e      	ldr	r3, [pc, #56]	; (4974 <z_add_timeout+0x11c>)
			if (next_time == 0 ||
    493c:	695b      	ldr	r3, [r3, #20]
    493e:	4283      	cmp	r3, r0
    4940:	d002      	beq.n	4948 <z_add_timeout+0xf0>
				z_clock_set_timeout(next_time, false);
    4942:	2100      	movs	r1, #0
    4944:	f7fd fa98 	bl	1e78 <z_clock_set_timeout>
	__asm__ volatile(
    4948:	f386 8811 	msr	BASEPRI, r6
    494c:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    4950:	b003      	add	sp, #12
    4952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    4956:	ebb4 0008 	subs.w	r0, r4, r8
    495a:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
    495e:	42ba      	cmp	r2, r7
    4960:	e9ca 0104 	strd	r0, r1, [sl, #16]
    4964:	d0c1      	beq.n	48ea <z_add_timeout+0x92>
    4966:	6812      	ldr	r2, [r2, #0]
    4968:	e7be      	b.n	48e8 <z_add_timeout+0x90>
    496a:	bf00      	nop
    496c:	20000430 	.word	0x20000430
    4970:	20000088 	.word	0x20000088
    4974:	20000af4 	.word	0x20000af4

00004978 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
    4978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    497c:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    497e:	f7ff fb8f 	bl	40a0 <z_time_slice>
	__asm__ volatile(
    4982:	f04f 0320 	mov.w	r3, #32
    4986:	f3ef 8411 	mrs	r4, BASEPRI
    498a:	f383 8811 	msr	BASEPRI, r3
    498e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    4992:	4d2c      	ldr	r5, [pc, #176]	; (4a44 <z_clock_announce+0xcc>)
    4994:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 4a48 <z_clock_announce+0xd0>
	return list->head == list;
    4998:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 4a4c <z_clock_announce+0xd4>
    499c:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    499e:	4651      	mov	r1, sl
    49a0:	f8d5 c000 	ldr.w	ip, [r5]
    49a4:	f8db 0000 	ldr.w	r0, [fp]
    49a8:	4662      	mov	r2, ip
    49aa:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    49ac:	4558      	cmp	r0, fp
    49ae:	e9da 8900 	ldrd	r8, r9, [sl]
    49b2:	e9cd 2300 	strd	r2, r3, [sp]
    49b6:	d00d      	beq.n	49d4 <z_clock_announce+0x5c>
    49b8:	b160      	cbz	r0, 49d4 <z_clock_announce+0x5c>
    49ba:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    49be:	45b4      	cmp	ip, r6
    49c0:	41bb      	sbcs	r3, r7
    49c2:	da1e      	bge.n	4a02 <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    49c4:	9b00      	ldr	r3, [sp, #0]
    49c6:	ebb6 0c03 	subs.w	ip, r6, r3
    49ca:	9b01      	ldr	r3, [sp, #4]
    49cc:	eb67 0603 	sbc.w	r6, r7, r3
    49d0:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
    49d4:	9b00      	ldr	r3, [sp, #0]
    49d6:	eb13 0208 	adds.w	r2, r3, r8
    49da:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    49dc:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
    49e0:	eb43 0309 	adc.w	r3, r3, r9
    49e4:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
    49e8:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
    49ea:	f7ff ff09 	bl	4800 <next_timeout>
    49ee:	4631      	mov	r1, r6
    49f0:	f7fd fa42 	bl	1e78 <z_clock_set_timeout>
	__asm__ volatile(
    49f4:	f384 8811 	msr	BASEPRI, r4
    49f8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    49fc:	b003      	add	sp, #12
    49fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    4a02:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
    4a06:	f04f 0200 	mov.w	r2, #0
    4a0a:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    4a0e:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    4a12:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    4a16:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    4a1a:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    4a1e:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    4a20:	f7ff fed4 	bl	47cc <remove_timeout>
    4a24:	f384 8811 	msr	BASEPRI, r4
    4a28:	f3bf 8f6f 	isb	sy
		t->fn(t);
    4a2c:	6883      	ldr	r3, [r0, #8]
    4a2e:	4798      	blx	r3
	__asm__ volatile(
    4a30:	f04f 0320 	mov.w	r3, #32
    4a34:	f3ef 8411 	mrs	r4, BASEPRI
    4a38:	f383 8811 	msr	BASEPRI, r3
    4a3c:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    4a40:	4901      	ldr	r1, [pc, #4]	; (4a48 <z_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    4a42:	e7ad      	b.n	49a0 <z_clock_announce+0x28>
    4a44:	20000b34 	.word	0x20000b34
    4a48:	20000430 	.word	0x20000430
    4a4c:	20000088 	.word	0x20000088

00004a50 <z_tick_get>:

int64_t z_tick_get(void)
{
    4a50:	b510      	push	{r4, lr}
    4a52:	f04f 0320 	mov.w	r3, #32
    4a56:	f3ef 8411 	mrs	r4, BASEPRI
    4a5a:	f383 8811 	msr	BASEPRI, r3
    4a5e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    4a62:	f7fd fa3b 	bl	1edc <z_clock_elapsed>
    4a66:	4b06      	ldr	r3, [pc, #24]	; (4a80 <z_tick_get+0x30>)
    4a68:	e9d3 2300 	ldrd	r2, r3, [r3]
    4a6c:	1812      	adds	r2, r2, r0
    4a6e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    4a72:	f384 8811 	msr	BASEPRI, r4
    4a76:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    4a7a:	4610      	mov	r0, r2
    4a7c:	4619      	mov	r1, r3
    4a7e:	bd10      	pop	{r4, pc}
    4a80:	20000430 	.word	0x20000430

00004a84 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    4a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    4a86:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    4a8a:	1c56      	adds	r6, r2, #1
    4a8c:	f143 0700 	adc.w	r7, r3, #0
    4a90:	2f00      	cmp	r7, #0
    4a92:	bf08      	it	eq
    4a94:	2e02      	cmpeq	r6, #2
{
    4a96:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    4a98:	d302      	bcc.n	4aa0 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    4a9a:	490c      	ldr	r1, [pc, #48]	; (4acc <z_timer_expiration_handler+0x48>)
    4a9c:	f7ff fedc 	bl	4858 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    4aa0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4aa2:	3301      	adds	r3, #1
    4aa4:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    4aa6:	6a23      	ldr	r3, [r4, #32]
    4aa8:	b10b      	cbz	r3, 4aae <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
    4aaa:	4620      	mov	r0, r4
    4aac:	4798      	blx	r3
	return list->head == list;
    4aae:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ab2:	42a5      	cmp	r5, r4
    4ab4:	d008      	beq.n	4ac8 <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    4ab6:	b13d      	cbz	r5, 4ac8 <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
    4ab8:	4628      	mov	r0, r5
    4aba:	f001 fb1e 	bl	60fa <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
    4abe:	4628      	mov	r0, r5
    4ac0:	f001 fb57 	bl	6172 <z_ready_thread>
    4ac4:	2300      	movs	r3, #0
    4ac6:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);
}
    4ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4aca:	bf00      	nop
    4acc:	00004a85 	.word	0x00004a85

00004ad0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    4ad0:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
    4ad4:	4619      	mov	r1, r3
    4ad6:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    4ad8:	1c4c      	adds	r4, r1, #1
{
    4ada:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    4adc:	bf08      	it	eq
    4ade:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    4ae2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    4ae6:	4680      	mov	r8, r0
    4ae8:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    4aea:	d047      	beq.n	4b7c <z_impl_k_timer_start+0xac>
    4aec:	4614      	mov	r4, r2
    4aee:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
    4af0:	ea54 0305 	orrs.w	r3, r4, r5
    4af4:	d016      	beq.n	4b24 <z_impl_k_timer_start+0x54>
    4af6:	f06f 0301 	mvn.w	r3, #1
    4afa:	ebb3 0a02 	subs.w	sl, r3, r2
    4afe:	f04f 33ff 	mov.w	r3, #4294967295
    4b02:	eb63 0b05 	sbc.w	fp, r3, r5
    4b06:	f1ba 0f00 	cmp.w	sl, #0
    4b0a:	f17b 0300 	sbcs.w	r3, fp, #0
    4b0e:	da09      	bge.n	4b24 <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
    4b10:	f112 34ff 	adds.w	r4, r2, #4294967295
    4b14:	f145 35ff 	adc.w	r5, r5, #4294967295
    4b18:	2c01      	cmp	r4, #1
    4b1a:	f175 0300 	sbcs.w	r3, r5, #0
    4b1e:	bfbc      	itt	lt
    4b20:	2401      	movlt	r4, #1
    4b22:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    4b24:	f06f 0301 	mvn.w	r3, #1
    4b28:	1a1b      	subs	r3, r3, r0
    4b2a:	9300      	str	r3, [sp, #0]
    4b2c:	f04f 33ff 	mov.w	r3, #4294967295
    4b30:	eb63 0301 	sbc.w	r3, r3, r1
    4b34:	9301      	str	r3, [sp, #4]
    4b36:	e9dd 2300 	ldrd	r2, r3, [sp]
    4b3a:	2a00      	cmp	r2, #0
    4b3c:	f173 0300 	sbcs.w	r3, r3, #0
    4b40:	da0c      	bge.n	4b5c <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
    4b42:	f110 38ff 	adds.w	r8, r0, #4294967295
    4b46:	f141 39ff 	adc.w	r9, r1, #4294967295
    4b4a:	f1b8 0f00 	cmp.w	r8, #0
    4b4e:	f179 0300 	sbcs.w	r3, r9, #0
    4b52:	bfbc      	itt	lt
    4b54:	f04f 0800 	movlt.w	r8, #0
    4b58:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
    4b5c:	4630      	mov	r0, r6
    4b5e:	f001 fb97 	bl	6290 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    4b62:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    4b64:	4907      	ldr	r1, [pc, #28]	; (4b84 <z_impl_k_timer_start+0xb4>)
	timer->status = 0U;
    4b66:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    4b68:	4642      	mov	r2, r8
    4b6a:	464b      	mov	r3, r9
    4b6c:	4630      	mov	r0, r6
	timer->period = period;
    4b6e:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
    4b72:	b002      	add	sp, #8
    4b74:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    4b78:	f7ff be6e 	b.w	4858 <z_add_timeout>
}
    4b7c:	b002      	add	sp, #8
    4b7e:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    4b82:	bf00      	nop
    4b84:	00004a85 	.word	0x00004a85

00004b88 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
    4b88:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    4b8a:	4c06      	ldr	r4, [pc, #24]	; (4ba4 <statics_init+0x1c>)
    4b8c:	4d06      	ldr	r5, [pc, #24]	; (4ba8 <statics_init+0x20>)
    4b8e:	42ac      	cmp	r4, r5
    4b90:	d301      	bcc.n	4b96 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    4b92:	2000      	movs	r0, #0
    4b94:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    4b96:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    4b9a:	4620      	mov	r0, r4
    4b9c:	f001 fbea 	bl	6374 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    4ba0:	3414      	adds	r4, #20
    4ba2:	e7f4      	b.n	4b8e <statics_init+0x6>
    4ba4:	20000194 	.word	0x20000194
    4ba8:	20000194 	.word	0x20000194

00004bac <nrf_cc3xx_platform_init_no_rng>:
    4bac:	b510      	push	{r4, lr}
    4bae:	4c0a      	ldr	r4, [pc, #40]	; (4bd8 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    4bb0:	6823      	ldr	r3, [r4, #0]
    4bb2:	b11b      	cbz	r3, 4bbc <nrf_cc3xx_platform_init_no_rng+0x10>
    4bb4:	2301      	movs	r3, #1
    4bb6:	6023      	str	r3, [r4, #0]
    4bb8:	2000      	movs	r0, #0
    4bba:	bd10      	pop	{r4, pc}
    4bbc:	f000 f8b6 	bl	4d2c <CC_LibInitNoRng>
    4bc0:	2800      	cmp	r0, #0
    4bc2:	d0f7      	beq.n	4bb4 <nrf_cc3xx_platform_init_no_rng+0x8>
    4bc4:	3801      	subs	r0, #1
    4bc6:	2806      	cmp	r0, #6
    4bc8:	d803      	bhi.n	4bd2 <nrf_cc3xx_platform_init_no_rng+0x26>
    4bca:	4b04      	ldr	r3, [pc, #16]	; (4bdc <nrf_cc3xx_platform_init_no_rng+0x30>)
    4bcc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4bd0:	bd10      	pop	{r4, pc}
    4bd2:	4803      	ldr	r0, [pc, #12]	; (4be0 <nrf_cc3xx_platform_init_no_rng+0x34>)
    4bd4:	bd10      	pop	{r4, pc}
    4bd6:	bf00      	nop
    4bd8:	20000b38 	.word	0x20000b38
    4bdc:	000068ac 	.word	0x000068ac
    4be0:	ffff8ffe 	.word	0xffff8ffe

00004be4 <nrf_cc3xx_platform_abort>:
    4be4:	f3bf 8f4f 	dsb	sy
    4be8:	4905      	ldr	r1, [pc, #20]	; (4c00 <nrf_cc3xx_platform_abort+0x1c>)
    4bea:	4b06      	ldr	r3, [pc, #24]	; (4c04 <nrf_cc3xx_platform_abort+0x20>)
    4bec:	68ca      	ldr	r2, [r1, #12]
    4bee:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4bf2:	4313      	orrs	r3, r2
    4bf4:	60cb      	str	r3, [r1, #12]
    4bf6:	f3bf 8f4f 	dsb	sy
    4bfa:	bf00      	nop
    4bfc:	e7fd      	b.n	4bfa <nrf_cc3xx_platform_abort+0x16>
    4bfe:	bf00      	nop
    4c00:	e000ed00 	.word	0xe000ed00
    4c04:	05fa0004 	.word	0x05fa0004

00004c08 <CC_PalAbort>:
    4c08:	b4f0      	push	{r4, r5, r6, r7}
    4c0a:	4f09      	ldr	r7, [pc, #36]	; (4c30 <CC_PalAbort+0x28>)
    4c0c:	4e09      	ldr	r6, [pc, #36]	; (4c34 <CC_PalAbort+0x2c>)
    4c0e:	4c0a      	ldr	r4, [pc, #40]	; (4c38 <CC_PalAbort+0x30>)
    4c10:	4a0a      	ldr	r2, [pc, #40]	; (4c3c <CC_PalAbort+0x34>)
    4c12:	4d0b      	ldr	r5, [pc, #44]	; (4c40 <CC_PalAbort+0x38>)
    4c14:	490b      	ldr	r1, [pc, #44]	; (4c44 <CC_PalAbort+0x3c>)
    4c16:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    4c1a:	603b      	str	r3, [r7, #0]
    4c1c:	6852      	ldr	r2, [r2, #4]
    4c1e:	6033      	str	r3, [r6, #0]
    4c20:	6023      	str	r3, [r4, #0]
    4c22:	2400      	movs	r4, #0
    4c24:	602b      	str	r3, [r5, #0]
    4c26:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    4c2a:	bcf0      	pop	{r4, r5, r6, r7}
    4c2c:	4710      	bx	r2
    4c2e:	bf00      	nop
    4c30:	5002b400 	.word	0x5002b400
    4c34:	5002b404 	.word	0x5002b404
    4c38:	5002b408 	.word	0x5002b408
    4c3c:	20000090 	.word	0x20000090
    4c40:	5002b40c 	.word	0x5002b40c
    4c44:	5002a000 	.word	0x5002a000

00004c48 <nrf_cc3xx_platform_set_abort>:
    4c48:	e9d0 1200 	ldrd	r1, r2, [r0]
    4c4c:	4b01      	ldr	r3, [pc, #4]	; (4c54 <nrf_cc3xx_platform_set_abort+0xc>)
    4c4e:	e9c3 1200 	strd	r1, r2, [r3]
    4c52:	4770      	bx	lr
    4c54:	20000090 	.word	0x20000090

00004c58 <mutex_unlock>:
    4c58:	b148      	cbz	r0, 4c6e <mutex_unlock+0x16>
    4c5a:	6843      	ldr	r3, [r0, #4]
    4c5c:	b12b      	cbz	r3, 4c6a <mutex_unlock+0x12>
    4c5e:	f3bf 8f5f 	dmb	sy
    4c62:	2300      	movs	r3, #0
    4c64:	6003      	str	r3, [r0, #0]
    4c66:	4618      	mov	r0, r3
    4c68:	4770      	bx	lr
    4c6a:	4802      	ldr	r0, [pc, #8]	; (4c74 <mutex_unlock+0x1c>)
    4c6c:	4770      	bx	lr
    4c6e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4c72:	4770      	bx	lr
    4c74:	ffff8fea 	.word	0xffff8fea

00004c78 <mutex_free>:
    4c78:	b510      	push	{r4, lr}
    4c7a:	4604      	mov	r4, r0
    4c7c:	b128      	cbz	r0, 4c8a <mutex_free+0x12>
    4c7e:	6863      	ldr	r3, [r4, #4]
    4c80:	b113      	cbz	r3, 4c88 <mutex_free+0x10>
    4c82:	2300      	movs	r3, #0
    4c84:	6023      	str	r3, [r4, #0]
    4c86:	6063      	str	r3, [r4, #4]
    4c88:	bd10      	pop	{r4, pc}
    4c8a:	4b02      	ldr	r3, [pc, #8]	; (4c94 <mutex_free+0x1c>)
    4c8c:	4802      	ldr	r0, [pc, #8]	; (4c98 <mutex_free+0x20>)
    4c8e:	685b      	ldr	r3, [r3, #4]
    4c90:	4798      	blx	r3
    4c92:	e7f4      	b.n	4c7e <mutex_free+0x6>
    4c94:	20000090 	.word	0x20000090
    4c98:	000068c8 	.word	0x000068c8

00004c9c <mutex_init>:
    4c9c:	b510      	push	{r4, lr}
    4c9e:	4604      	mov	r4, r0
    4ca0:	b130      	cbz	r0, 4cb0 <mutex_init+0x14>
    4ca2:	6863      	ldr	r3, [r4, #4]
    4ca4:	2200      	movs	r2, #0
    4ca6:	f043 0301 	orr.w	r3, r3, #1
    4caa:	6063      	str	r3, [r4, #4]
    4cac:	6022      	str	r2, [r4, #0]
    4cae:	bd10      	pop	{r4, pc}
    4cb0:	4801      	ldr	r0, [pc, #4]	; (4cb8 <mutex_init+0x1c>)
    4cb2:	f7ff ffa9 	bl	4c08 <CC_PalAbort>
    4cb6:	e7f4      	b.n	4ca2 <mutex_init+0x6>
    4cb8:	000068f0 	.word	0x000068f0

00004cbc <mutex_lock>:
    4cbc:	b1a0      	cbz	r0, 4ce8 <mutex_lock+0x2c>
    4cbe:	6843      	ldr	r3, [r0, #4]
    4cc0:	b183      	cbz	r3, 4ce4 <mutex_lock+0x28>
    4cc2:	2201      	movs	r2, #1
    4cc4:	f3bf 8f5b 	dmb	ish
    4cc8:	e850 3f00 	ldrex	r3, [r0]
    4ccc:	e840 2100 	strex	r1, r2, [r0]
    4cd0:	2900      	cmp	r1, #0
    4cd2:	d1f9      	bne.n	4cc8 <mutex_lock+0xc>
    4cd4:	f3bf 8f5b 	dmb	ish
    4cd8:	2b01      	cmp	r3, #1
    4cda:	d0f3      	beq.n	4cc4 <mutex_lock+0x8>
    4cdc:	f3bf 8f5f 	dmb	sy
    4ce0:	2000      	movs	r0, #0
    4ce2:	4770      	bx	lr
    4ce4:	4802      	ldr	r0, [pc, #8]	; (4cf0 <mutex_lock+0x34>)
    4ce6:	4770      	bx	lr
    4ce8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4cec:	4770      	bx	lr
    4cee:	bf00      	nop
    4cf0:	ffff8fea 	.word	0xffff8fea

00004cf4 <nrf_cc3xx_platform_set_mutexes>:
    4cf4:	b470      	push	{r4, r5, r6}
    4cf6:	e9d0 6500 	ldrd	r6, r5, [r0]
    4cfa:	e9d0 4202 	ldrd	r4, r2, [r0, #8]
    4cfe:	4b09      	ldr	r3, [pc, #36]	; (4d24 <nrf_cc3xx_platform_set_mutexes+0x30>)
    4d00:	e9c3 4202 	strd	r4, r2, [r3, #8]
    4d04:	e9c3 6500 	strd	r6, r5, [r3]
    4d08:	e9d1 4002 	ldrd	r4, r0, [r1, #8]
    4d0c:	e9d1 6500 	ldrd	r6, r5, [r1]
    4d10:	4b05      	ldr	r3, [pc, #20]	; (4d28 <nrf_cc3xx_platform_set_mutexes+0x34>)
    4d12:	690a      	ldr	r2, [r1, #16]
    4d14:	611a      	str	r2, [r3, #16]
    4d16:	e9c3 6500 	strd	r6, r5, [r3]
    4d1a:	e9c3 4002 	strd	r4, r0, [r3, #8]
    4d1e:	bc70      	pop	{r4, r5, r6}
    4d20:	4770      	bx	lr
    4d22:	bf00      	nop
    4d24:	200000a0 	.word	0x200000a0
    4d28:	200000b0 	.word	0x200000b0

00004d2c <CC_LibInitNoRng>:
    4d2c:	b510      	push	{r4, lr}
    4d2e:	f000 f833 	bl	4d98 <CC_HalInit>
    4d32:	b120      	cbz	r0, 4d3e <CC_LibInitNoRng+0x12>
    4d34:	2403      	movs	r4, #3
    4d36:	f000 f867 	bl	4e08 <CC_PalTerminate>
    4d3a:	4620      	mov	r0, r4
    4d3c:	bd10      	pop	{r4, pc}
    4d3e:	f000 f835 	bl	4dac <CC_PalInit>
    4d42:	b990      	cbnz	r0, 4d6a <CC_LibInitNoRng+0x3e>
    4d44:	f000 f8b0 	bl	4ea8 <CC_PalPowerSaveModeSelect>
    4d48:	b990      	cbnz	r0, 4d70 <CC_LibInitNoRng+0x44>
    4d4a:	4b0f      	ldr	r3, [pc, #60]	; (4d88 <CC_LibInitNoRng+0x5c>)
    4d4c:	681b      	ldr	r3, [r3, #0]
    4d4e:	0e1b      	lsrs	r3, r3, #24
    4d50:	2bf0      	cmp	r3, #240	; 0xf0
    4d52:	d108      	bne.n	4d66 <CC_LibInitNoRng+0x3a>
    4d54:	4a0d      	ldr	r2, [pc, #52]	; (4d8c <CC_LibInitNoRng+0x60>)
    4d56:	4b0e      	ldr	r3, [pc, #56]	; (4d90 <CC_LibInitNoRng+0x64>)
    4d58:	6812      	ldr	r2, [r2, #0]
    4d5a:	429a      	cmp	r2, r3
    4d5c:	d00a      	beq.n	4d74 <CC_LibInitNoRng+0x48>
    4d5e:	2407      	movs	r4, #7
    4d60:	f000 f81c 	bl	4d9c <CC_HalTerminate>
    4d64:	e7e7      	b.n	4d36 <CC_LibInitNoRng+0xa>
    4d66:	2406      	movs	r4, #6
    4d68:	e7fa      	b.n	4d60 <CC_LibInitNoRng+0x34>
    4d6a:	2404      	movs	r4, #4
    4d6c:	4620      	mov	r0, r4
    4d6e:	bd10      	pop	{r4, pc}
    4d70:	2400      	movs	r4, #0
    4d72:	e7f5      	b.n	4d60 <CC_LibInitNoRng+0x34>
    4d74:	2001      	movs	r0, #1
    4d76:	f000 f897 	bl	4ea8 <CC_PalPowerSaveModeSelect>
    4d7a:	4604      	mov	r4, r0
    4d7c:	2800      	cmp	r0, #0
    4d7e:	d1f7      	bne.n	4d70 <CC_LibInitNoRng+0x44>
    4d80:	4b04      	ldr	r3, [pc, #16]	; (4d94 <CC_LibInitNoRng+0x68>)
    4d82:	6018      	str	r0, [r3, #0]
    4d84:	e7d9      	b.n	4d3a <CC_LibInitNoRng+0xe>
    4d86:	bf00      	nop
    4d88:	5002b928 	.word	0x5002b928
    4d8c:	5002ba24 	.word	0x5002ba24
    4d90:	20e00000 	.word	0x20e00000
    4d94:	5002ba0c 	.word	0x5002ba0c

00004d98 <CC_HalInit>:
    4d98:	2000      	movs	r0, #0
    4d9a:	4770      	bx	lr

00004d9c <CC_HalTerminate>:
    4d9c:	2000      	movs	r0, #0
    4d9e:	4770      	bx	lr

00004da0 <CC_HalMaskInterrupt>:
    4da0:	4b01      	ldr	r3, [pc, #4]	; (4da8 <CC_HalMaskInterrupt+0x8>)
    4da2:	6018      	str	r0, [r3, #0]
    4da4:	4770      	bx	lr
    4da6:	bf00      	nop
    4da8:	5002ba04 	.word	0x5002ba04

00004dac <CC_PalInit>:
    4dac:	b510      	push	{r4, lr}
    4dae:	4811      	ldr	r0, [pc, #68]	; (4df4 <CC_PalInit+0x48>)
    4db0:	f000 f848 	bl	4e44 <CC_PalMutexCreate>
    4db4:	b100      	cbz	r0, 4db8 <CC_PalInit+0xc>
    4db6:	bd10      	pop	{r4, pc}
    4db8:	480f      	ldr	r0, [pc, #60]	; (4df8 <CC_PalInit+0x4c>)
    4dba:	f000 f843 	bl	4e44 <CC_PalMutexCreate>
    4dbe:	2800      	cmp	r0, #0
    4dc0:	d1f9      	bne.n	4db6 <CC_PalInit+0xa>
    4dc2:	4c0e      	ldr	r4, [pc, #56]	; (4dfc <CC_PalInit+0x50>)
    4dc4:	4620      	mov	r0, r4
    4dc6:	f000 f83d 	bl	4e44 <CC_PalMutexCreate>
    4dca:	2800      	cmp	r0, #0
    4dcc:	d1f3      	bne.n	4db6 <CC_PalInit+0xa>
    4dce:	4b0c      	ldr	r3, [pc, #48]	; (4e00 <CC_PalInit+0x54>)
    4dd0:	480c      	ldr	r0, [pc, #48]	; (4e04 <CC_PalInit+0x58>)
    4dd2:	601c      	str	r4, [r3, #0]
    4dd4:	f000 f836 	bl	4e44 <CC_PalMutexCreate>
    4dd8:	4601      	mov	r1, r0
    4dda:	2800      	cmp	r0, #0
    4ddc:	d1eb      	bne.n	4db6 <CC_PalInit+0xa>
    4dde:	f000 f82d 	bl	4e3c <CC_PalDmaInit>
    4de2:	4604      	mov	r4, r0
    4de4:	b108      	cbz	r0, 4dea <CC_PalInit+0x3e>
    4de6:	4620      	mov	r0, r4
    4de8:	bd10      	pop	{r4, pc}
    4dea:	f000 f83f 	bl	4e6c <CC_PalPowerSaveModeInit>
    4dee:	4620      	mov	r0, r4
    4df0:	e7fa      	b.n	4de8 <CC_PalInit+0x3c>
    4df2:	bf00      	nop
    4df4:	200000e8 	.word	0x200000e8
    4df8:	200000dc 	.word	0x200000dc
    4dfc:	200000e4 	.word	0x200000e4
    4e00:	200000ec 	.word	0x200000ec
    4e04:	200000e0 	.word	0x200000e0

00004e08 <CC_PalTerminate>:
    4e08:	b508      	push	{r3, lr}
    4e0a:	4808      	ldr	r0, [pc, #32]	; (4e2c <CC_PalTerminate+0x24>)
    4e0c:	f000 f824 	bl	4e58 <CC_PalMutexDestroy>
    4e10:	4807      	ldr	r0, [pc, #28]	; (4e30 <CC_PalTerminate+0x28>)
    4e12:	f000 f821 	bl	4e58 <CC_PalMutexDestroy>
    4e16:	4807      	ldr	r0, [pc, #28]	; (4e34 <CC_PalTerminate+0x2c>)
    4e18:	f000 f81e 	bl	4e58 <CC_PalMutexDestroy>
    4e1c:	4806      	ldr	r0, [pc, #24]	; (4e38 <CC_PalTerminate+0x30>)
    4e1e:	f000 f81b 	bl	4e58 <CC_PalMutexDestroy>
    4e22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4e26:	f000 b80b 	b.w	4e40 <CC_PalDmaTerminate>
    4e2a:	bf00      	nop
    4e2c:	200000e8 	.word	0x200000e8
    4e30:	200000dc 	.word	0x200000dc
    4e34:	200000e4 	.word	0x200000e4
    4e38:	200000e0 	.word	0x200000e0

00004e3c <CC_PalDmaInit>:
    4e3c:	2000      	movs	r0, #0
    4e3e:	4770      	bx	lr

00004e40 <CC_PalDmaTerminate>:
    4e40:	4770      	bx	lr
    4e42:	bf00      	nop

00004e44 <CC_PalMutexCreate>:
    4e44:	b508      	push	{r3, lr}
    4e46:	4b03      	ldr	r3, [pc, #12]	; (4e54 <CC_PalMutexCreate+0x10>)
    4e48:	6802      	ldr	r2, [r0, #0]
    4e4a:	681b      	ldr	r3, [r3, #0]
    4e4c:	6810      	ldr	r0, [r2, #0]
    4e4e:	4798      	blx	r3
    4e50:	2000      	movs	r0, #0
    4e52:	bd08      	pop	{r3, pc}
    4e54:	200000a0 	.word	0x200000a0

00004e58 <CC_PalMutexDestroy>:
    4e58:	b508      	push	{r3, lr}
    4e5a:	4b03      	ldr	r3, [pc, #12]	; (4e68 <CC_PalMutexDestroy+0x10>)
    4e5c:	6802      	ldr	r2, [r0, #0]
    4e5e:	685b      	ldr	r3, [r3, #4]
    4e60:	6810      	ldr	r0, [r2, #0]
    4e62:	4798      	blx	r3
    4e64:	2000      	movs	r0, #0
    4e66:	bd08      	pop	{r3, pc}
    4e68:	200000a0 	.word	0x200000a0

00004e6c <CC_PalPowerSaveModeInit>:
    4e6c:	b570      	push	{r4, r5, r6, lr}
    4e6e:	4c09      	ldr	r4, [pc, #36]	; (4e94 <CC_PalPowerSaveModeInit+0x28>)
    4e70:	4d09      	ldr	r5, [pc, #36]	; (4e98 <CC_PalPowerSaveModeInit+0x2c>)
    4e72:	6920      	ldr	r0, [r4, #16]
    4e74:	68ab      	ldr	r3, [r5, #8]
    4e76:	4798      	blx	r3
    4e78:	b118      	cbz	r0, 4e82 <CC_PalPowerSaveModeInit+0x16>
    4e7a:	4b08      	ldr	r3, [pc, #32]	; (4e9c <CC_PalPowerSaveModeInit+0x30>)
    4e7c:	4808      	ldr	r0, [pc, #32]	; (4ea0 <CC_PalPowerSaveModeInit+0x34>)
    4e7e:	685b      	ldr	r3, [r3, #4]
    4e80:	4798      	blx	r3
    4e82:	4a08      	ldr	r2, [pc, #32]	; (4ea4 <CC_PalPowerSaveModeInit+0x38>)
    4e84:	68eb      	ldr	r3, [r5, #12]
    4e86:	6920      	ldr	r0, [r4, #16]
    4e88:	2100      	movs	r1, #0
    4e8a:	6011      	str	r1, [r2, #0]
    4e8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4e90:	4718      	bx	r3
    4e92:	bf00      	nop
    4e94:	200000b0 	.word	0x200000b0
    4e98:	200000a0 	.word	0x200000a0
    4e9c:	20000090 	.word	0x20000090
    4ea0:	00006914 	.word	0x00006914
    4ea4:	20000b4c 	.word	0x20000b4c

00004ea8 <CC_PalPowerSaveModeSelect>:
    4ea8:	b570      	push	{r4, r5, r6, lr}
    4eaa:	4d1a      	ldr	r5, [pc, #104]	; (4f14 <CC_PalPowerSaveModeSelect+0x6c>)
    4eac:	4e1a      	ldr	r6, [pc, #104]	; (4f18 <CC_PalPowerSaveModeSelect+0x70>)
    4eae:	4604      	mov	r4, r0
    4eb0:	68b2      	ldr	r2, [r6, #8]
    4eb2:	6928      	ldr	r0, [r5, #16]
    4eb4:	4790      	blx	r2
    4eb6:	b9f0      	cbnz	r0, 4ef6 <CC_PalPowerSaveModeSelect+0x4e>
    4eb8:	b15c      	cbz	r4, 4ed2 <CC_PalPowerSaveModeSelect+0x2a>
    4eba:	4c18      	ldr	r4, [pc, #96]	; (4f1c <CC_PalPowerSaveModeSelect+0x74>)
    4ebc:	6823      	ldr	r3, [r4, #0]
    4ebe:	b1ab      	cbz	r3, 4eec <CC_PalPowerSaveModeSelect+0x44>
    4ec0:	2b01      	cmp	r3, #1
    4ec2:	d01a      	beq.n	4efa <CC_PalPowerSaveModeSelect+0x52>
    4ec4:	3b01      	subs	r3, #1
    4ec6:	6023      	str	r3, [r4, #0]
    4ec8:	6928      	ldr	r0, [r5, #16]
    4eca:	68f3      	ldr	r3, [r6, #12]
    4ecc:	4798      	blx	r3
    4ece:	2000      	movs	r0, #0
    4ed0:	bd70      	pop	{r4, r5, r6, pc}
    4ed2:	4c12      	ldr	r4, [pc, #72]	; (4f1c <CC_PalPowerSaveModeSelect+0x74>)
    4ed4:	6821      	ldr	r1, [r4, #0]
    4ed6:	b939      	cbnz	r1, 4ee8 <CC_PalPowerSaveModeSelect+0x40>
    4ed8:	4b11      	ldr	r3, [pc, #68]	; (4f20 <CC_PalPowerSaveModeSelect+0x78>)
    4eda:	4a12      	ldr	r2, [pc, #72]	; (4f24 <CC_PalPowerSaveModeSelect+0x7c>)
    4edc:	2001      	movs	r0, #1
    4ede:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    4ee2:	6813      	ldr	r3, [r2, #0]
    4ee4:	2b00      	cmp	r3, #0
    4ee6:	d1fc      	bne.n	4ee2 <CC_PalPowerSaveModeSelect+0x3a>
    4ee8:	3101      	adds	r1, #1
    4eea:	6021      	str	r1, [r4, #0]
    4eec:	68f3      	ldr	r3, [r6, #12]
    4eee:	6928      	ldr	r0, [r5, #16]
    4ef0:	4798      	blx	r3
    4ef2:	2000      	movs	r0, #0
    4ef4:	bd70      	pop	{r4, r5, r6, pc}
    4ef6:	480c      	ldr	r0, [pc, #48]	; (4f28 <CC_PalPowerSaveModeSelect+0x80>)
    4ef8:	bd70      	pop	{r4, r5, r6, pc}
    4efa:	4a0a      	ldr	r2, [pc, #40]	; (4f24 <CC_PalPowerSaveModeSelect+0x7c>)
    4efc:	6813      	ldr	r3, [r2, #0]
    4efe:	2b00      	cmp	r3, #0
    4f00:	d1fc      	bne.n	4efc <CC_PalPowerSaveModeSelect+0x54>
    4f02:	4a07      	ldr	r2, [pc, #28]	; (4f20 <CC_PalPowerSaveModeSelect+0x78>)
    4f04:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    4f08:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    4f0c:	f7ff ff48 	bl	4da0 <CC_HalMaskInterrupt>
    4f10:	6823      	ldr	r3, [r4, #0]
    4f12:	e7d7      	b.n	4ec4 <CC_PalPowerSaveModeSelect+0x1c>
    4f14:	200000b0 	.word	0x200000b0
    4f18:	200000a0 	.word	0x200000a0
    4f1c:	20000b4c 	.word	0x20000b4c
    4f20:	5002a000 	.word	0x5002a000
    4f24:	5002b910 	.word	0x5002b910
    4f28:	ffff8fe9 	.word	0xffff8fe9

00004f2c <z_impl_uart_irq_tx_enable>:
	if (api->irq_tx_enable) {
    4f2c:	6883      	ldr	r3, [r0, #8]
    4f2e:	69db      	ldr	r3, [r3, #28]
    4f30:	b103      	cbz	r3, 4f34 <z_impl_uart_irq_tx_enable+0x8>
		api->irq_tx_enable(dev);
    4f32:	4718      	bx	r3
}
    4f34:	4770      	bx	lr

00004f36 <fifo_gen_init>:

#include <logging/log.h>
LOG_MODULE_REGISTER(fifo_gen, LOG_LEVEL_INF);

void fifo_gen_init(fifo_gen_buffer_t* buf) {
	buf->size  = 0;
    4f36:	2300      	movs	r3, #0
    4f38:	f880 3200 	strb.w	r3, [r0, #512]	; 0x200
	buf->front = 0;
    4f3c:	f880 3201 	strb.w	r3, [r0, #513]	; 0x201
	buf->rear  = 0;
    4f40:	f880 3202 	strb.w	r3, [r0, #514]	; 0x202
}
    4f44:	4770      	bx	lr

00004f46 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    4f46:	4603      	mov	r3, r0
    4f48:	b158      	cbz	r0, 4f62 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4f4a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4f4c:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    4f50:	2a01      	cmp	r2, #1
    4f52:	d003      	beq.n	4f5c <sys_notify_validate+0x16>
    4f54:	2a03      	cmp	r2, #3
    4f56:	d104      	bne.n	4f62 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    4f58:	6802      	ldr	r2, [r0, #0]
    4f5a:	b112      	cbz	r2, 4f62 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    4f5c:	2000      	movs	r0, #0
    4f5e:	6098      	str	r0, [r3, #8]
    4f60:	4770      	bx	lr
		return -EINVAL;
    4f62:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    4f66:	4770      	bx	lr

00004f68 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4f68:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    4f6a:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    4f6c:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    4f70:	2a03      	cmp	r2, #3
    4f72:	f04f 0200 	mov.w	r2, #0
{
    4f76:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    4f78:	bf0c      	ite	eq
    4f7a:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
    4f7c:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    4f7e:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    4f80:	4770      	bx	lr

00004f82 <arch_printk_char_out>:
}
    4f82:	2000      	movs	r0, #0
    4f84:	4770      	bx	lr

00004f86 <str_out>:
{
    4f86:	b530      	push	{r4, r5, lr}
    4f88:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    4f8a:	680c      	ldr	r4, [r1, #0]
    4f8c:	1c55      	adds	r5, r2, #1
    4f8e:	b114      	cbz	r4, 4f96 <str_out+0x10>
    4f90:	684b      	ldr	r3, [r1, #4]
    4f92:	4293      	cmp	r3, r2
    4f94:	dc01      	bgt.n	4f9a <str_out+0x14>
		ctx->count++;
    4f96:	608d      	str	r5, [r1, #8]
}
    4f98:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    4f9a:	3b01      	subs	r3, #1
    4f9c:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    4f9e:	bf08      	it	eq
    4fa0:	2200      	moveq	r2, #0
    4fa2:	608d      	str	r5, [r1, #8]
    4fa4:	bf0c      	ite	eq
    4fa6:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    4fa8:	54a0      	strbne	r0, [r4, r2]
    4faa:	e7f5      	b.n	4f98 <str_out+0x12>

00004fac <printk>:
{
    4fac:	b40f      	push	{r0, r1, r2, r3}
    4fae:	b507      	push	{r0, r1, r2, lr}
    4fb0:	a904      	add	r1, sp, #16
    4fb2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    4fb6:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    4fb8:	f7fb fae0 	bl	57c <vprintk>
}
    4fbc:	b003      	add	sp, #12
    4fbe:	f85d eb04 	ldr.w	lr, [sp], #4
    4fc2:	b004      	add	sp, #16
    4fc4:	4770      	bx	lr

00004fc6 <snprintk>:
{
    4fc6:	b40c      	push	{r2, r3}
    4fc8:	b507      	push	{r0, r1, r2, lr}
    4fca:	ab04      	add	r3, sp, #16
    4fcc:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    4fd0:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    4fd2:	f7fb fae1 	bl	598 <vsnprintk>
}
    4fd6:	b003      	add	sp, #12
    4fd8:	f85d eb04 	ldr.w	lr, [sp], #4
    4fdc:	b002      	add	sp, #8
    4fde:	4770      	bx	lr

00004fe0 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4fe0:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    4fe2:	f013 0307 	ands.w	r3, r3, #7
    4fe6:	d105      	bne.n	4ff4 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    4fe8:	6803      	ldr	r3, [r0, #0]
    4fea:	2b00      	cmp	r3, #0
		evt = EVT_START;
    4fec:	bf0c      	ite	eq
    4fee:	2000      	moveq	r0, #0
    4ff0:	2003      	movne	r0, #3
    4ff2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    4ff4:	2b02      	cmp	r3, #2
    4ff6:	d105      	bne.n	5004 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    4ff8:	8b43      	ldrh	r3, [r0, #26]
    4ffa:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    4ffc:	bf14      	ite	ne
    4ffe:	2000      	movne	r0, #0
    5000:	2004      	moveq	r0, #4
    5002:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    5004:	2b01      	cmp	r3, #1
    5006:	d105      	bne.n	5014 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    5008:	6803      	ldr	r3, [r0, #0]
    500a:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    500c:	bf0c      	ite	eq
    500e:	2000      	moveq	r0, #0
    5010:	2005      	movne	r0, #5
    5012:	4770      	bx	lr
	int evt = EVT_NOP;
    5014:	2000      	movs	r0, #0
}
    5016:	4770      	bx	lr

00005018 <notify_one>:
{
    5018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    501c:	460d      	mov	r5, r1
    501e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5020:	4619      	mov	r1, r3
    5022:	1d28      	adds	r0, r5, #4
{
    5024:	4690      	mov	r8, r2
    5026:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5028:	f7ff ff9e 	bl	4f68 <sys_notify_finalize>
	if (cb) {
    502c:	4604      	mov	r4, r0
    502e:	b138      	cbz	r0, 5040 <notify_one+0x28>
		cb(mgr, cli, state, res);
    5030:	4633      	mov	r3, r6
    5032:	4642      	mov	r2, r8
    5034:	4629      	mov	r1, r5
    5036:	4638      	mov	r0, r7
    5038:	46a4      	mov	ip, r4
}
    503a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    503e:	4760      	bx	ip
}
    5040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005044 <transition_complete>:
{
    5044:	b410      	push	{r4}
	__asm__ volatile(
    5046:	f04f 0420 	mov.w	r4, #32
    504a:	f3ef 8211 	mrs	r2, BASEPRI
    504e:	f384 8811 	msr	BASEPRI, r4
    5052:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    5056:	6141      	str	r1, [r0, #20]
}
    5058:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    505a:	2101      	movs	r1, #1
    505c:	f7fb bab0 	b.w	5c0 <process_event>

00005060 <validate_args>:
{
    5060:	b510      	push	{r4, lr}
    5062:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    5064:	b140      	cbz	r0, 5078 <validate_args+0x18>
    5066:	b139      	cbz	r1, 5078 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    5068:	1d08      	adds	r0, r1, #4
    506a:	f7ff ff6c 	bl	4f46 <sys_notify_validate>
	if ((rv == 0)
    506e:	b928      	cbnz	r0, 507c <validate_args+0x1c>
	    && ((cli->notify.flags
    5070:	68a3      	ldr	r3, [r4, #8]
    5072:	f033 0303 	bics.w	r3, r3, #3
    5076:	d001      	beq.n	507c <validate_args+0x1c>
		rv = -EINVAL;
    5078:	f06f 0015 	mvn.w	r0, #21
}
    507c:	bd10      	pop	{r4, pc}

0000507e <onoff_manager_init>:
{
    507e:	b538      	push	{r3, r4, r5, lr}
    5080:	460c      	mov	r4, r1
	if ((mgr == NULL)
    5082:	4605      	mov	r5, r0
    5084:	b158      	cbz	r0, 509e <onoff_manager_init+0x20>
	    || (transitions == NULL)
    5086:	b151      	cbz	r1, 509e <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    5088:	680b      	ldr	r3, [r1, #0]
    508a:	b143      	cbz	r3, 509e <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    508c:	684b      	ldr	r3, [r1, #4]
    508e:	b133      	cbz	r3, 509e <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5090:	221c      	movs	r2, #28
    5092:	2100      	movs	r1, #0
    5094:	f000 fdc4 	bl	5c20 <memset>
    5098:	612c      	str	r4, [r5, #16]
	return 0;
    509a:	2000      	movs	r0, #0
}
    509c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    509e:	f06f 0015 	mvn.w	r0, #21
    50a2:	e7fb      	b.n	509c <onoff_manager_init+0x1e>

000050a4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    50a4:	b570      	push	{r4, r5, r6, lr}
    50a6:	4604      	mov	r4, r0
    50a8:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    50aa:	f7ff ffd9 	bl	5060 <validate_args>

	if (rv < 0) {
    50ae:	1e05      	subs	r5, r0, #0
    50b0:	db31      	blt.n	5116 <onoff_request+0x72>
    50b2:	f04f 0320 	mov.w	r3, #32
    50b6:	f3ef 8111 	mrs	r1, BASEPRI
    50ba:	f383 8811 	msr	BASEPRI, r3
    50be:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    50c2:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    50c4:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    50c6:	f64f 75ff 	movw	r5, #65535	; 0xffff
    50ca:	42ab      	cmp	r3, r5
    50cc:	f000 0207 	and.w	r2, r0, #7
    50d0:	d02e      	beq.n	5130 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    50d2:	2a02      	cmp	r2, #2
    50d4:	d10e      	bne.n	50f4 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    50d6:	3301      	adds	r3, #1
    50d8:	8363      	strh	r3, [r4, #26]
	rv = state;
    50da:	4615      	mov	r5, r2
		notify = true;
    50dc:	2301      	movs	r3, #1
	__asm__ volatile(
    50de:	f381 8811 	msr	BASEPRI, r1
    50e2:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    50e6:	b1b3      	cbz	r3, 5116 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    50e8:	2300      	movs	r3, #0
    50ea:	4631      	mov	r1, r6
    50ec:	4620      	mov	r0, r4
    50ee:	f7ff ff93 	bl	5018 <notify_one>
    50f2:	e010      	b.n	5116 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    50f4:	0783      	lsls	r3, r0, #30
    50f6:	d001      	beq.n	50fc <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    50f8:	2a06      	cmp	r2, #6
    50fa:	d10e      	bne.n	511a <onoff_request+0x76>
	parent->next = child;
    50fc:	2300      	movs	r3, #0
    50fe:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    5100:	6863      	ldr	r3, [r4, #4]
    5102:	b993      	cbnz	r3, 512a <onoff_request+0x86>
	list->head = node;
    5104:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    5108:	4615      	mov	r5, r2
    510a:	b962      	cbnz	r2, 5126 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    510c:	460a      	mov	r2, r1
    510e:	4620      	mov	r0, r4
    5110:	2102      	movs	r1, #2
    5112:	f7fb fa55 	bl	5c0 <process_event>
		}
	}

	return rv;
}
    5116:	4628      	mov	r0, r5
    5118:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    511a:	2a05      	cmp	r2, #5
    511c:	bf0c      	ite	eq
    511e:	f06f 0522 	mvneq.w	r5, #34	; 0x22
    5122:	f06f 0504 	mvnne.w	r5, #4
    5126:	2300      	movs	r3, #0
    5128:	e7d9      	b.n	50de <onoff_request+0x3a>
	parent->next = child;
    512a:	601e      	str	r6, [r3, #0]
	list->tail = node;
    512c:	6066      	str	r6, [r4, #4]
}
    512e:	e7eb      	b.n	5108 <onoff_request+0x64>
		rv = -EAGAIN;
    5130:	f06f 050a 	mvn.w	r5, #10
    5134:	e7f7      	b.n	5126 <onoff_request+0x82>

00005136 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    5136:	4604      	mov	r4, r0
    5138:	b508      	push	{r3, lr}
    513a:	4608      	mov	r0, r1
    513c:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    513e:	461a      	mov	r2, r3
    5140:	47a0      	blx	r4
	return z_impl_k_current_get();
    5142:	f7ff f9f3 	bl	452c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    5146:	f7fd fb9b 	bl	2880 <z_impl_k_thread_abort>

0000514a <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    514a:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    514c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    5150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    5154:	bf2c      	ite	cs
    5156:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
    515a:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    515e:	4770      	bx	lr

00005160 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    5160:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
    5164:	6880      	ldr	r0, [r0, #8]
    5166:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    516a:	bf2c      	ite	cs
    516c:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    5170:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    5174:	4770      	bx	lr

00005176 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
    5176:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    5178:	2201      	movs	r2, #1
    517a:	f7ff ffe6 	bl	514a <chunk_field>
}
    517e:	0840      	lsrs	r0, r0, #1
    5180:	bd08      	pop	{r3, pc}

00005182 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    5182:	6883      	ldr	r3, [r0, #8]
    5184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
    5188:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    518c:	d308      	bcc.n	51a0 <set_chunk_used+0x1e>
		if (used) {
    518e:	684b      	ldr	r3, [r1, #4]
    5190:	b11a      	cbz	r2, 519a <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    5192:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    5196:	604b      	str	r3, [r1, #4]
    5198:	4770      	bx	lr
    519a:	f023 0301 	bic.w	r3, r3, #1
    519e:	e7fa      	b.n	5196 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
    51a0:	884b      	ldrh	r3, [r1, #2]
    51a2:	b11a      	cbz	r2, 51ac <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    51a4:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    51a8:	804b      	strh	r3, [r1, #2]
		}
	}
}
    51aa:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    51ac:	f023 0301 	bic.w	r3, r3, #1
    51b0:	e7fa      	b.n	51a8 <set_chunk_used+0x26>

000051b2 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    51b2:	0053      	lsls	r3, r2, #1
    51b4:	2201      	movs	r2, #1
    51b6:	f7ff bfd3 	b.w	5160 <chunk_set>

000051ba <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    51ba:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    51bc:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    51be:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    51c2:	bf2c      	ite	cs
    51c4:	2002      	movcs	r0, #2
    51c6:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    51c8:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
    51ca:	fab0 f080 	clz	r0, r0
}
    51ce:	f1c0 001f 	rsb	r0, r0, #31
    51d2:	4770      	bx	lr

000051d4 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    51d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51d8:	4604      	mov	r4, r0
    51da:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
    51dc:	f7ff ffcb 	bl	5176 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
    51e0:	68a3      	ldr	r3, [r4, #8]
    51e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    51e6:	4601      	mov	r1, r0
    51e8:	d301      	bcc.n	51ee <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
    51ea:	2801      	cmp	r0, #1
    51ec:	d035      	beq.n	525a <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
    51ee:	4620      	mov	r0, r4
    51f0:	f7ff ffe3 	bl	51ba <bucket_idx>
	if (b->next == 0U) {
    51f4:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    51f8:	6916      	ldr	r6, [r2, #16]
    51fa:	b99e      	cbnz	r6, 5224 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
    51fc:	2301      	movs	r3, #1
    51fe:	fa03 f000 	lsl.w	r0, r3, r0
    5202:	68e3      	ldr	r3, [r4, #12]
    5204:	4303      	orrs	r3, r0
    5206:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    5208:	4629      	mov	r1, r5
		b->next = c;
    520a:	6115      	str	r5, [r2, #16]
    520c:	462b      	mov	r3, r5
    520e:	2202      	movs	r2, #2
    5210:	4620      	mov	r0, r4
    5212:	f7ff ffa5 	bl	5160 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    5216:	2203      	movs	r2, #3
    5218:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    521a:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
    521c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5220:	f7ff bf9e 	b.w	5160 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    5224:	2202      	movs	r2, #2
    5226:	4631      	mov	r1, r6
    5228:	4620      	mov	r0, r4
    522a:	f7ff ff8e 	bl	514a <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
    522e:	2202      	movs	r2, #2
    5230:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
    5232:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    5234:	4629      	mov	r1, r5
    5236:	4620      	mov	r0, r4
    5238:	f7ff ff92 	bl	5160 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    523c:	4633      	mov	r3, r6
    523e:	2203      	movs	r2, #3
    5240:	4629      	mov	r1, r5
    5242:	4620      	mov	r0, r4
    5244:	f7ff ff8c 	bl	5160 <chunk_set>
    5248:	2203      	movs	r2, #3
    524a:	4639      	mov	r1, r7
    524c:	462b      	mov	r3, r5
    524e:	4620      	mov	r0, r4
    5250:	f7ff ff86 	bl	5160 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    5254:	2202      	movs	r2, #2
    5256:	4631      	mov	r1, r6
    5258:	e7df      	b.n	521a <free_list_add+0x46>
    525a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000525e <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
    525e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    5262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5264:	bf2c      	ite	cs
    5266:	2508      	movcs	r5, #8
    5268:	2504      	movcc	r5, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    526a:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    526c:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    526e:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    5270:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    5274:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    5278:	2200      	movs	r2, #0
    527a:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    527c:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
    527e:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    5280:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
    5282:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
    5286:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    5288:	4629      	mov	r1, r5
	h->len = buf_sz;
    528a:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
    528c:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    528e:	4620      	mov	r0, r4
    5290:	f7ff ff93 	bl	51ba <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    5294:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    5296:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    5298:	1c41      	adds	r1, r0, #1
    529a:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    529c:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
    52a0:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
    52a2:	428b      	cmp	r3, r1
    52a4:	db29      	blt.n	52fa <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    52a6:	4632      	mov	r2, r6
    52a8:	4620      	mov	r0, r4
    52aa:	2100      	movs	r1, #0
    52ac:	f7ff ff81 	bl	51b2 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    52b0:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
    52b2:	4620      	mov	r0, r4
    52b4:	2201      	movs	r2, #1
    52b6:	2100      	movs	r1, #0
    52b8:	f7ff ff63 	bl	5182 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    52bc:	463a      	mov	r2, r7
    52be:	4631      	mov	r1, r6
    52c0:	f7ff ff77 	bl	51b2 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    52c4:	4633      	mov	r3, r6
    52c6:	4631      	mov	r1, r6
    52c8:	4620      	mov	r0, r4
    52ca:	2200      	movs	r2, #0
    52cc:	f7ff ff48 	bl	5160 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    52d0:	4629      	mov	r1, r5
    52d2:	4620      	mov	r0, r4
    52d4:	2200      	movs	r2, #0
    52d6:	f7ff ff6c 	bl	51b2 <set_chunk_size>
    52da:	463b      	mov	r3, r7
    52dc:	4629      	mov	r1, r5
    52de:	4620      	mov	r0, r4
    52e0:	2200      	movs	r2, #0
    52e2:	f7ff ff3d 	bl	5160 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    52e6:	4629      	mov	r1, r5
    52e8:	4620      	mov	r0, r4
    52ea:	2201      	movs	r2, #1
    52ec:	f7ff ff49 	bl	5182 <set_chunk_used>

	free_list_add(h, chunk0_size);
    52f0:	4631      	mov	r1, r6
}
    52f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    52f6:	f7ff bf6d 	b.w	51d4 <free_list_add>
		h->buckets[i].next = 0;
    52fa:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    52fe:	3301      	adds	r3, #1
    5300:	e7cf      	b.n	52a2 <sys_heap_init+0x44>

00005302 <encode_uint>:
{
    5302:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5306:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    5308:	78d3      	ldrb	r3, [r2, #3]
{
    530a:	4614      	mov	r4, r2
	switch (specifier) {
    530c:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    530e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    5312:	4606      	mov	r6, r0
    5314:	460f      	mov	r7, r1
    5316:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    5318:	d02d      	beq.n	5376 <encode_uint+0x74>
    531a:	d828      	bhi.n	536e <encode_uint+0x6c>
		return 16;
    531c:	2b58      	cmp	r3, #88	; 0x58
    531e:	bf14      	ite	ne
    5320:	250a      	movne	r5, #10
    5322:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    5324:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    5328:	46aa      	mov	sl, r5
    532a:	f04f 0b00 	mov.w	fp, #0
    532e:	4652      	mov	r2, sl
    5330:	465b      	mov	r3, fp
    5332:	4630      	mov	r0, r6
    5334:	4639      	mov	r1, r7
    5336:	f7fa fee3 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    533a:	2a09      	cmp	r2, #9
    533c:	b2d3      	uxtb	r3, r2
    533e:	d81f      	bhi.n	5380 <encode_uint+0x7e>
    5340:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    5342:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5344:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    5346:	bf08      	it	eq
    5348:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    534a:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    534e:	d301      	bcc.n	5354 <encode_uint+0x52>
    5350:	45c8      	cmp	r8, r9
    5352:	d812      	bhi.n	537a <encode_uint+0x78>
	if (conv->flag_hash) {
    5354:	7823      	ldrb	r3, [r4, #0]
    5356:	069b      	lsls	r3, r3, #26
    5358:	d505      	bpl.n	5366 <encode_uint+0x64>
		if (radix == 8) {
    535a:	2d08      	cmp	r5, #8
    535c:	d116      	bne.n	538c <encode_uint+0x8a>
			conv->altform_0 = true;
    535e:	78a3      	ldrb	r3, [r4, #2]
    5360:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    5364:	70a3      	strb	r3, [r4, #2]
}
    5366:	4640      	mov	r0, r8
    5368:	b003      	add	sp, #12
    536a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    536e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    5372:	2b70      	cmp	r3, #112	; 0x70
    5374:	e7d3      	b.n	531e <encode_uint+0x1c>
	switch (specifier) {
    5376:	2508      	movs	r5, #8
    5378:	e7d4      	b.n	5324 <encode_uint+0x22>
		value /= radix;
    537a:	4606      	mov	r6, r0
    537c:	460f      	mov	r7, r1
    537e:	e7d6      	b.n	532e <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5380:	9a01      	ldr	r2, [sp, #4]
    5382:	2a19      	cmp	r2, #25
    5384:	bf94      	ite	ls
    5386:	3337      	addls	r3, #55	; 0x37
    5388:	3357      	addhi	r3, #87	; 0x57
    538a:	e7da      	b.n	5342 <encode_uint+0x40>
		} else if (radix == 16) {
    538c:	2d10      	cmp	r5, #16
    538e:	d1ea      	bne.n	5366 <encode_uint+0x64>
			conv->altform_0c = true;
    5390:	78a3      	ldrb	r3, [r4, #2]
    5392:	f043 0310 	orr.w	r3, r3, #16
    5396:	e7e5      	b.n	5364 <encode_uint+0x62>

00005398 <outs>:
{
    5398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    539c:	4607      	mov	r7, r0
    539e:	4688      	mov	r8, r1
    53a0:	4615      	mov	r5, r2
    53a2:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    53a4:	4614      	mov	r4, r2
    53a6:	42b4      	cmp	r4, r6
    53a8:	eba4 0005 	sub.w	r0, r4, r5
    53ac:	d302      	bcc.n	53b4 <outs+0x1c>
    53ae:	b93e      	cbnz	r6, 53c0 <outs+0x28>
    53b0:	7823      	ldrb	r3, [r4, #0]
    53b2:	b12b      	cbz	r3, 53c0 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    53b4:	f814 0b01 	ldrb.w	r0, [r4], #1
    53b8:	4641      	mov	r1, r8
    53ba:	47b8      	blx	r7
		if (rc < 0) {
    53bc:	2800      	cmp	r0, #0
    53be:	daf2      	bge.n	53a6 <outs+0xe>
}
    53c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000053c4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    53c4:	4770      	bx	lr

000053c6 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
    53c6:	2300      	movs	r3, #0
	list->head = NULL;
    53c8:	e9c0 3300 	strd	r3, r3, [r0]
}
    53cc:	4770      	bx	lr

000053ce <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
    53ce:	6803      	ldr	r3, [r0, #0]
    53d0:	b923      	cbnz	r3, 53dc <log_list_add_tail+0xe>
		list->head = msg;
    53d2:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
    53d4:	2300      	movs	r3, #0
	list->tail = msg;
    53d6:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
    53d8:	600b      	str	r3, [r1, #0]
}
    53da:	4770      	bx	lr
		list->tail->next = msg;
    53dc:	6843      	ldr	r3, [r0, #4]
    53de:	6019      	str	r1, [r3, #0]
    53e0:	e7f8      	b.n	53d4 <log_list_add_tail+0x6>

000053e2 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
    53e2:	6800      	ldr	r0, [r0, #0]
    53e4:	4770      	bx	lr

000053e6 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
    53e6:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
    53e8:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
    53ea:	b108      	cbz	r0, 53f0 <log_list_head_get+0xa>
		list->head = list->head->next;
    53ec:	6802      	ldr	r2, [r0, #0]
    53ee:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
    53f0:	4770      	bx	lr

000053f2 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
    53f2:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    53f4:	f7fc f84c 	bl	1490 <log_msg_chunk_alloc>

	if (msg != NULL) {
    53f8:	b118      	cbz	r0, 5402 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    53fa:	2301      	movs	r3, #1
    53fc:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    53fe:	2300      	movs	r3, #0
    5400:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
    5402:	bd08      	pop	{r3, pc}

00005404 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    5404:	f7fc bd84 	b.w	1f10 <z_timer_cycle_get_32>

00005408 <dummy_timestamp>:
    5408:	2000      	movs	r0, #0
    540a:	4770      	bx	lr

0000540c <z_log_get_s_mask>:
{
    540c:	b5f0      	push	{r4, r5, r6, r7, lr}
    540e:	4605      	mov	r5, r0
	uint32_t mask = 0;
    5410:	2000      	movs	r0, #0
	uint32_t arg = 0;
    5412:	4603      	mov	r3, r0
	bool arm = false;
    5414:	4602      	mov	r2, r0
				mask |= BIT(arg);
    5416:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
    5418:	f815 4b01 	ldrb.w	r4, [r5], #1
    541c:	b10c      	cbz	r4, 5422 <z_log_get_s_mask+0x16>
    541e:	428b      	cmp	r3, r1
    5420:	d300      	bcc.n	5424 <z_log_get_s_mask+0x18>
}
    5422:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
    5424:	2c25      	cmp	r4, #37	; 0x25
    5426:	d102      	bne.n	542e <z_log_get_s_mask+0x22>
			arm = !arm;
    5428:	f082 0201 	eor.w	r2, r2, #1
    542c:	e7f4      	b.n	5418 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
    542e:	2a00      	cmp	r2, #0
    5430:	d0f2      	beq.n	5418 <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    5432:	f044 0620 	orr.w	r6, r4, #32
    5436:	3e61      	subs	r6, #97	; 0x61
    5438:	2e19      	cmp	r6, #25
    543a:	d8ed      	bhi.n	5418 <z_log_get_s_mask+0xc>
			if (curr == 's') {
    543c:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
    543e:	bf04      	itt	eq
    5440:	fa07 f203 	lsleq.w	r2, r7, r3
    5444:	4310      	orreq	r0, r2
			arg++;
    5446:	3301      	adds	r3, #1
			arm = false;
    5448:	2200      	movs	r2, #0
    544a:	e7e5      	b.n	5418 <z_log_get_s_mask+0xc>

0000544c <log_0>:
{
    544c:	b538      	push	{r3, r4, r5, lr}
    544e:	4605      	mov	r5, r0
    5450:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
    5452:	f7ff ffce 	bl	53f2 <z_log_msg_std_alloc>

	if (msg != NULL) {
    5456:	b128      	cbz	r0, 5464 <log_0+0x18>
		msg->str = str;
    5458:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
    545a:	4621      	mov	r1, r4
}
    545c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
    5460:	f7fb bf30 	b.w	12c4 <msg_finalize>
}
    5464:	bd38      	pop	{r3, r4, r5, pc}

00005466 <log_1>:
{
    5466:	b570      	push	{r4, r5, r6, lr}
    5468:	4606      	mov	r6, r0
    546a:	460d      	mov	r5, r1
    546c:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    546e:	f7ff ffc0 	bl	53f2 <z_log_msg_std_alloc>

	if (msg != NULL) {
    5472:	b158      	cbz	r0, 548c <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
    5474:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
    5476:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
    5478:	2101      	movs	r1, #1
    547a:	f361 1207 	bfi	r2, r1, #4, #4
    547e:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
    5480:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
    5482:	4621      	mov	r1, r4
}
    5484:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
    5488:	f7fb bf1c 	b.w	12c4 <msg_finalize>
}
    548c:	bd70      	pop	{r4, r5, r6, pc}

0000548e <log_2>:
{
    548e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5492:	4680      	mov	r8, r0
    5494:	460f      	mov	r7, r1
    5496:	4616      	mov	r6, r2
    5498:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    549a:	f7ff ffaa 	bl	53f2 <z_log_msg_std_alloc>

	if (msg != NULL) {
    549e:	b168      	cbz	r0, 54bc <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
    54a0:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
    54a2:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
    54a6:	2202      	movs	r2, #2
    54a8:	f362 1307 	bfi	r3, r2, #4, #4
    54ac:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    54ae:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
    54b2:	4629      	mov	r1, r5
}
    54b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
    54b8:	f7fb bf04 	b.w	12c4 <msg_finalize>
}
    54bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000054c0 <log_3>:
{
    54c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    54c4:	4680      	mov	r8, r0
    54c6:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    54ca:	460f      	mov	r7, r1
    54cc:	4616      	mov	r6, r2
    54ce:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    54d0:	f7ff ff8f 	bl	53f2 <z_log_msg_std_alloc>

	if (msg != NULL) {
    54d4:	b170      	cbz	r0, 54f4 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
    54d6:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
    54d8:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
    54dc:	2203      	movs	r2, #3
    54de:	f362 1307 	bfi	r3, r2, #4, #4
    54e2:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    54e4:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
    54e8:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
    54ea:	4649      	mov	r1, r9
}
    54ec:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
    54f0:	f7fb bee8 	b.w	12c4 <msg_finalize>
}
    54f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000054f8 <log_n>:
{
    54f8:	b510      	push	{r4, lr}
    54fa:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
    54fc:	f000 f8a1 	bl	5642 <log_msg_create_n>
		if (msg == NULL) {
    5500:	b120      	cbz	r0, 550c <log_n+0x14>
		msg_finalize(msg, src_level);
    5502:	4621      	mov	r1, r4
}
    5504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
    5508:	f7fb bedc 	b.w	12c4 <msg_finalize>
}
    550c:	bd10      	pop	{r4, pc}

0000550e <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
    550e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5512:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
    5514:	8903      	ldrh	r3, [r0, #8]
{
    5516:	f89d 7020 	ldrb.w	r7, [sp, #32]
    551a:	460e      	mov	r6, r1
    551c:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
    551e:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
    5522:	42a2      	cmp	r2, r4
    5524:	d803      	bhi.n	552e <log_msg_hexdump_data_op+0x20>
		*length = 0;
    5526:	2300      	movs	r3, #0
    5528:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
    552a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
    552e:	680b      	ldr	r3, [r1, #0]
    5530:	4423      	add	r3, r4
    5532:	4293      	cmp	r3, r2
		*length = available_len - offset;
    5534:	bf84      	itt	hi
    5536:	1b13      	subhi	r3, r2, r4
    5538:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    553a:	2a0c      	cmp	r2, #12
	req_len = *length;
    553c:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    5540:	d92a      	bls.n	5598 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
    5542:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
    5544:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
    5548:	d82d      	bhi.n	55a6 <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
    554a:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    554c:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    554e:	454a      	cmp	r2, r9
    5550:	bf28      	it	cs
    5552:	464a      	movcs	r2, r9
    5554:	4615      	mov	r5, r2
		if (put_op) {
    5556:	4420      	add	r0, r4
    5558:	b317      	cbz	r7, 55a0 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
    555a:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
    555c:	f000 fb35 	bl	5bca <memcpy>
		req_len -= cpy_len;
    5560:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
    5564:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
    5566:	f1b9 0f00 	cmp.w	r9, #0
    556a:	d0de      	beq.n	552a <log_msg_hexdump_data_op+0x1c>
    556c:	f1b8 0f00 	cmp.w	r8, #0
    5570:	d0db      	beq.n	552a <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
    5572:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    5576:	454d      	cmp	r5, r9
    5578:	bf28      	it	cs
    557a:	464d      	movcs	r5, r9
		if (put_op) {
    557c:	1d20      	adds	r0, r4, #4
    557e:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
    5580:	462a      	mov	r2, r5
		if (put_op) {
    5582:	b1bf      	cbz	r7, 55b4 <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
    5584:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
    5586:	f000 fb20 	bl	5bca <memcpy>
		req_len -= cpy_len;
    558a:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
    558e:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
    5592:	442e      	add	r6, r5
		offset = 0;
    5594:	2400      	movs	r4, #0
    5596:	e7e6      	b.n	5566 <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
    5598:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
    559a:	f04f 0800 	mov.w	r8, #0
    559e:	e7d6      	b.n	554e <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
    55a0:	4601      	mov	r1, r0
    55a2:	4630      	mov	r0, r6
    55a4:	e7da      	b.n	555c <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
    55a6:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
    55a8:	2c1b      	cmp	r4, #27
    55aa:	d9dc      	bls.n	5566 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
    55ac:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
    55b0:	3c1c      	subs	r4, #28
    55b2:	e7f9      	b.n	55a8 <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
    55b4:	4601      	mov	r1, r0
    55b6:	4630      	mov	r0, r6
    55b8:	e7e5      	b.n	5586 <log_msg_hexdump_data_op+0x78>

000055ba <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    55ba:	3004      	adds	r0, #4
    55bc:	f3bf 8f5b 	dmb	ish
    55c0:	e850 3f00 	ldrex	r3, [r0]
    55c4:	3301      	adds	r3, #1
    55c6:	e840 3200 	strex	r2, r3, [r0]
    55ca:	2a00      	cmp	r2, #0
    55cc:	d1f8      	bne.n	55c0 <log_msg_get+0x6>
    55ce:	f3bf 8f5b 	dmb	ish
}
    55d2:	4770      	bx	lr

000055d4 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
    55d4:	7a40      	ldrb	r0, [r0, #9]
}
    55d6:	0900      	lsrs	r0, r0, #4
    55d8:	4770      	bx	lr

000055da <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
    55da:	7a43      	ldrb	r3, [r0, #9]
    55dc:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
    55e0:	ea4f 1213 	mov.w	r2, r3, lsr #4
    55e4:	d216      	bcs.n	5614 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    55e6:	2a03      	cmp	r2, #3
    55e8:	d803      	bhi.n	55f2 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
    55ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    55ee:	6948      	ldr	r0, [r1, #20]
    55f0:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    55f2:	2901      	cmp	r1, #1
    55f4:	d803      	bhi.n	55fe <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
    55f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    55fa:	6988      	ldr	r0, [r1, #24]
    55fc:	4770      	bx	lr
	cont = msg->payload.ext.next;
    55fe:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    5600:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
    5602:	2906      	cmp	r1, #6
    5604:	d803      	bhi.n	560e <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
    5606:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    560a:	6848      	ldr	r0, [r1, #4]
    560c:	4770      	bx	lr
		cont = cont->next;
    560e:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
    5610:	3907      	subs	r1, #7
		cont = cont->next;
    5612:	e7f6      	b.n	5602 <log_msg_arg_get+0x28>
		return 0;
    5614:	2000      	movs	r0, #0
}
    5616:	4770      	bx	lr

00005618 <log_msg_put>:
{
    5618:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    561a:	1d02      	adds	r2, r0, #4
    561c:	f3bf 8f5b 	dmb	ish
    5620:	e852 1f00 	ldrex	r1, [r2]
    5624:	3901      	subs	r1, #1
    5626:	e842 1c00 	strex	ip, r1, [r2]
    562a:	f1bc 0f00 	cmp.w	ip, #0
    562e:	d1f7      	bne.n	5620 <log_msg_put+0x8>
    5630:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
    5634:	685b      	ldr	r3, [r3, #4]
    5636:	b90b      	cbnz	r3, 563c <log_msg_put+0x24>
		msg_free(msg);
    5638:	f7fb bf3e 	b.w	14b8 <msg_free>
}
    563c:	4770      	bx	lr

0000563e <log_msg_str_get>:
}
    563e:	6900      	ldr	r0, [r0, #16]
    5640:	4770      	bx	lr

00005642 <log_msg_create_n>:
{
    5642:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5646:	4681      	mov	r9, r0
    5648:	4688      	mov	r8, r1
    564a:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    564c:	f7fb ff20 	bl	1490 <log_msg_chunk_alloc>
	if (msg != NULL) {
    5650:	4604      	mov	r4, r0
    5652:	b330      	cbz	r0, 56a2 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
    5654:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
    5656:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    5658:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
    565a:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    565c:	8107      	strh	r7, [r0, #8]
    565e:	d909      	bls.n	5674 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
    5660:	2202      	movs	r2, #2
    5662:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
    5664:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
    5668:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
    566c:	6147      	str	r7, [r0, #20]
	while (n > 0) {
    566e:	f1ba 0f00 	cmp.w	sl, #0
    5672:	dc0e      	bgt.n	5692 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
    5674:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
    5676:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
    567a:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
    567e:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
    5680:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
    5682:	d818      	bhi.n	56b6 <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
    5684:	00aa      	lsls	r2, r5, #2
    5686:	4641      	mov	r1, r8
    5688:	f104 0014 	add.w	r0, r4, #20
    568c:	f000 fa9d 	bl	5bca <memcpy>
	while (nargs != 0U) {
    5690:	e007      	b.n	56a2 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
    5692:	f7fb fefd 	bl	1490 <log_msg_chunk_alloc>
		if (cont == NULL) {
    5696:	4606      	mov	r6, r0
    5698:	b930      	cbnz	r0, 56a8 <log_msg_create_n+0x66>
			msg_free(msg);
    569a:	4620      	mov	r0, r4
    569c:	f7fb ff0c 	bl	14b8 <msg_free>
			return NULL;
    56a0:	4634      	mov	r4, r6
}
    56a2:	4620      	mov	r0, r4
    56a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
    56a8:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
    56ac:	f1aa 0a07 	sub.w	sl, sl, #7
    56b0:	6007      	str	r7, [r0, #0]
		next = &cont->next;
    56b2:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
    56b4:	e7db      	b.n	566e <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
    56b6:	4641      	mov	r1, r8
    56b8:	2208      	movs	r2, #8
    56ba:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
    56be:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
    56c0:	f000 fa83 	bl	5bca <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
    56c4:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
    56c6:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
    56ca:	2d07      	cmp	r5, #7
    56cc:	462e      	mov	r6, r5
    56ce:	bf28      	it	cs
    56d0:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
    56d2:	ea4f 0986 	mov.w	r9, r6, lsl #2
    56d6:	4641      	mov	r1, r8
    56d8:	1d38      	adds	r0, r7, #4
    56da:	464a      	mov	r2, r9
    56dc:	f000 fa75 	bl	5bca <memcpy>
	while (nargs != 0U) {
    56e0:	1bad      	subs	r5, r5, r6
		cont = cont->next;
    56e2:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
    56e4:	44c8      	add	r8, r9
	while (nargs != 0U) {
    56e6:	d1f0      	bne.n	56ca <log_msg_create_n+0x88>
    56e8:	e7db      	b.n	56a2 <log_msg_create_n+0x60>

000056ea <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
    56ea:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
    56ec:	2400      	movs	r4, #0
    56ee:	9400      	str	r4, [sp, #0]
    56f0:	f7ff ff0d 	bl	550e <log_msg_hexdump_data_op>
}
    56f4:	b002      	add	sp, #8
    56f6:	bd10      	pop	{r4, pc}

000056f8 <buffer_write>:
{
    56f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56fa:	4606      	mov	r6, r0
    56fc:	460d      	mov	r5, r1
    56fe:	4614      	mov	r4, r2
    5700:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    5702:	4621      	mov	r1, r4
    5704:	4628      	mov	r0, r5
    5706:	463a      	mov	r2, r7
    5708:	47b0      	blx	r6
	} while (len != 0);
    570a:	1a24      	subs	r4, r4, r0
		buf += processed;
    570c:	4405      	add	r5, r0
	} while (len != 0);
    570e:	d1f8      	bne.n	5702 <buffer_write+0xa>
}
    5710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005712 <std_print>:
{
    5712:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5716:	b08e      	sub	sp, #56	; 0x38
    5718:	af0e      	add	r7, sp, #56	; 0x38
    571a:	4680      	mov	r8, r0
    571c:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
    571e:	f7ff ff8e 	bl	563e <log_msg_str_get>
    5722:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
    5724:	4640      	mov	r0, r8
    5726:	f7ff ff55 	bl	55d4 <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
    572a:	0083      	lsls	r3, r0, #2
    572c:	3307      	adds	r3, #7
    572e:	f023 0307 	bic.w	r3, r3, #7
    5732:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
    5736:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
    5738:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
    573a:	f04f 0900 	mov.w	r9, #0
    573e:	45d1      	cmp	r9, sl
    5740:	d116      	bne.n	5770 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
    5742:	4640      	mov	r0, r8
    5744:	f7ff ff46 	bl	55d4 <log_msg_nargs_get>
    5748:	280f      	cmp	r0, #15
    574a:	d81e      	bhi.n	578a <std_print+0x78>
    574c:	e8df f010 	tbh	[pc, r0, lsl #1]
    5750:	00200019 	.word	0x00200019
    5754:	002d0026 	.word	0x002d0026
    5758:	00410036 	.word	0x00410036
    575c:	005d004e 	.word	0x005d004e
    5760:	0081006e 	.word	0x0081006e
    5764:	00ad0096 	.word	0x00ad0096
    5768:	00e100c6 	.word	0x00e100c6
    576c:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
    5770:	4649      	mov	r1, r9
    5772:	4640      	mov	r0, r8
    5774:	f7ff ff31 	bl	55da <log_msg_arg_get>
    5778:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
    577c:	f109 0901 	add.w	r9, r9, #1
    5780:	e7dd      	b.n	573e <std_print+0x2c>
		print_formatted(log_output, str);
    5782:	4631      	mov	r1, r6
    5784:	4628      	mov	r0, r5
    5786:	f7fb fed5 	bl	1534 <print_formatted>
}
    578a:	46bd      	mov	sp, r7
    578c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
    5790:	6822      	ldr	r2, [r4, #0]
    5792:	4631      	mov	r1, r6
    5794:	4628      	mov	r0, r5
    5796:	f7fb fecd 	bl	1534 <print_formatted>
		break;
    579a:	e7f6      	b.n	578a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
    579c:	e9d4 2300 	ldrd	r2, r3, [r4]
    57a0:	4631      	mov	r1, r6
    57a2:	4628      	mov	r0, r5
    57a4:	f7fb fec6 	bl	1534 <print_formatted>
		break;
    57a8:	e7ef      	b.n	578a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
    57aa:	68a3      	ldr	r3, [r4, #8]
    57ac:	9300      	str	r3, [sp, #0]
    57ae:	e9d4 2300 	ldrd	r2, r3, [r4]
    57b2:	4631      	mov	r1, r6
    57b4:	4628      	mov	r0, r5
    57b6:	f7fb febd 	bl	1534 <print_formatted>
		break;
    57ba:	e7e6      	b.n	578a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    57bc:	68e3      	ldr	r3, [r4, #12]
    57be:	9301      	str	r3, [sp, #4]
    57c0:	68a3      	ldr	r3, [r4, #8]
    57c2:	9300      	str	r3, [sp, #0]
    57c4:	e9d4 2300 	ldrd	r2, r3, [r4]
    57c8:	4631      	mov	r1, r6
    57ca:	4628      	mov	r0, r5
    57cc:	f7fb feb2 	bl	1534 <print_formatted>
		break;
    57d0:	e7db      	b.n	578a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    57d2:	6923      	ldr	r3, [r4, #16]
    57d4:	9302      	str	r3, [sp, #8]
    57d6:	68e3      	ldr	r3, [r4, #12]
    57d8:	9301      	str	r3, [sp, #4]
    57da:	68a3      	ldr	r3, [r4, #8]
    57dc:	9300      	str	r3, [sp, #0]
    57de:	e9d4 2300 	ldrd	r2, r3, [r4]
    57e2:	4631      	mov	r1, r6
    57e4:	4628      	mov	r0, r5
    57e6:	f7fb fea5 	bl	1534 <print_formatted>
		break;
    57ea:	e7ce      	b.n	578a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    57ec:	6963      	ldr	r3, [r4, #20]
    57ee:	9303      	str	r3, [sp, #12]
    57f0:	6923      	ldr	r3, [r4, #16]
    57f2:	9302      	str	r3, [sp, #8]
    57f4:	68e3      	ldr	r3, [r4, #12]
    57f6:	9301      	str	r3, [sp, #4]
    57f8:	68a3      	ldr	r3, [r4, #8]
    57fa:	9300      	str	r3, [sp, #0]
    57fc:	e9d4 2300 	ldrd	r2, r3, [r4]
    5800:	4631      	mov	r1, r6
    5802:	4628      	mov	r0, r5
    5804:	f7fb fe96 	bl	1534 <print_formatted>
		break;
    5808:	e7bf      	b.n	578a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    580a:	69a3      	ldr	r3, [r4, #24]
    580c:	9304      	str	r3, [sp, #16]
    580e:	6963      	ldr	r3, [r4, #20]
    5810:	9303      	str	r3, [sp, #12]
    5812:	6923      	ldr	r3, [r4, #16]
    5814:	9302      	str	r3, [sp, #8]
    5816:	68e3      	ldr	r3, [r4, #12]
    5818:	9301      	str	r3, [sp, #4]
    581a:	68a3      	ldr	r3, [r4, #8]
    581c:	9300      	str	r3, [sp, #0]
    581e:	e9d4 2300 	ldrd	r2, r3, [r4]
    5822:	4631      	mov	r1, r6
    5824:	4628      	mov	r0, r5
    5826:	f7fb fe85 	bl	1534 <print_formatted>
		break;
    582a:	e7ae      	b.n	578a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    582c:	69e3      	ldr	r3, [r4, #28]
    582e:	9305      	str	r3, [sp, #20]
    5830:	69a3      	ldr	r3, [r4, #24]
    5832:	9304      	str	r3, [sp, #16]
    5834:	6963      	ldr	r3, [r4, #20]
    5836:	9303      	str	r3, [sp, #12]
    5838:	6923      	ldr	r3, [r4, #16]
    583a:	9302      	str	r3, [sp, #8]
    583c:	68e3      	ldr	r3, [r4, #12]
    583e:	9301      	str	r3, [sp, #4]
    5840:	68a3      	ldr	r3, [r4, #8]
    5842:	9300      	str	r3, [sp, #0]
    5844:	e9d4 2300 	ldrd	r2, r3, [r4]
    5848:	4631      	mov	r1, r6
    584a:	4628      	mov	r0, r5
    584c:	f7fb fe72 	bl	1534 <print_formatted>
		break;
    5850:	e79b      	b.n	578a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    5852:	6a23      	ldr	r3, [r4, #32]
    5854:	9306      	str	r3, [sp, #24]
    5856:	69e3      	ldr	r3, [r4, #28]
    5858:	9305      	str	r3, [sp, #20]
    585a:	69a3      	ldr	r3, [r4, #24]
    585c:	9304      	str	r3, [sp, #16]
    585e:	6963      	ldr	r3, [r4, #20]
    5860:	9303      	str	r3, [sp, #12]
    5862:	6923      	ldr	r3, [r4, #16]
    5864:	9302      	str	r3, [sp, #8]
    5866:	68e3      	ldr	r3, [r4, #12]
    5868:	9301      	str	r3, [sp, #4]
    586a:	68a3      	ldr	r3, [r4, #8]
    586c:	9300      	str	r3, [sp, #0]
    586e:	e9d4 2300 	ldrd	r2, r3, [r4]
    5872:	4631      	mov	r1, r6
    5874:	4628      	mov	r0, r5
    5876:	f7fb fe5d 	bl	1534 <print_formatted>
		break;
    587a:	e786      	b.n	578a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    587c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    587e:	9307      	str	r3, [sp, #28]
    5880:	6a23      	ldr	r3, [r4, #32]
    5882:	9306      	str	r3, [sp, #24]
    5884:	69e3      	ldr	r3, [r4, #28]
    5886:	9305      	str	r3, [sp, #20]
    5888:	69a3      	ldr	r3, [r4, #24]
    588a:	9304      	str	r3, [sp, #16]
    588c:	6963      	ldr	r3, [r4, #20]
    588e:	9303      	str	r3, [sp, #12]
    5890:	6923      	ldr	r3, [r4, #16]
    5892:	9302      	str	r3, [sp, #8]
    5894:	68e3      	ldr	r3, [r4, #12]
    5896:	9301      	str	r3, [sp, #4]
    5898:	68a3      	ldr	r3, [r4, #8]
    589a:	9300      	str	r3, [sp, #0]
    589c:	e9d4 2300 	ldrd	r2, r3, [r4]
    58a0:	4631      	mov	r1, r6
    58a2:	4628      	mov	r0, r5
    58a4:	f7fb fe46 	bl	1534 <print_formatted>
		break;
    58a8:	e76f      	b.n	578a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    58aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    58ac:	9308      	str	r3, [sp, #32]
    58ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
    58b0:	9307      	str	r3, [sp, #28]
    58b2:	6a23      	ldr	r3, [r4, #32]
    58b4:	9306      	str	r3, [sp, #24]
    58b6:	69e3      	ldr	r3, [r4, #28]
    58b8:	9305      	str	r3, [sp, #20]
    58ba:	69a3      	ldr	r3, [r4, #24]
    58bc:	9304      	str	r3, [sp, #16]
    58be:	6963      	ldr	r3, [r4, #20]
    58c0:	9303      	str	r3, [sp, #12]
    58c2:	6923      	ldr	r3, [r4, #16]
    58c4:	9302      	str	r3, [sp, #8]
    58c6:	68e3      	ldr	r3, [r4, #12]
    58c8:	9301      	str	r3, [sp, #4]
    58ca:	68a3      	ldr	r3, [r4, #8]
    58cc:	9300      	str	r3, [sp, #0]
    58ce:	e9d4 2300 	ldrd	r2, r3, [r4]
    58d2:	4631      	mov	r1, r6
    58d4:	4628      	mov	r0, r5
    58d6:	f7fb fe2d 	bl	1534 <print_formatted>
		break;
    58da:	e756      	b.n	578a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    58dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    58de:	9309      	str	r3, [sp, #36]	; 0x24
    58e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    58e2:	9308      	str	r3, [sp, #32]
    58e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    58e6:	9307      	str	r3, [sp, #28]
    58e8:	6a23      	ldr	r3, [r4, #32]
    58ea:	9306      	str	r3, [sp, #24]
    58ec:	69e3      	ldr	r3, [r4, #28]
    58ee:	9305      	str	r3, [sp, #20]
    58f0:	69a3      	ldr	r3, [r4, #24]
    58f2:	9304      	str	r3, [sp, #16]
    58f4:	6963      	ldr	r3, [r4, #20]
    58f6:	9303      	str	r3, [sp, #12]
    58f8:	6923      	ldr	r3, [r4, #16]
    58fa:	9302      	str	r3, [sp, #8]
    58fc:	68e3      	ldr	r3, [r4, #12]
    58fe:	9301      	str	r3, [sp, #4]
    5900:	68a3      	ldr	r3, [r4, #8]
    5902:	9300      	str	r3, [sp, #0]
    5904:	e9d4 2300 	ldrd	r2, r3, [r4]
    5908:	4631      	mov	r1, r6
    590a:	4628      	mov	r0, r5
    590c:	f7fb fe12 	bl	1534 <print_formatted>
		break;
    5910:	e73b      	b.n	578a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    5912:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5914:	930a      	str	r3, [sp, #40]	; 0x28
    5916:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5918:	9309      	str	r3, [sp, #36]	; 0x24
    591a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    591c:	9308      	str	r3, [sp, #32]
    591e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5920:	9307      	str	r3, [sp, #28]
    5922:	6a23      	ldr	r3, [r4, #32]
    5924:	9306      	str	r3, [sp, #24]
    5926:	69e3      	ldr	r3, [r4, #28]
    5928:	9305      	str	r3, [sp, #20]
    592a:	69a3      	ldr	r3, [r4, #24]
    592c:	9304      	str	r3, [sp, #16]
    592e:	6963      	ldr	r3, [r4, #20]
    5930:	9303      	str	r3, [sp, #12]
    5932:	6923      	ldr	r3, [r4, #16]
    5934:	9302      	str	r3, [sp, #8]
    5936:	68e3      	ldr	r3, [r4, #12]
    5938:	9301      	str	r3, [sp, #4]
    593a:	68a3      	ldr	r3, [r4, #8]
    593c:	9300      	str	r3, [sp, #0]
    593e:	e9d4 2300 	ldrd	r2, r3, [r4]
    5942:	4631      	mov	r1, r6
    5944:	4628      	mov	r0, r5
    5946:	f7fb fdf5 	bl	1534 <print_formatted>
		break;
    594a:	e71e      	b.n	578a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    594c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    594e:	930b      	str	r3, [sp, #44]	; 0x2c
    5950:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5952:	930a      	str	r3, [sp, #40]	; 0x28
    5954:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5956:	9309      	str	r3, [sp, #36]	; 0x24
    5958:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    595a:	9308      	str	r3, [sp, #32]
    595c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    595e:	9307      	str	r3, [sp, #28]
    5960:	6a23      	ldr	r3, [r4, #32]
    5962:	9306      	str	r3, [sp, #24]
    5964:	69e3      	ldr	r3, [r4, #28]
    5966:	9305      	str	r3, [sp, #20]
    5968:	69a3      	ldr	r3, [r4, #24]
    596a:	9304      	str	r3, [sp, #16]
    596c:	6963      	ldr	r3, [r4, #20]
    596e:	9303      	str	r3, [sp, #12]
    5970:	6923      	ldr	r3, [r4, #16]
    5972:	9302      	str	r3, [sp, #8]
    5974:	68e3      	ldr	r3, [r4, #12]
    5976:	9301      	str	r3, [sp, #4]
    5978:	68a3      	ldr	r3, [r4, #8]
    597a:	9300      	str	r3, [sp, #0]
    597c:	e9d4 2300 	ldrd	r2, r3, [r4]
    5980:	4631      	mov	r1, r6
    5982:	4628      	mov	r0, r5
    5984:	f7fb fdd6 	bl	1534 <print_formatted>
		break;
    5988:	e6ff      	b.n	578a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    598a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    598c:	930c      	str	r3, [sp, #48]	; 0x30
    598e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5990:	930b      	str	r3, [sp, #44]	; 0x2c
    5992:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5994:	930a      	str	r3, [sp, #40]	; 0x28
    5996:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5998:	9309      	str	r3, [sp, #36]	; 0x24
    599a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    599c:	9308      	str	r3, [sp, #32]
    599e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    59a0:	9307      	str	r3, [sp, #28]
    59a2:	6a23      	ldr	r3, [r4, #32]
    59a4:	9306      	str	r3, [sp, #24]
    59a6:	69e3      	ldr	r3, [r4, #28]
    59a8:	9305      	str	r3, [sp, #20]
    59aa:	69a3      	ldr	r3, [r4, #24]
    59ac:	9304      	str	r3, [sp, #16]
    59ae:	6963      	ldr	r3, [r4, #20]
    59b0:	9303      	str	r3, [sp, #12]
    59b2:	6923      	ldr	r3, [r4, #16]
    59b4:	9302      	str	r3, [sp, #8]
    59b6:	68e3      	ldr	r3, [r4, #12]
    59b8:	9301      	str	r3, [sp, #4]
    59ba:	68a3      	ldr	r3, [r4, #8]
    59bc:	9300      	str	r3, [sp, #0]
    59be:	e9d4 2300 	ldrd	r2, r3, [r4]
    59c2:	4631      	mov	r1, r6
    59c4:	4628      	mov	r0, r5
    59c6:	f7fb fdb5 	bl	1534 <print_formatted>
}
    59ca:	e6de      	b.n	578a <std_print+0x78>

000059cc <log_output_flush>:
		     log_output->control_block->offset,
    59cc:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
    59ce:	6881      	ldr	r1, [r0, #8]
{
    59d0:	b510      	push	{r4, lr}
    59d2:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
    59d4:	e9d2 2300 	ldrd	r2, r3, [r2]
    59d8:	6800      	ldr	r0, [r0, #0]
    59da:	f7ff fe8d 	bl	56f8 <buffer_write>
	log_output->control_block->offset = 0;
    59de:	6863      	ldr	r3, [r4, #4]
    59e0:	2200      	movs	r2, #0
    59e2:	601a      	str	r2, [r3, #0]
}
    59e4:	bd10      	pop	{r4, pc}

000059e6 <out_func>:
{
    59e6:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    59e8:	684b      	ldr	r3, [r1, #4]
    59ea:	681a      	ldr	r2, [r3, #0]
    59ec:	68cb      	ldr	r3, [r1, #12]
    59ee:	429a      	cmp	r2, r3
{
    59f0:	4605      	mov	r5, r0
    59f2:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    59f4:	d102      	bne.n	59fc <out_func+0x16>
		log_output_flush(out_ctx);
    59f6:	4608      	mov	r0, r1
    59f8:	f7ff ffe8 	bl	59cc <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    59fc:	6863      	ldr	r3, [r4, #4]
    59fe:	f3bf 8f5b 	dmb	ish
    5a02:	e853 2f00 	ldrex	r2, [r3]
    5a06:	1c51      	adds	r1, r2, #1
    5a08:	e843 1000 	strex	r0, r1, [r3]
    5a0c:	2800      	cmp	r0, #0
    5a0e:	d1f8      	bne.n	5a02 <out_func+0x1c>
    5a10:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    5a14:	68a3      	ldr	r3, [r4, #8]
    5a16:	549d      	strb	r5, [r3, r2]
}
    5a18:	2000      	movs	r0, #0
    5a1a:	bd38      	pop	{r3, r4, r5, pc}

00005a1c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    5a1c:	68c2      	ldr	r2, [r0, #12]
    5a1e:	b2cb      	uxtb	r3, r1
    5a20:	210c      	movs	r1, #12
    5a22:	fb03 2101 	mla	r1, r3, r1, r2
    5a26:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
    5a28:	f000 0007 	and.w	r0, r0, #7
    5a2c:	4770      	bx	lr

00005a2e <set_off_state>:
	__asm__ volatile(
    5a2e:	f04f 0320 	mov.w	r3, #32
    5a32:	f3ef 8211 	mrs	r2, BASEPRI
    5a36:	f383 8811 	msr	BASEPRI, r3
    5a3a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5a3e:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    5a40:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    5a44:	d001      	beq.n	5a4a <set_off_state+0x1c>
    5a46:	428b      	cmp	r3, r1
    5a48:	d107      	bne.n	5a5a <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    5a4a:	2301      	movs	r3, #1
    5a4c:	6003      	str	r3, [r0, #0]
	int err = 0;
    5a4e:	2000      	movs	r0, #0
	__asm__ volatile(
    5a50:	f382 8811 	msr	BASEPRI, r2
    5a54:	f3bf 8f6f 	isb	sy
}
    5a58:	4770      	bx	lr
		err = -EPERM;
    5a5a:	f04f 30ff 	mov.w	r0, #4294967295
    5a5e:	e7f7      	b.n	5a50 <set_off_state+0x22>

00005a60 <set_starting_state>:
{
    5a60:	b510      	push	{r4, lr}
	__asm__ volatile(
    5a62:	f04f 0320 	mov.w	r3, #32
    5a66:	f3ef 8211 	mrs	r2, BASEPRI
    5a6a:	f383 8811 	msr	BASEPRI, r3
    5a6e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5a72:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    5a74:	f003 0407 	and.w	r4, r3, #7
    5a78:	2c01      	cmp	r4, #1
    5a7a:	d106      	bne.n	5a8a <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    5a7c:	6001      	str	r1, [r0, #0]
	int err = 0;
    5a7e:	2000      	movs	r0, #0
	__asm__ volatile(
    5a80:	f382 8811 	msr	BASEPRI, r2
    5a84:	f3bf 8f6f 	isb	sy
}
    5a88:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    5a8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    5a8e:	428b      	cmp	r3, r1
		err = -EALREADY;
    5a90:	bf14      	ite	ne
    5a92:	f04f 30ff 	movne.w	r0, #4294967295
    5a96:	f06f 0044 	mvneq.w	r0, #68	; 0x44
    5a9a:	e7f1      	b.n	5a80 <set_starting_state+0x20>

00005a9c <set_on_state>:
	__asm__ volatile(
    5a9c:	f04f 0320 	mov.w	r3, #32
    5aa0:	f3ef 8211 	mrs	r2, BASEPRI
    5aa4:	f383 8811 	msr	BASEPRI, r3
    5aa8:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    5aac:	6803      	ldr	r3, [r0, #0]
    5aae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5ab2:	f043 0302 	orr.w	r3, r3, #2
    5ab6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    5ab8:	f382 8811 	msr	BASEPRI, r2
    5abc:	f3bf 8f6f 	isb	sy
}
    5ac0:	4770      	bx	lr

00005ac2 <onoff_started_callback>:
	return &data->mgr[type];
    5ac2:	68c0      	ldr	r0, [r0, #12]
{
    5ac4:	b410      	push	{r4}
	return &data->mgr[type];
    5ac6:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    5ac8:	241c      	movs	r4, #28
    5aca:	fb03 0004 	mla	r0, r3, r4, r0
    5ace:	2100      	movs	r1, #0
}
    5ad0:	bc10      	pop	{r4}
	notify(mgr, 0);
    5ad2:	4710      	bx	r2

00005ad4 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    5ad4:	2000      	movs	r0, #0
    5ad6:	f7fd bd7f 	b.w	35d8 <nrfx_clock_start>

00005ada <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    5ada:	2000      	movs	r0, #0
    5adc:	f7fd bdae 	b.w	363c <nrfx_clock_stop>

00005ae0 <blocking_start_callback>:
{
    5ae0:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    5ae2:	f7fe bd29 	b.w	4538 <z_impl_k_sem_give>

00005ae6 <api_stop>:
{
    5ae6:	b538      	push	{r3, r4, r5, lr}
    5ae8:	b2c9      	uxtb	r1, r1
	err = set_off_state(&subdata->flags, ctx);
    5aea:	240c      	movs	r4, #12
    5aec:	434c      	muls	r4, r1
{
    5aee:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    5af0:	68c0      	ldr	r0, [r0, #12]
    5af2:	f104 0340 	add.w	r3, r4, #64	; 0x40
    5af6:	2180      	movs	r1, #128	; 0x80
    5af8:	4418      	add	r0, r3
    5afa:	f7ff ff98 	bl	5a2e <set_off_state>
	if (err < 0) {
    5afe:	2800      	cmp	r0, #0
    5b00:	db04      	blt.n	5b0c <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    5b02:	6869      	ldr	r1, [r5, #4]
    5b04:	440c      	add	r4, r1
    5b06:	6863      	ldr	r3, [r4, #4]
    5b08:	4798      	blx	r3
	return 0;
    5b0a:	2000      	movs	r0, #0
}
    5b0c:	bd38      	pop	{r3, r4, r5, pc}

00005b0e <api_start>:
{
    5b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b12:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
    5b14:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    5b16:	68c5      	ldr	r5, [r0, #12]
	err = set_starting_state(&subdata->flags, ctx);
    5b18:	434c      	muls	r4, r1
{
    5b1a:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    5b1c:	f104 0040 	add.w	r0, r4, #64	; 0x40
    5b20:	2180      	movs	r1, #128	; 0x80
    5b22:	4428      	add	r0, r5
{
    5b24:	4690      	mov	r8, r2
    5b26:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
    5b28:	f7ff ff9a 	bl	5a60 <set_starting_state>
	if (err < 0) {
    5b2c:	2800      	cmp	r0, #0
    5b2e:	db06      	blt.n	5b3e <api_start+0x30>
	subdata->cb = cb;
    5b30:	4425      	add	r5, r4
	subdata->user_data = user_data;
    5b32:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    5b36:	6873      	ldr	r3, [r6, #4]
    5b38:	591b      	ldr	r3, [r3, r4]
    5b3a:	4798      	blx	r3
	return 0;
    5b3c:	2000      	movs	r0, #0
}
    5b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005b42 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    5b42:	4770      	bx	lr

00005b44 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    5b44:	4770      	bx	lr

00005b46 <sys_clock_disable>:
    5b46:	4770      	bx	lr

00005b48 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    5b48:	2000      	movs	r0, #0
    5b4a:	f7fb bf1b 	b.w	1984 <sys_reboot>

00005b4e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    5b4e:	2100      	movs	r1, #0
    5b50:	2001      	movs	r0, #1
    5b52:	f7fc bbb9 	b.w	22c8 <z_arm_fatal_error>

00005b56 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    5b56:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    5b58:	6800      	ldr	r0, [r0, #0]
    5b5a:	f7fc bbb5 	b.w	22c8 <z_arm_fatal_error>

00005b5e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    5b5e:	b508      	push	{r3, lr}
	handler();
    5b60:	f7fc fbea 	bl	2338 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    5b64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    5b68:	f7fc be70 	b.w	284c <z_arm_exc_exit>

00005b6c <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
    5b6c:	b570      	push	{r4, r5, r6, lr}
    5b6e:	3901      	subs	r1, #1
    5b70:	4605      	mov	r5, r0
    5b72:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    5b74:	b142      	cbz	r2, 5b88 <strncpy+0x1c>
    5b76:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    5b7a:	1e56      	subs	r6, r2, #1
    5b7c:	b92b      	cbnz	r3, 5b8a <strncpy+0x1e>
    5b7e:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
    5b80:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
    5b84:	42a2      	cmp	r2, r4
    5b86:	d1fb      	bne.n	5b80 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
    5b88:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
    5b8a:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
    5b8e:	4632      	mov	r2, r6
    5b90:	e7ef      	b.n	5b72 <strncpy+0x6>

00005b92 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    5b92:	4603      	mov	r3, r0
	size_t n = 0;
    5b94:	2000      	movs	r0, #0

	while (*s != '\0') {
    5b96:	5c1a      	ldrb	r2, [r3, r0]
    5b98:	b902      	cbnz	r2, 5b9c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    5b9a:	4770      	bx	lr
		n++;
    5b9c:	3001      	adds	r0, #1
    5b9e:	e7fa      	b.n	5b96 <strlen+0x4>

00005ba0 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    5ba0:	4603      	mov	r3, r0
	size_t n = 0;
    5ba2:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    5ba4:	5c1a      	ldrb	r2, [r3, r0]
    5ba6:	b10a      	cbz	r2, 5bac <strnlen+0xc>
    5ba8:	4288      	cmp	r0, r1
    5baa:	d100      	bne.n	5bae <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    5bac:	4770      	bx	lr
		n++;
    5bae:	3001      	adds	r0, #1
    5bb0:	e7f8      	b.n	5ba4 <strnlen+0x4>

00005bb2 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    5bb2:	1e43      	subs	r3, r0, #1
    5bb4:	3901      	subs	r1, #1
    5bb6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    5bba:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    5bbe:	4282      	cmp	r2, r0
    5bc0:	d101      	bne.n	5bc6 <strcmp+0x14>
    5bc2:	2a00      	cmp	r2, #0
    5bc4:	d1f7      	bne.n	5bb6 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    5bc6:	1a10      	subs	r0, r2, r0
    5bc8:	4770      	bx	lr

00005bca <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    5bca:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    5bcc:	ea81 0400 	eor.w	r4, r1, r0
    5bd0:	07a5      	lsls	r5, r4, #30
    5bd2:	4603      	mov	r3, r0
    5bd4:	d00b      	beq.n	5bee <memcpy+0x24>
    5bd6:	3b01      	subs	r3, #1
    5bd8:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    5bda:	4291      	cmp	r1, r2
    5bdc:	d11b      	bne.n	5c16 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    5bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    5be0:	2a00      	cmp	r2, #0
    5be2:	d0fc      	beq.n	5bde <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    5be4:	f811 4b01 	ldrb.w	r4, [r1], #1
    5be8:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    5bec:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
    5bee:	079c      	lsls	r4, r3, #30
    5bf0:	d1f6      	bne.n	5be0 <memcpy+0x16>
    5bf2:	f022 0403 	bic.w	r4, r2, #3
    5bf6:	1f1d      	subs	r5, r3, #4
    5bf8:	0896      	lsrs	r6, r2, #2
    5bfa:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    5bfc:	42b9      	cmp	r1, r7
    5bfe:	d105      	bne.n	5c0c <memcpy+0x42>
    5c00:	f06f 0503 	mvn.w	r5, #3
    5c04:	fb05 2206 	mla	r2, r5, r6, r2
    5c08:	4423      	add	r3, r4
    5c0a:	e7e4      	b.n	5bd6 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    5c0c:	f851 cb04 	ldr.w	ip, [r1], #4
    5c10:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    5c14:	e7f2      	b.n	5bfc <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    5c16:	f811 4b01 	ldrb.w	r4, [r1], #1
    5c1a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    5c1e:	e7dc      	b.n	5bda <memcpy+0x10>

00005c20 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    5c20:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    5c22:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    5c24:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    5c26:	079c      	lsls	r4, r3, #30
    5c28:	d111      	bne.n	5c4e <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    5c2a:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    5c2e:	f022 0603 	bic.w	r6, r2, #3
    5c32:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    5c36:	441e      	add	r6, r3
    5c38:	0894      	lsrs	r4, r2, #2
    5c3a:	42b3      	cmp	r3, r6
    5c3c:	d10d      	bne.n	5c5a <memset+0x3a>
    5c3e:	f06f 0503 	mvn.w	r5, #3
    5c42:	fb05 2204 	mla	r2, r5, r4, r2
    5c46:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    5c48:	4293      	cmp	r3, r2
    5c4a:	d109      	bne.n	5c60 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    5c4c:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    5c4e:	2a00      	cmp	r2, #0
    5c50:	d0fc      	beq.n	5c4c <memset+0x2c>
		*(d_byte++) = c_byte;
    5c52:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5c56:	3a01      	subs	r2, #1
    5c58:	e7e5      	b.n	5c26 <memset+0x6>
		*(d_word++) = c_word;
    5c5a:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    5c5e:	e7ec      	b.n	5c3a <memset+0x1a>
		*(d_byte++) = c_byte;
    5c60:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5c64:	e7f0      	b.n	5c48 <memset+0x28>

00005c66 <_stdout_hook_default>:
}
    5c66:	f04f 30ff 	mov.w	r0, #4294967295
    5c6a:	4770      	bx	lr

00005c6c <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    5c6c:	f7fd bbd4 	b.w	3418 <SystemInit>

00005c70 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    5c70:	b570      	push	{r4, r5, r6, lr}
    5c72:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5c74:	6801      	ldr	r1, [r0, #0]
{
    5c76:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5c78:	b189      	cbz	r1, 5c9e <gpio_fire_callbacks+0x2e>
	return node->next;
    5c7a:	680c      	ldr	r4, [r1, #0]
    5c7c:	2c00      	cmp	r4, #0
    5c7e:	bf38      	it	cc
    5c80:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
    5c82:	688a      	ldr	r2, [r1, #8]
    5c84:	402a      	ands	r2, r5
    5c86:	d002      	beq.n	5c8e <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    5c88:	684b      	ldr	r3, [r1, #4]
    5c8a:	4630      	mov	r0, r6
    5c8c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5c8e:	b134      	cbz	r4, 5c9e <gpio_fire_callbacks+0x2e>
    5c90:	6823      	ldr	r3, [r4, #0]
    5c92:	2b00      	cmp	r3, #0
    5c94:	bf38      	it	cc
    5c96:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    5c98:	4621      	mov	r1, r4
    5c9a:	461c      	mov	r4, r3
    5c9c:	e7f1      	b.n	5c82 <gpio_fire_callbacks+0x12>
		}
	}
}
    5c9e:	bd70      	pop	{r4, r5, r6, pc}

00005ca0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5ca0:	6843      	ldr	r3, [r0, #4]
    5ca2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    5ca4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    5ca8:	600b      	str	r3, [r1, #0]
}
    5caa:	2000      	movs	r0, #0
    5cac:	4770      	bx	lr

00005cae <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5cae:	6843      	ldr	r3, [r0, #4]
    5cb0:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    5cb2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    5cb6:	4042      	eors	r2, r0
    5cb8:	400a      	ands	r2, r1
    5cba:	4042      	eors	r2, r0
    p_reg->OUT = value;
    5cbc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    5cc0:	2000      	movs	r0, #0
    5cc2:	4770      	bx	lr

00005cc4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5cc4:	6843      	ldr	r3, [r0, #4]
    5cc6:	685b      	ldr	r3, [r3, #4]
}
    5cc8:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    5cca:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    5cce:	4770      	bx	lr

00005cd0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5cd0:	6843      	ldr	r3, [r0, #4]
    5cd2:	685b      	ldr	r3, [r3, #4]
}
    5cd4:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    5cd6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    5cda:	4770      	bx	lr

00005cdc <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5cdc:	6843      	ldr	r3, [r0, #4]
    5cde:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    5ce0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    5ce4:	404b      	eors	r3, r1
    p_reg->OUT = value;
    5ce6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    5cea:	2000      	movs	r0, #0
    5cec:	4770      	bx	lr

00005cee <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5cee:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
    5cf0:	6858      	ldr	r0, [r3, #4]
{
    5cf2:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    5cf4:	b158      	cbz	r0, 5d0e <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5cf6:	2400      	movs	r4, #0
    5cf8:	4281      	cmp	r1, r0
    5cfa:	d113      	bne.n	5d24 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    5cfc:	6808      	ldr	r0, [r1, #0]
    5cfe:	b95c      	cbnz	r4, 5d18 <gpio_nrfx_manage_callback+0x2a>
    5d00:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    5d02:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    5d04:	42a1      	cmp	r1, r4
    5d06:	d100      	bne.n	5d0a <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    5d08:	6098      	str	r0, [r3, #8]
	parent->next = child;
    5d0a:	2000      	movs	r0, #0
    5d0c:	6008      	str	r0, [r1, #0]
	if (set) {
    5d0e:	b972      	cbnz	r2, 5d2e <gpio_nrfx_manage_callback+0x40>
	return 0;
    5d10:	2000      	movs	r0, #0
}
    5d12:	bd30      	pop	{r4, r5, pc}
    5d14:	4628      	mov	r0, r5
    5d16:	e7ef      	b.n	5cf8 <gpio_nrfx_manage_callback+0xa>
    5d18:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    5d1a:	6898      	ldr	r0, [r3, #8]
    5d1c:	4281      	cmp	r1, r0
	list->tail = node;
    5d1e:	bf08      	it	eq
    5d20:	609c      	streq	r4, [r3, #8]
}
    5d22:	e7f2      	b.n	5d0a <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    5d24:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5d26:	4604      	mov	r4, r0
    5d28:	2d00      	cmp	r5, #0
    5d2a:	d1f3      	bne.n	5d14 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    5d2c:	b13a      	cbz	r2, 5d3e <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    5d2e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    5d30:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    5d32:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    5d34:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    5d36:	2800      	cmp	r0, #0
    5d38:	d1ea      	bne.n	5d10 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    5d3a:	6099      	str	r1, [r3, #8]
}
    5d3c:	e7e9      	b.n	5d12 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    5d3e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5d42:	e7e6      	b.n	5d12 <gpio_nrfx_manage_callback+0x24>

00005d44 <check_level_trigger_pins>:
	struct gpio_nrfx_data *data = get_port_data(port);
    5d44:	68c3      	ldr	r3, [r0, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    5d46:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
{
    5d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t out = data->pin_int_en;
    5d4e:	68dc      	ldr	r4, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    5d50:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    5d54:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
    5d56:	430a      	orrs	r2, r1
    5d58:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    5d5c:	f8d8 2004 	ldr.w	r2, [r8, #4]
    return p_reg->IN;
    5d60:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    5d64:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
    5d66:	ea24 0505 	bic.w	r5, r4, r5
	uint32_t bit = 1U << pin;
    5d6a:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    5d6c:	2700      	movs	r7, #0
	while (level_pins) {
    5d6e:	b914      	cbnz	r4, 5d76 <check_level_trigger_pins+0x32>
}
    5d70:	4628      	mov	r0, r5
    5d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    5d76:	4234      	tst	r4, r6
    5d78:	d00a      	beq.n	5d90 <check_level_trigger_pins+0x4c>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5d7a:	f898 3008 	ldrb.w	r3, [r8, #8]
    5d7e:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    5d82:	2100      	movs	r1, #0
    5d84:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    5d88:	f7fc ffb0 	bl	2cec <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    5d8c:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    5d90:	3701      	adds	r7, #1
		bit <<= 1;
    5d92:	0076      	lsls	r6, r6, #1
    5d94:	e7eb      	b.n	5d6e <check_level_trigger_pins+0x2a>

00005d96 <cfg_level_pins>:
{
    5d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
    5d9a:	68c7      	ldr	r7, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    5d9c:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
    5da0:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    5da2:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
    5da6:	4313      	orrs	r3, r2
    5da8:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
    5dac:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    5dae:	2500      	movs	r5, #0
	while (level_pins) {
    5db0:	b90c      	cbnz	r4, 5db6 <cfg_level_pins+0x20>
}
    5db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    5db6:	4226      	tst	r6, r4
    5db8:	d010      	beq.n	5ddc <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    5dba:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5dbc:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
    5dc0:	40e9      	lsrs	r1, r5
    5dc2:	f001 0101 	and.w	r1, r1, #1
    5dc6:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5dca:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    5dce:	b2c9      	uxtb	r1, r1
    5dd0:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    5dd4:	f7fc ff8a 	bl	2cec <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    5dd8:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    5ddc:	3501      	adds	r5, #1
		bit <<= 1;
    5dde:	0076      	lsls	r6, r6, #1
    5de0:	e7e6      	b.n	5db0 <cfg_level_pins+0x1a>

00005de2 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    5de2:	6843      	ldr	r3, [r0, #4]
    5de4:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    5de6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    5dea:	05d2      	lsls	r2, r2, #23
{
    5dec:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    5dee:	d518      	bpl.n	5e22 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5df0:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    5df4:	b1aa      	cbz	r2, 5e22 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    5df6:	f04f 0120 	mov.w	r1, #32
    5dfa:	f3ef 8211 	mrs	r2, BASEPRI
    5dfe:	f381 8811 	msr	BASEPRI, r1
    5e02:	f3bf 8f6f 	isb	sy
    5e06:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5e0a:	b131      	cbz	r1, 5e1a <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e0c:	2100      	movs	r1, #0
    5e0e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    5e12:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e16:	2101      	movs	r1, #1
    5e18:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    5e1a:	f382 8811 	msr	BASEPRI, r2
    5e1e:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
    5e22:	68c2      	ldr	r2, [r0, #12]
    5e24:	68d2      	ldr	r2, [r2, #12]
    5e26:	b15a      	cbz	r2, 5e40 <uarte_nrfx_isr_int+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5e28:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    5e2c:	b151      	cbz	r1, 5e44 <uarte_nrfx_isr_int+0x62>
		if (data->int_driven->disable_tx_irq) {
    5e2e:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
    5e30:	2100      	movs	r1, #0
    5e32:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    5e34:	b134      	cbz	r4, 5e44 <uarte_nrfx_isr_int+0x62>
    p_reg->INTENCLR = mask;
    5e36:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    5e3a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    5e3e:	7391      	strb	r1, [r2, #14]
}
    5e40:	bc10      	pop	{r4}
    5e42:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5e44:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    5e48:	b121      	cbz	r1, 5e54 <uarte_nrfx_isr_int+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e4a:	2100      	movs	r1, #0
    5e4c:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    5e50:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    5e54:	6813      	ldr	r3, [r2, #0]
    5e56:	2b00      	cmp	r3, #0
    5e58:	d0f2      	beq.n	5e40 <uarte_nrfx_isr_int+0x5e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    5e5a:	6851      	ldr	r1, [r2, #4]
}
    5e5c:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
    5e5e:	4718      	bx	r3

00005e60 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    5e60:	68c2      	ldr	r2, [r0, #12]
{
    5e62:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    5e64:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    5e68:	e883 0003 	stmia.w	r3, {r0, r1}
}
    5e6c:	2000      	movs	r0, #0
    5e6e:	4770      	bx	lr

00005e70 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    5e70:	6843      	ldr	r3, [r0, #4]
    5e72:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    5e74:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5e78:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    5e7c:	4770      	bx	lr

00005e7e <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    5e7e:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    5e80:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5e82:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5e86:	b938      	cbnz	r0, 5e98 <is_tx_ready+0x1a>
    5e88:	7992      	ldrb	r2, [r2, #6]
    5e8a:	b932      	cbnz	r2, 5e9a <is_tx_ready+0x1c>
    5e8c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    5e90:	3800      	subs	r0, #0
    5e92:	bf18      	it	ne
    5e94:	2001      	movne	r0, #1
    5e96:	4770      	bx	lr
    5e98:	2001      	movs	r0, #1
}
    5e9a:	4770      	bx	lr

00005e9c <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    5e9c:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    5e9e:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
    5ea0:	681b      	ldr	r3, [r3, #0]
    5ea2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5ea6:	b148      	cbz	r0, 5ebc <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    5ea8:	7d52      	ldrb	r2, [r2, #21]
    5eaa:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5eac:	2000      	movs	r0, #0
    5eae:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    5eb2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5eb6:	2201      	movs	r2, #1
    5eb8:	601a      	str	r2, [r3, #0]
	return 0;
    5eba:	4770      	bx	lr
		return -1;
    5ebc:	f04f 30ff 	mov.w	r0, #4294967295
}
    5ec0:	4770      	bx	lr

00005ec2 <uarte_nrfx_fifo_fill>:
{
    5ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return config->uarte_regs;
    5ec4:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    5ec6:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
    5ec8:	681d      	ldr	r5, [r3, #0]
	len = MIN(len, data->int_driven->tx_buff_size);
    5eca:	68f3      	ldr	r3, [r6, #12]
    5ecc:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5ece:	f3bf 8f5b 	dmb	ish
    5ed2:	4294      	cmp	r4, r2
    5ed4:	bfa8      	it	ge
    5ed6:	4614      	movge	r4, r2
    5ed8:	3310      	adds	r3, #16
    5eda:	2201      	movs	r2, #1
    5edc:	e853 7f00 	ldrex	r7, [r3]
    5ee0:	2f00      	cmp	r7, #0
    5ee2:	d104      	bne.n	5eee <uarte_nrfx_fifo_fill+0x2c>
    5ee4:	e843 2c00 	strex	ip, r2, [r3]
    5ee8:	f1bc 0f00 	cmp.w	ip, #0
    5eec:	d1f6      	bne.n	5edc <uarte_nrfx_fifo_fill+0x1a>
    5eee:	f3bf 8f5b 	dmb	ish
    5ef2:	bf0c      	ite	eq
    5ef4:	4613      	moveq	r3, r2
    5ef6:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    5ef8:	d01c      	beq.n	5f34 <uarte_nrfx_fifo_fill+0x72>
		return 0;
    5efa:	461c      	mov	r4, r3
}
    5efc:	4620      	mov	r0, r4
    5efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
    5f00:	68f2      	ldr	r2, [r6, #12]
    5f02:	5ccf      	ldrb	r7, [r1, r3]
    5f04:	6892      	ldr	r2, [r2, #8]
    5f06:	54d7      	strb	r7, [r2, r3]
	for (int i = 0; i < len; i++) {
    5f08:	3301      	adds	r3, #1
    5f0a:	42a3      	cmp	r3, r4
    5f0c:	dbf8      	blt.n	5f00 <uarte_nrfx_fifo_fill+0x3e>
	__asm__ volatile(
    5f0e:	f04f 0320 	mov.w	r3, #32
    5f12:	f3ef 8111 	mrs	r1, BASEPRI
    5f16:	f383 8811 	msr	BASEPRI, r3
    5f1a:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    5f1e:	f7ff ffae 	bl	5e7e <is_tx_ready>
    5f22:	68f3      	ldr	r3, [r6, #12]
    5f24:	b940      	cbnz	r0, 5f38 <uarte_nrfx_fifo_fill+0x76>
		data->int_driven->fifo_fill_lock = 0;
    5f26:	6118      	str	r0, [r3, #16]
		len = 0;
    5f28:	4604      	mov	r4, r0
	__asm__ volatile(
    5f2a:	f381 8811 	msr	BASEPRI, r1
    5f2e:	f3bf 8f6f 	isb	sy
	return len;
    5f32:	e7e3      	b.n	5efc <uarte_nrfx_fifo_fill+0x3a>
	for (int i = 0; i < len; i++) {
    5f34:	2300      	movs	r3, #0
    5f36:	e7e8      	b.n	5f0a <uarte_nrfx_fifo_fill+0x48>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5f38:	689b      	ldr	r3, [r3, #8]
    5f3a:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f3e:	2300      	movs	r3, #0
    p_reg->TXD.MAXCNT = length;
    5f40:	f8c5 4548 	str.w	r4, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f44:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    5f48:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
    5f4c:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
    5f50:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5f54:	2301      	movs	r3, #1
    5f56:	60ab      	str	r3, [r5, #8]
}
    5f58:	e7e7      	b.n	5f2a <uarte_nrfx_fifo_fill+0x68>

00005f5a <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
    5f5a:	6843      	ldr	r3, [r0, #4]
    5f5c:	681b      	ldr	r3, [r3, #0]
{
    5f5e:	4602      	mov	r2, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5f60:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5f64:	b148      	cbz	r0, 5f7a <uarte_nrfx_fifo_read+0x20>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    5f66:	68d2      	ldr	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f68:	2000      	movs	r0, #0
    5f6a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    5f6e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    5f72:	7d52      	ldrb	r2, [r2, #21]
    5f74:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5f76:	2001      	movs	r0, #1
    5f78:	6018      	str	r0, [r3, #0]
}
    5f7a:	4770      	bx	lr

00005f7c <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    5f7c:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    5f7e:	68c1      	ldr	r1, [r0, #12]
	return config->uarte_regs;
    5f80:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    5f82:	f04f 0020 	mov.w	r0, #32
    5f86:	f3ef 8311 	mrs	r3, BASEPRI
    5f8a:	f380 8811 	msr	BASEPRI, r0
    5f8e:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    5f92:	68c9      	ldr	r1, [r1, #12]
    5f94:	2000      	movs	r0, #0
    5f96:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    5f98:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    5f9c:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    5fa0:	f383 8811 	msr	BASEPRI, r3
    5fa4:	f3bf 8f6f 	isb	sy
}
    5fa8:	4770      	bx	lr

00005faa <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    5faa:	68c3      	ldr	r3, [r0, #12]
    5fac:	68db      	ldr	r3, [r3, #12]
    5fae:	2201      	movs	r2, #1
    5fb0:	739a      	strb	r2, [r3, #14]
}
    5fb2:	4770      	bx	lr

00005fb4 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    5fb4:	68c3      	ldr	r3, [r0, #12]
    5fb6:	68db      	ldr	r3, [r3, #12]
    5fb8:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    5fba:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    5fbe:	b962      	cbnz	r2, 5fda <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    5fc0:	6842      	ldr	r2, [r0, #4]
    5fc2:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5fc4:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    5fc8:	b140      	cbz	r0, 5fdc <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    5fca:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
    5fce:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    5fd2:	d003      	beq.n	5fdc <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
    5fd4:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    5fd6:	2001      	movs	r0, #1
    5fd8:	4770      	bx	lr
    5fda:	2000      	movs	r0, #0
}
    5fdc:	4770      	bx	lr

00005fde <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    5fde:	6843      	ldr	r3, [r0, #4]
    5fe0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5fe2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    5fe6:	3800      	subs	r0, #0
    5fe8:	bf18      	it	ne
    5fea:	2001      	movne	r0, #1
    5fec:	4770      	bx	lr

00005fee <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
    5fee:	6843      	ldr	r3, [r0, #4]
    5ff0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5ff2:	2210      	movs	r2, #16
    5ff4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5ff8:	4770      	bx	lr

00005ffa <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
    5ffa:	6843      	ldr	r3, [r0, #4]
    5ffc:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    5ffe:	2210      	movs	r2, #16
    6000:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    6004:	4770      	bx	lr

00006006 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
    6006:	6843      	ldr	r3, [r0, #4]
    6008:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    600a:	f44f 7200 	mov.w	r2, #512	; 0x200
    600e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6012:	4770      	bx	lr

00006014 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
    6014:	6843      	ldr	r3, [r0, #4]
    6016:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    6018:	f44f 7200 	mov.w	r2, #512	; 0x200
    601c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    6020:	4770      	bx	lr

00006022 <uarte_nrfx_irq_update>:
}
    6022:	2001      	movs	r0, #1
    6024:	4770      	bx	lr

00006026 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
    6026:	68c3      	ldr	r3, [r0, #12]
    6028:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
    602a:	e9c3 1200 	strd	r1, r2, [r3]
}
    602e:	4770      	bx	lr

00006030 <uarte_nrfx_irq_is_pending>:
{
    6030:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    6032:	6843      	ldr	r3, [r0, #4]
    6034:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    6036:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    603a:	025b      	lsls	r3, r3, #9
{
    603c:	4604      	mov	r4, r0
		||
    603e:	d405      	bmi.n	604c <uarte_nrfx_irq_is_pending+0x1c>
    6040:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    6044:	f010 0010 	ands.w	r0, r0, #16
    6048:	d106      	bne.n	6058 <uarte_nrfx_irq_is_pending+0x28>
}
    604a:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    604c:	f7ff ffb2 	bl	5fb4 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    6050:	2800      	cmp	r0, #0
    6052:	d0f5      	beq.n	6040 <uarte_nrfx_irq_is_pending+0x10>
		||
    6054:	2001      	movs	r0, #1
    6056:	e7f8      	b.n	604a <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    6058:	4620      	mov	r0, r4
    605a:	f7ff ffc0 	bl	5fde <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    605e:	3800      	subs	r0, #0
    6060:	bf18      	it	ne
    6062:	2001      	movne	r0, #1
    6064:	e7f1      	b.n	604a <uarte_nrfx_irq_is_pending+0x1a>

00006066 <hw_cc3xx_init>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init(const struct device *dev)
{
    6066:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    6068:	f7fb ff6c 	bl	1f44 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    606c:	f7fc f81e 	bl	20ac <nrf_cc3xx_platform_mutex_init>
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif
	return res;
}
    6070:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    6074:	f7fe bd9a 	b.w	4bac <nrf_cc3xx_platform_init_no_rng>

00006078 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    6078:	4700      	bx	r0

0000607a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    607a:	f000 b900 	b.w	627e <z_impl_k_busy_wait>

0000607e <nrfx_clock_enable>:
{
    607e:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6080:	2000      	movs	r0, #0
    6082:	f7fc f88d 	bl	21a0 <arch_irq_is_enabled>
    6086:	b918      	cbnz	r0, 6090 <nrfx_clock_enable+0x12>
}
    6088:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    608c:	f7fc b878 	b.w	2180 <arch_irq_enable>
    6090:	bd08      	pop	{r3, pc}

00006092 <z_pm_save_idle_exit>:
	z_clock_idle_exit();
    6092:	f7ff bd57 	b.w	5b44 <z_clock_idle_exit>

00006096 <k_mem_slab_init>:
{
    6096:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    6098:	2400      	movs	r4, #0
    609a:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    609c:	ea41 0402 	orr.w	r4, r1, r2
    60a0:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    60a4:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    60a8:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    60aa:	d10c      	bne.n	60c6 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    60ac:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    60ae:	42a3      	cmp	r3, r4
    60b0:	d103      	bne.n	60ba <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    60b2:	e9c0 0000 	strd	r0, r0, [r0]
}
    60b6:	2000      	movs	r0, #0
}
    60b8:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    60ba:	6945      	ldr	r5, [r0, #20]
    60bc:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    60be:	3401      	adds	r4, #1
		slab->free_list = p;
    60c0:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    60c2:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    60c4:	e7f3      	b.n	60ae <k_mem_slab_init+0x18>
		return -EINVAL;
    60c6:	f06f 0015 	mvn.w	r0, #21
	return rc;
    60ca:	e7f5      	b.n	60b8 <k_mem_slab_init+0x22>

000060cc <z_impl_k_mutex_init>:
{
    60cc:	4603      	mov	r3, r0
	mutex->owner = NULL;
    60ce:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    60d0:	e9c3 0002 	strd	r0, r0, [r3, #8]
    60d4:	e9c3 3300 	strd	r3, r3, [r3]
}
    60d8:	4770      	bx	lr

000060da <z_find_first_thread_to_unpend>:
{
    60da:	b510      	push	{r4, lr}
	__asm__ volatile(
    60dc:	f04f 0320 	mov.w	r3, #32
    60e0:	f3ef 8411 	mrs	r4, BASEPRI
    60e4:	f383 8811 	msr	BASEPRI, r3
    60e8:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    60ec:	f000 f837 	bl	615e <z_priq_dumb_best>
	__asm__ volatile(
    60f0:	f384 8811 	msr	BASEPRI, r4
    60f4:	f3bf 8f6f 	isb	sy
}
    60f8:	bd10      	pop	{r4, pc}

000060fa <z_unpend_thread_no_timeout>:
{
    60fa:	b510      	push	{r4, lr}
	__asm__ volatile(
    60fc:	f04f 0320 	mov.w	r3, #32
    6100:	f3ef 8411 	mrs	r4, BASEPRI
    6104:	f383 8811 	msr	BASEPRI, r3
    6108:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    610c:	f000 f81b 	bl	6146 <unpend_thread_no_timeout>
	__asm__ volatile(
    6110:	f384 8811 	msr	BASEPRI, r4
    6114:	f3bf 8f6f 	isb	sy
}
    6118:	bd10      	pop	{r4, pc}

0000611a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    611a:	4603      	mov	r3, r0
    611c:	b920      	cbnz	r0, 6128 <z_reschedule_irqlock+0xe>
    611e:	f3ef 8205 	mrs	r2, IPSR
    6122:	b90a      	cbnz	r2, 6128 <z_reschedule_irqlock+0xe>
    6124:	f7fb bfd8 	b.w	20d8 <arch_swap>
    6128:	f383 8811 	msr	BASEPRI, r3
    612c:	f3bf 8f6f 	isb	sy
}
    6130:	4770      	bx	lr

00006132 <z_reschedule_unlocked>:
	__asm__ volatile(
    6132:	f04f 0320 	mov.w	r3, #32
    6136:	f3ef 8011 	mrs	r0, BASEPRI
    613a:	f383 8811 	msr	BASEPRI, r3
    613e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    6142:	f7ff bfea 	b.w	611a <z_reschedule_irqlock>

00006146 <unpend_thread_no_timeout>:
{
    6146:	4601      	mov	r1, r0
    6148:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    614a:	6880      	ldr	r0, [r0, #8]
    614c:	f7fd febe 	bl	3ecc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6150:	7b4b      	ldrb	r3, [r1, #13]
    6152:	f023 0302 	bic.w	r3, r3, #2
    6156:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
    6158:	2300      	movs	r3, #0
    615a:	608b      	str	r3, [r1, #8]
}
    615c:	bd08      	pop	{r3, pc}

0000615e <z_priq_dumb_best>:
{
    615e:	4603      	mov	r3, r0
	return list->head == list;
    6160:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6162:	4283      	cmp	r3, r0
    6164:	d003      	beq.n	616e <z_priq_dumb_best+0x10>
	if (n != NULL) {
    6166:	2800      	cmp	r0, #0
    6168:	bf38      	it	cc
    616a:	2000      	movcc	r0, #0
    616c:	4770      	bx	lr
	struct k_thread *thread = NULL;
    616e:	2000      	movs	r0, #0
}
    6170:	4770      	bx	lr

00006172 <z_ready_thread>:
{
    6172:	b510      	push	{r4, lr}
    6174:	f04f 0320 	mov.w	r3, #32
    6178:	f3ef 8411 	mrs	r4, BASEPRI
    617c:	f383 8811 	msr	BASEPRI, r3
    6180:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
    6184:	f7fd fefc 	bl	3f80 <ready_thread>
	__asm__ volatile(
    6188:	f384 8811 	msr	BASEPRI, r4
    618c:	f3bf 8f6f 	isb	sy
}
    6190:	bd10      	pop	{r4, pc}

00006192 <z_thread_timeout>:
{
    6192:	b570      	push	{r4, r5, r6, lr}
    6194:	4604      	mov	r4, r0
	__asm__ volatile(
    6196:	f04f 0320 	mov.w	r3, #32
    619a:	f3ef 8611 	mrs	r6, BASEPRI
    619e:	f383 8811 	msr	BASEPRI, r3
    61a2:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    61a6:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
    61aa:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
    61ae:	b113      	cbz	r3, 61b6 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
    61b0:	4628      	mov	r0, r5
    61b2:	f7ff ffc8 	bl	6146 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    61b6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    61ba:	f023 0314 	bic.w	r3, r3, #20
    61be:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
    61c2:	4628      	mov	r0, r5
    61c4:	f7fd fedc 	bl	3f80 <ready_thread>
	__asm__ volatile(
    61c8:	f386 8811 	msr	BASEPRI, r6
    61cc:	f3bf 8f6f 	isb	sy
}
    61d0:	bd70      	pop	{r4, r5, r6, pc}

000061d2 <add_to_waitq_locked>:
{
    61d2:	b538      	push	{r3, r4, r5, lr}
    61d4:	4604      	mov	r4, r0
    61d6:	460d      	mov	r5, r1
	unready_thread(thread);
    61d8:	f7fe f85a 	bl	4290 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    61dc:	7b63      	ldrb	r3, [r4, #13]
    61de:	f043 0302 	orr.w	r3, r3, #2
    61e2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    61e4:	b1c5      	cbz	r5, 6218 <add_to_waitq_locked+0x46>
	return list->head == list;
    61e6:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    61e8:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    61ea:	429d      	cmp	r5, r3
    61ec:	bf08      	it	eq
    61ee:	2300      	moveq	r3, #0
    61f0:	2b00      	cmp	r3, #0
    61f2:	bf38      	it	cc
    61f4:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    61f6:	b183      	cbz	r3, 621a <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
    61f8:	f994 100e 	ldrsb.w	r1, [r4, #14]
    61fc:	f993 200e 	ldrsb.w	r2, [r3, #14]
    6200:	4291      	cmp	r1, r2
    6202:	db04      	blt.n	620e <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
    6204:	686a      	ldr	r2, [r5, #4]
    6206:	429a      	cmp	r2, r3
    6208:	d007      	beq.n	621a <add_to_waitq_locked+0x48>
    620a:	681b      	ldr	r3, [r3, #0]
    620c:	e7f3      	b.n	61f6 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
    620e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6210:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    6214:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6216:	605c      	str	r4, [r3, #4]
}
    6218:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
    621a:	686b      	ldr	r3, [r5, #4]
    621c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    621e:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    6220:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
    6222:	601c      	str	r4, [r3, #0]
	list->tail = node;
    6224:	606c      	str	r4, [r5, #4]
    6226:	e7f7      	b.n	6218 <add_to_waitq_locked+0x46>

00006228 <z_unpend_first_thread>:
{
    6228:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    622a:	f04f 0320 	mov.w	r3, #32
    622e:	f3ef 8211 	mrs	r2, BASEPRI
    6232:	f383 8811 	msr	BASEPRI, r3
    6236:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    623a:	f7ff ff90 	bl	615e <z_priq_dumb_best>
    623e:	4604      	mov	r4, r0
	__asm__ volatile(
    6240:	f382 8811 	msr	BASEPRI, r2
    6244:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    6248:	b188      	cbz	r0, 626e <z_unpend_first_thread+0x46>
	__asm__ volatile(
    624a:	f04f 0320 	mov.w	r3, #32
    624e:	f3ef 8511 	mrs	r5, BASEPRI
    6252:	f383 8811 	msr	BASEPRI, r3
    6256:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    625a:	f7ff ff74 	bl	6146 <unpend_thread_no_timeout>
	__asm__ volatile(
    625e:	f385 8811 	msr	BASEPRI, r5
    6262:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
    6266:	f104 0018 	add.w	r0, r4, #24
    626a:	f000 f811 	bl	6290 <z_abort_timeout>
}
    626e:	4620      	mov	r0, r4
    6270:	bd38      	pop	{r3, r4, r5, pc}

00006272 <k_is_in_isr>:
    6272:	f3ef 8005 	mrs	r0, IPSR
}
    6276:	3800      	subs	r0, #0
    6278:	bf18      	it	ne
    627a:	2001      	movne	r0, #1
    627c:	4770      	bx	lr

0000627e <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
    627e:	b108      	cbz	r0, 6284 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
    6280:	f7fc bc2c 	b.w	2adc <arch_busy_wait>
}
    6284:	4770      	bx	lr

00006286 <z_impl_k_thread_name_set>:
}
    6286:	f06f 0046 	mvn.w	r0, #70	; 0x46
    628a:	4770      	bx	lr

0000628c <k_thread_name_get>:
}
    628c:	2000      	movs	r0, #0
    628e:	4770      	bx	lr

00006290 <z_abort_timeout>:
{
    6290:	b510      	push	{r4, lr}
	__asm__ volatile(
    6292:	f04f 0220 	mov.w	r2, #32
    6296:	f3ef 8411 	mrs	r4, BASEPRI
    629a:	f382 8811 	msr	BASEPRI, r2
    629e:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    62a2:	6803      	ldr	r3, [r0, #0]
    62a4:	b13b      	cbz	r3, 62b6 <z_abort_timeout+0x26>
			remove_timeout(to);
    62a6:	f7fe fa91 	bl	47cc <remove_timeout>
			ret = 0;
    62aa:	2000      	movs	r0, #0
	__asm__ volatile(
    62ac:	f384 8811 	msr	BASEPRI, r4
    62b0:	f3bf 8f6f 	isb	sy
}
    62b4:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    62b6:	f06f 0015 	mvn.w	r0, #21
    62ba:	e7f7      	b.n	62ac <z_abort_timeout+0x1c>

000062bc <z_get_next_timeout_expiry>:
{
    62bc:	b510      	push	{r4, lr}
	__asm__ volatile(
    62be:	f04f 0320 	mov.w	r3, #32
    62c2:	f3ef 8411 	mrs	r4, BASEPRI
    62c6:	f383 8811 	msr	BASEPRI, r3
    62ca:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    62ce:	f7fe fa97 	bl	4800 <next_timeout>
	__asm__ volatile(
    62d2:	f384 8811 	msr	BASEPRI, r4
    62d6:	f3bf 8f6f 	isb	sy
}
    62da:	bd10      	pop	{r4, pc}

000062dc <z_set_timeout_expiry>:
{
    62dc:	b570      	push	{r4, r5, r6, lr}
    62de:	4604      	mov	r4, r0
    62e0:	460d      	mov	r5, r1
	__asm__ volatile(
    62e2:	f04f 0320 	mov.w	r3, #32
    62e6:	f3ef 8611 	mrs	r6, BASEPRI
    62ea:	f383 8811 	msr	BASEPRI, r3
    62ee:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    62f2:	f7fe fa85 	bl	4800 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    62f6:	2801      	cmp	r0, #1
    62f8:	dd05      	ble.n	6306 <z_set_timeout_expiry+0x2a>
    62fa:	42a0      	cmp	r0, r4
    62fc:	dd03      	ble.n	6306 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
    62fe:	4629      	mov	r1, r5
    6300:	4620      	mov	r0, r4
    6302:	f7fb fdb9 	bl	1e78 <z_clock_set_timeout>
	__asm__ volatile(
    6306:	f386 8811 	msr	BASEPRI, r6
    630a:	f3bf 8f6f 	isb	sy
}
    630e:	bd70      	pop	{r4, r5, r6, pc}

00006310 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
    6310:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
    6312:	f7fe fb9d 	bl	4a50 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    6316:	bd08      	pop	{r3, pc}

00006318 <k_timer_init>:
	timer->status = 0U;
    6318:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    631a:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    631e:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    6322:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    6326:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    632a:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    632c:	6343      	str	r3, [r0, #52]	; 0x34
}
    632e:	4770      	bx	lr

00006330 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    6330:	b510      	push	{r4, lr}
    6332:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
    6334:	f7ff ffac 	bl	6290 <z_abort_timeout>

	if (inactive) {
    6338:	b9d8      	cbnz	r0, 6372 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
    633a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    633c:	b10b      	cbz	r3, 6342 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    633e:	4620      	mov	r0, r4
    6340:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
    6342:	f104 0018 	add.w	r0, r4, #24
    6346:	2100      	movs	r1, #0
    6348:	f7ff fec7 	bl	60da <z_find_first_thread_to_unpend>
	if (thread != NULL) {
    634c:	4604      	mov	r4, r0
    634e:	b180      	cbz	r0, 6372 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
    6350:	f7ff fed3 	bl	60fa <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
    6354:	4620      	mov	r0, r4
    6356:	f7ff ff0c 	bl	6172 <z_ready_thread>
	__asm__ volatile(
    635a:	f04f 0320 	mov.w	r3, #32
    635e:	f3ef 8011 	mrs	r0, BASEPRI
    6362:	f383 8811 	msr	BASEPRI, r3
    6366:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
    636a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    636e:	f7ff bed4 	b.w	611a <z_reschedule_irqlock>
    6372:	bd10      	pop	{r4, pc}

00006374 <k_heap_init>:
{
    6374:	b410      	push	{r4}
    6376:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    637a:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    637e:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    6380:	f7fe bf6d 	b.w	525e <sys_heap_init>

00006384 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    6384:	4770      	bx	lr
